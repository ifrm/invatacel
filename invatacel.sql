-- phpMyAdmin SQL Dump
-- version 4.5.1
-- http://www.phpmyadmin.net
--
-- Host: 127.0.0.1
-- Generation Time: May 23, 2016 at 07:28 PM
-- Server version: 10.1.10-MariaDB
-- PHP Version: 5.6.19

SET SQL_MODE = "NO_AUTO_VALUE_ON_ZERO";
SET time_zone = "+00:00";


/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8mb4 */;

--
-- Database: `invatacel`
--

-- --------------------------------------------------------

--
-- Table structure for table `wp_commentmeta`
--

CREATE TABLE `wp_commentmeta` (
  `meta_id` bigint(20) UNSIGNED NOT NULL,
  `comment_id` bigint(20) UNSIGNED NOT NULL DEFAULT '0',
  `meta_key` varchar(255) COLLATE utf8mb4_unicode_ci DEFAULT NULL,
  `meta_value` longtext COLLATE utf8mb4_unicode_ci
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- --------------------------------------------------------

--
-- Table structure for table `wp_comments`
--

CREATE TABLE `wp_comments` (
  `comment_ID` bigint(20) UNSIGNED NOT NULL,
  `comment_post_ID` bigint(20) UNSIGNED NOT NULL DEFAULT '0',
  `comment_author` tinytext COLLATE utf8mb4_unicode_ci NOT NULL,
  `comment_author_email` varchar(100) COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT '',
  `comment_author_url` varchar(200) COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT '',
  `comment_author_IP` varchar(100) COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT '',
  `comment_date` datetime NOT NULL DEFAULT '0000-00-00 00:00:00',
  `comment_date_gmt` datetime NOT NULL DEFAULT '0000-00-00 00:00:00',
  `comment_content` text COLLATE utf8mb4_unicode_ci NOT NULL,
  `comment_karma` int(11) NOT NULL DEFAULT '0',
  `comment_approved` varchar(20) COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT '1',
  `comment_agent` varchar(255) COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT '',
  `comment_type` varchar(20) COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT '',
  `comment_parent` bigint(20) UNSIGNED NOT NULL DEFAULT '0',
  `user_id` bigint(20) UNSIGNED NOT NULL DEFAULT '0'
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

--
-- Dumping data for table `wp_comments`
--

INSERT INTO `wp_comments` (`comment_ID`, `comment_post_ID`, `comment_author`, `comment_author_email`, `comment_author_url`, `comment_author_IP`, `comment_date`, `comment_date_gmt`, `comment_content`, `comment_karma`, `comment_approved`, `comment_agent`, `comment_type`, `comment_parent`, `user_id`) VALUES
(1, 63, 'admin', 'ionatanfrim@gmail.com', '', '::1', '2016-05-23 17:20:01', '2016-05-23 17:20:01', 'Best way to learn JS', 0, '1', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/50.0.2661.102 Safari/537.36', '', 0, 1);

-- --------------------------------------------------------

--
-- Table structure for table `wp_learnpress_order_itemmeta`
--

CREATE TABLE `wp_learnpress_order_itemmeta` (
  `meta_id` bigint(20) UNSIGNED NOT NULL,
  `learnpress_order_item_id` bigint(20) UNSIGNED NOT NULL DEFAULT '0',
  `meta_key` varchar(45) COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT '',
  `meta_value` longtext COLLATE utf8mb4_unicode_ci NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

--
-- Dumping data for table `wp_learnpress_order_itemmeta`
--

INSERT INTO `wp_learnpress_order_itemmeta` (`meta_id`, `learnpress_order_item_id`, `meta_key`, `meta_value`) VALUES
(1, 1, '_course_id', '21'),
(2, 1, '_quantity', '1'),
(3, 1, '_subtotal', '0'),
(4, 1, '_total', '0'),
(5, 2, '_course_id', '21'),
(6, 2, '_quantity', '1'),
(7, 2, '_subtotal', '0'),
(8, 2, '_total', '0'),
(9, 3, '_course_id', '63'),
(10, 3, '_quantity', '1'),
(11, 3, '_subtotal', '0'),
(12, 3, '_total', '0');

-- --------------------------------------------------------

--
-- Table structure for table `wp_learnpress_order_items`
--

CREATE TABLE `wp_learnpress_order_items` (
  `order_item_id` bigint(20) UNSIGNED NOT NULL,
  `order_item_name` longtext COLLATE utf8mb4_unicode_ci NOT NULL,
  `order_id` bigint(20) UNSIGNED NOT NULL DEFAULT '0'
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

--
-- Dumping data for table `wp_learnpress_order_items`
--

INSERT INTO `wp_learnpress_order_items` (`order_item_id`, `order_item_name`, `order_id`) VALUES
(1, 'HTML', 23),
(2, 'HTML', 30),
(3, 'Java Script', 67);

-- --------------------------------------------------------

--
-- Table structure for table `wp_learnpress_question_answers`
--

CREATE TABLE `wp_learnpress_question_answers` (
  `question_answer_id` bigint(20) UNSIGNED NOT NULL,
  `question_id` bigint(20) UNSIGNED NOT NULL DEFAULT '0',
  `answer_data` text COLLATE utf8mb4_unicode_ci NOT NULL,
  `answer_order` bigint(20) UNSIGNED NOT NULL DEFAULT '0'
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- --------------------------------------------------------

--
-- Table structure for table `wp_learnpress_quiz_questions`
--

CREATE TABLE `wp_learnpress_quiz_questions` (
  `quiz_question_id` bigint(20) UNSIGNED NOT NULL,
  `quiz_id` bigint(11) UNSIGNED NOT NULL DEFAULT '0',
  `question_id` bigint(11) UNSIGNED NOT NULL DEFAULT '0',
  `question_order` bigint(11) UNSIGNED NOT NULL DEFAULT '1',
  `params` longtext COLLATE utf8mb4_unicode_ci
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- --------------------------------------------------------

--
-- Table structure for table `wp_learnpress_review_logs`
--

CREATE TABLE `wp_learnpress_review_logs` (
  `review_log_id` bigint(11) UNSIGNED NOT NULL,
  `course_id` bigint(11) UNSIGNED NOT NULL DEFAULT '0',
  `user_id` bigint(11) UNSIGNED NOT NULL DEFAULT '0',
  `message` text COLLATE utf8mb4_unicode_ci NOT NULL,
  `date` datetime NOT NULL DEFAULT '0000-00-00 00:00:00',
  `status` varchar(45) COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT '',
  `user_type` varchar(45) COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT ''
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- --------------------------------------------------------

--
-- Table structure for table `wp_learnpress_sections`
--

CREATE TABLE `wp_learnpress_sections` (
  `section_id` bigint(11) UNSIGNED NOT NULL,
  `section_name` varchar(255) COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT '',
  `section_course_id` bigint(11) UNSIGNED NOT NULL DEFAULT '0',
  `section_order` bigint(5) UNSIGNED NOT NULL DEFAULT '0',
  `section_description` longtext COLLATE utf8mb4_unicode_ci NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

--
-- Dumping data for table `wp_learnpress_sections`
--

INSERT INTO `wp_learnpress_sections` (`section_id`, `section_name`, `section_course_id`, `section_order`, `section_description`) VALUES
(1, 'What is HTML ?', 21, 1, ''),
(5, 'Introduction', 39, 1, ''),
(8, 'Introduction', 51, 1, ''),
(9, 'Introduction', 63, 1, '');

-- --------------------------------------------------------

--
-- Table structure for table `wp_learnpress_section_items`
--

CREATE TABLE `wp_learnpress_section_items` (
  `section_item_id` bigint(11) UNSIGNED NOT NULL,
  `section_id` bigint(11) UNSIGNED NOT NULL DEFAULT '0',
  `item_id` bigint(11) UNSIGNED NOT NULL DEFAULT '0',
  `item_order` bigint(11) UNSIGNED NOT NULL DEFAULT '0',
  `item_type` varchar(45) COLLATE utf8mb4_unicode_ci DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

--
-- Dumping data for table `wp_learnpress_section_items`
--

INSERT INTO `wp_learnpress_section_items` (`section_item_id`, `section_id`, `item_id`, `item_order`, `item_type`) VALUES
(7, 5, 43, 1, 'lp_lesson'),
(8, 5, 32, 2, 'lp_lesson'),
(9, 5, 34, 3, 'lp_lesson'),
(10, 5, 81, 4, 'lp_lesson'),
(11, 5, 87, 5, 'lp_lesson'),
(12, 5, 90, 6, 'lp_lesson'),
(13, 5, 93, 7, 'lp_lesson'),
(14, 5, 96, 8, 'lp_lesson'),
(15, 5, 98, 9, 'lp_lesson'),
(16, 5, 99, 10, 'lp_lesson'),
(17, 5, 100, 11, 'lp_lesson'),
(18, 5, 101, 12, 'lp_lesson'),
(19, 5, 102, 13, 'lp_lesson'),
(20, 5, 103, 14, 'lp_lesson'),
(21, 5, 104, 15, 'lp_lesson'),
(22, 5, 105, 16, 'lp_lesson'),
(23, 5, 106, 17, 'lp_lesson'),
(63, 8, 53, 1, 'lp_lesson'),
(64, 8, 118, 2, 'lp_lesson'),
(65, 8, 119, 3, 'lp_lesson'),
(66, 8, 120, 4, 'lp_lesson'),
(67, 8, 121, 5, 'lp_lesson'),
(68, 8, 122, 6, 'lp_lesson'),
(69, 8, 123, 7, 'lp_lesson'),
(70, 8, 124, 8, 'lp_lesson'),
(71, 8, 125, 9, 'lp_lesson'),
(72, 8, 126, 10, 'lp_lesson'),
(73, 8, 127, 11, 'lp_lesson'),
(74, 8, 128, 12, 'lp_lesson'),
(75, 8, 129, 13, 'lp_lesson'),
(76, 8, 130, 14, 'lp_lesson'),
(77, 8, 131, 15, 'lp_lesson'),
(78, 8, 132, 16, 'lp_lesson'),
(79, 9, 65, 1, 'lp_lesson'),
(80, 9, 191, 2, 'lp_lesson'),
(81, 9, 192, 3, 'lp_lesson'),
(82, 9, 193, 4, 'lp_lesson'),
(83, 9, 194, 5, 'lp_lesson'),
(84, 9, 195, 6, 'lp_lesson'),
(85, 9, 196, 7, 'lp_lesson'),
(86, 9, 197, 8, 'lp_lesson'),
(87, 9, 198, 9, 'lp_lesson'),
(88, 9, 199, 10, 'lp_lesson'),
(89, 9, 200, 11, 'lp_lesson'),
(90, 9, 201, 12, 'lp_lesson'),
(91, 9, 202, 13, 'lp_lesson'),
(92, 9, 203, 14, 'lp_lesson'),
(93, 9, 204, 15, 'lp_lesson'),
(94, 9, 205, 16, 'lp_lesson'),
(95, 9, 206, 17, 'lp_lesson'),
(96, 9, 230, 18, 'lp_lesson'),
(97, 9, 207, 19, 'lp_lesson'),
(98, 9, 208, 20, 'lp_lesson'),
(99, 9, 209, 21, 'lp_lesson'),
(100, 9, 210, 22, 'lp_lesson'),
(101, 9, 211, 23, 'lp_lesson');

-- --------------------------------------------------------

--
-- Table structure for table `wp_learnpress_user_courses`
--

CREATE TABLE `wp_learnpress_user_courses` (
  `user_course_id` bigint(11) UNSIGNED NOT NULL,
  `user_id` bigint(11) UNSIGNED NOT NULL DEFAULT '0',
  `course_id` bigint(11) UNSIGNED NOT NULL DEFAULT '0',
  `start_time` datetime NOT NULL DEFAULT '0000-00-00 00:00:00',
  `end_time` datetime NOT NULL DEFAULT '0000-00-00 00:00:00',
  `status` varchar(45) COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT '',
  `order_id` bigint(11) UNSIGNED NOT NULL DEFAULT '0'
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

--
-- Dumping data for table `wp_learnpress_user_courses`
--

INSERT INTO `wp_learnpress_user_courses` (`user_course_id`, `user_id`, `course_id`, `start_time`, `end_time`, `status`, `order_id`) VALUES
(1, 2, 21, '2016-04-10 18:31:41', '0000-00-00 00:00:00', 'enrolled', 23),
(2, 1, 21, '2016-04-12 13:36:23', '2016-04-12 13:37:21', 'finished', 30),
(3, 1, 63, '2016-05-07 14:22:47', '0000-00-00 00:00:00', 'enrolled', 67);

-- --------------------------------------------------------

--
-- Table structure for table `wp_learnpress_user_lessons`
--

CREATE TABLE `wp_learnpress_user_lessons` (
  `user_lesson_id` bigint(11) UNSIGNED NOT NULL,
  `user_id` bigint(11) UNSIGNED NOT NULL,
  `lesson_id` bigint(11) UNSIGNED NOT NULL,
  `course_id` bigint(11) DEFAULT NULL,
  `start_time` datetime DEFAULT NULL,
  `end_time` datetime DEFAULT NULL,
  `status` varchar(20) DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `wp_learnpress_user_lessons`
--

INSERT INTO `wp_learnpress_user_lessons` (`user_lesson_id`, `user_id`, `lesson_id`, `course_id`, `start_time`, `end_time`, `status`) VALUES
(1, 1, 24, 21, '2016-04-12 13:36:35', '2016-04-12 13:36:41', 'completed'),
(2, 1, 43, 39, '2016-05-07 10:24:05', NULL, 'stared'),
(3, 1, 32, 39, '2016-05-07 14:19:01', NULL, 'stared'),
(4, 1, 34, 39, '2016-05-07 14:19:06', NULL, 'stared'),
(5, 0, 53, 51, '2016-05-20 19:42:11', NULL, 'stared'),
(6, 0, 34, 39, '2016-05-20 19:42:37', NULL, 'stared'),
(7, 0, 43, 39, '2016-05-20 19:42:57', NULL, 'stared'),
(8, 0, 32, 39, '2016-05-20 19:43:09', NULL, 'stared'),
(9, 1, 80, 39, '2016-05-20 20:36:13', NULL, 'stared'),
(10, 1, 81, 39, '2016-05-20 20:37:10', NULL, 'stared'),
(11, 1, 87, 39, '2016-05-20 20:40:48', NULL, 'stared'),
(12, 0, 90, 39, '2016-05-21 12:50:25', NULL, 'stared'),
(13, 1, 93, 39, '2016-05-21 12:57:36', NULL, 'stared'),
(14, 1, 96, 39, '2016-05-21 12:59:38', NULL, 'stared'),
(15, 1, 98, 39, '2016-05-21 13:08:47', NULL, 'stared'),
(16, 1, 99, 39, '2016-05-21 13:09:00', NULL, 'stared'),
(17, 1, 100, 39, '2016-05-21 13:31:02', NULL, 'stared'),
(18, 1, 101, 39, '2016-05-21 13:32:24', NULL, 'stared'),
(19, 1, 102, 39, '2016-05-21 13:32:32', NULL, 'stared'),
(20, 1, 103, 39, '2016-05-21 13:33:58', NULL, 'stared'),
(21, 1, 104, 39, '2016-05-21 13:34:18', NULL, 'stared'),
(22, 1, 53, 51, '2016-05-21 14:20:44', NULL, 'stared'),
(23, 1, 118, 51, '2016-05-21 14:35:35', NULL, 'stared'),
(24, 1, 119, 51, '2016-05-21 14:35:44', NULL, 'stared'),
(25, 1, 120, 51, '2016-05-21 14:35:51', NULL, 'stared'),
(26, 1, 121, 51, '2016-05-21 14:35:56', NULL, 'stared'),
(27, 1, 122, 51, '2016-05-21 14:36:25', NULL, 'stared'),
(28, 1, 123, 51, '2016-05-21 14:36:30', NULL, 'stared'),
(29, 1, 124, 51, '2016-05-21 14:36:42', NULL, 'stared'),
(30, 1, 125, 51, '2016-05-21 14:36:47', NULL, 'stared'),
(31, 1, 126, 51, '2016-05-21 14:36:53', NULL, 'stared'),
(32, 1, 127, 51, '2016-05-21 14:36:58', NULL, 'stared'),
(33, 1, 128, 51, '2016-05-21 14:37:04', NULL, 'stared'),
(34, 1, 129, 51, '2016-05-21 14:37:09', NULL, 'stared'),
(35, 1, 130, 51, '2016-05-21 14:37:14', NULL, 'stared'),
(36, 1, 131, 51, '2016-05-21 14:37:20', NULL, 'stared'),
(37, 1, 132, 51, '2016-05-21 14:37:25', NULL, 'stared'),
(38, 1, 65, 63, '2016-05-21 15:05:10', NULL, 'stared'),
(39, 1, 191, 63, '2016-05-21 15:05:14', NULL, 'stared'),
(40, 1, 192, 63, '2016-05-21 15:05:21', NULL, 'stared'),
(41, 1, 193, 63, '2016-05-21 15:05:27', NULL, 'stared'),
(42, 1, 194, 63, '2016-05-21 15:05:34', NULL, 'stared'),
(43, 1, 195, 63, '2016-05-21 15:05:39', NULL, 'stared'),
(44, 1, 196, 63, '2016-05-21 15:05:44', NULL, 'stared'),
(45, 1, 197, 63, '2016-05-21 15:05:49', NULL, 'stared'),
(46, 1, 198, 63, '2016-05-21 15:05:53', NULL, 'stared'),
(47, 1, 199, 63, '2016-05-21 15:05:58', NULL, 'stared'),
(48, 1, 200, 63, '2016-05-21 15:06:02', NULL, 'stared'),
(49, 1, 201, 63, '2016-05-21 15:06:07', NULL, 'stared'),
(50, 1, 202, 63, '2016-05-21 15:06:11', NULL, 'stared'),
(51, 1, 203, 63, '2016-05-21 15:06:16', NULL, 'stared'),
(52, 1, 204, 63, '2016-05-21 15:06:20', NULL, 'stared'),
(53, 1, 205, 63, '2016-05-21 15:06:25', NULL, 'stared'),
(54, 1, 206, 63, '2016-05-21 15:06:29', NULL, 'stared'),
(55, 1, 230, 63, '2016-05-21 15:06:34', NULL, 'stared'),
(56, 1, 207, 63, '2016-05-21 15:06:39', NULL, 'stared'),
(57, 1, 208, 63, '2016-05-21 15:06:43', NULL, 'stared'),
(58, 1, 209, 63, '2016-05-21 15:06:47', NULL, 'stared'),
(59, 1, 210, 63, '2016-05-21 15:06:52', NULL, 'stared'),
(60, 1, 211, 63, '2016-05-21 15:06:55', NULL, 'stared'),
(61, 0, 65, 63, '2016-05-21 15:16:56', NULL, 'stared'),
(62, 0, 191, 63, '2016-05-21 15:17:08', NULL, 'stared'),
(63, 0, 93, 39, '2016-05-21 18:14:00', NULL, 'stared'),
(64, 0, 204, 63, '2016-05-22 19:06:34', NULL, 'stared');

-- --------------------------------------------------------

--
-- Table structure for table `wp_learnpress_user_quizmeta`
--

CREATE TABLE `wp_learnpress_user_quizmeta` (
  `learnpress_user_quiz_id` bigint(11) UNSIGNED NOT NULL,
  `meta_key` varchar(45) COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT '',
  `meta_value` text COLLATE utf8mb4_unicode_ci NOT NULL,
  `meta_id` bigint(11) UNSIGNED NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- --------------------------------------------------------

--
-- Table structure for table `wp_learnpress_user_quizzes`
--

CREATE TABLE `wp_learnpress_user_quizzes` (
  `user_quiz_id` bigint(11) UNSIGNED NOT NULL,
  `user_id` bigint(11) UNSIGNED NOT NULL DEFAULT '0',
  `quiz_id` bigint(11) UNSIGNED NOT NULL DEFAULT '0'
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- --------------------------------------------------------

--
-- Table structure for table `wp_links`
--

CREATE TABLE `wp_links` (
  `link_id` bigint(20) UNSIGNED NOT NULL,
  `link_url` varchar(255) COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT '',
  `link_name` varchar(255) COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT '',
  `link_image` varchar(255) COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT '',
  `link_target` varchar(25) COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT '',
  `link_description` varchar(255) COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT '',
  `link_visible` varchar(20) COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT 'Y',
  `link_owner` bigint(20) UNSIGNED NOT NULL DEFAULT '1',
  `link_rating` int(11) NOT NULL DEFAULT '0',
  `link_updated` datetime NOT NULL DEFAULT '0000-00-00 00:00:00',
  `link_rel` varchar(255) COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT '',
  `link_notes` mediumtext COLLATE utf8mb4_unicode_ci NOT NULL,
  `link_rss` varchar(255) COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT ''
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- --------------------------------------------------------

--
-- Table structure for table `wp_options`
--

CREATE TABLE `wp_options` (
  `option_id` bigint(20) UNSIGNED NOT NULL,
  `option_name` varchar(191) COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT '',
  `option_value` longtext COLLATE utf8mb4_unicode_ci NOT NULL,
  `autoload` varchar(20) COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT 'yes'
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

--
-- Dumping data for table `wp_options`
--

INSERT INTO `wp_options` (`option_id`, `option_name`, `option_value`, `autoload`) VALUES
(1, 'siteurl', 'http://localhost/invatacel', 'yes'),
(2, 'home', 'http://localhost/invatacel', 'yes'),
(3, 'blogname', 'Invatacel', 'yes'),
(4, 'blogdescription', '', 'yes'),
(5, 'users_can_register', '1', 'yes'),
(6, 'admin_email', 'ionatanfrim@gmail.com', 'yes'),
(7, 'start_of_week', '1', 'yes'),
(8, 'use_balanceTags', '0', 'yes'),
(9, 'use_smilies', '1', 'yes'),
(10, 'require_name_email', '1', 'yes'),
(11, 'comments_notify', '1', 'yes'),
(12, 'posts_per_rss', '10', 'yes'),
(13, 'rss_use_excerpt', '0', 'yes'),
(14, 'mailserver_url', 'mail.example.com', 'yes'),
(15, 'mailserver_login', 'login@example.com', 'yes'),
(16, 'mailserver_pass', 'password', 'yes'),
(17, 'mailserver_port', '110', 'yes'),
(18, 'default_category', '1', 'yes'),
(19, 'default_comment_status', 'open', 'yes'),
(20, 'default_ping_status', 'open', 'yes'),
(21, 'default_pingback_flag', '1', 'yes'),
(22, 'posts_per_page', '10', 'yes'),
(23, 'date_format', 'F j, Y', 'yes'),
(24, 'time_format', 'g:i a', 'yes'),
(25, 'links_updated_date_format', 'F j, Y g:i a', 'yes'),
(26, 'comment_moderation', '0', 'yes'),
(27, 'moderation_notify', '1', 'yes'),
(28, 'permalink_structure', '/%year%/%monthnum%/%day%/%postname%/', 'yes'),
(29, 'hack_file', '0', 'yes'),
(30, 'blog_charset', 'UTF-8', 'yes'),
(31, 'moderation_keys', '', 'no'),
(32, 'active_plugins', 'a:4:{i:0;s:32:"baw-login-logout-menu/bawllm.php";i:1;s:29:"custom-login/custom-login.php";i:2;s:43:"flexi-quote-rotator/flexi-quote-rotator.php";i:3;s:25:"learnpress/learnpress.php";}', 'yes'),
(33, 'category_base', '', 'yes'),
(34, 'ping_sites', 'http://rpc.pingomatic.com/', 'yes'),
(35, 'comment_max_links', '2', 'yes'),
(36, 'gmt_offset', '0', 'yes'),
(37, 'default_email_category', '1', 'yes'),
(38, 'recently_edited', 'a:5:{i:0;s:88:"C:\\xampp\\htdocs\\invatacel/wp-content/plugins/flexi-quote-rotator/flexi-quote-rotator.php";i:1;s:89:"C:\\xampp\\htdocs\\invatacel/wp-content/plugins/slideshow-jquery-image-gallery/slideshow.php";i:2;s:70:"C:\\xampp\\htdocs\\invatacel/wp-content/plugins/learnpress/learnpress.php";i:3;s:78:"C:\\xampp\\htdocs\\invatacel/wp-content/plugins/wp-force-login/wp-force-login.php";i:4;s:0:"";}', 'no'),
(39, 'template', 'academica', 'yes'),
(40, 'stylesheet', 'academica-child', 'yes'),
(41, 'comment_whitelist', '1', 'yes'),
(42, 'blacklist_keys', '', 'no'),
(43, 'comment_registration', '0', 'yes'),
(44, 'html_type', 'text/html', 'yes'),
(45, 'use_trackback', '0', 'yes'),
(46, 'default_role', 'subscriber', 'yes'),
(47, 'db_version', '36686', 'yes'),
(48, 'uploads_use_yearmonth_folders', '1', 'yes'),
(49, 'upload_path', '', 'yes'),
(50, 'blog_public', '1', 'yes'),
(51, 'default_link_category', '2', 'yes'),
(52, 'show_on_front', 'page', 'yes'),
(53, 'tag_base', '', 'yes'),
(54, 'show_avatars', '1', 'yes'),
(55, 'avatar_rating', 'G', 'yes'),
(56, 'upload_url_path', '', 'yes'),
(57, 'thumbnail_size_w', '150', 'yes'),
(58, 'thumbnail_size_h', '150', 'yes'),
(59, 'thumbnail_crop', '1', 'yes'),
(60, 'medium_size_w', '300', 'yes'),
(61, 'medium_size_h', '300', 'yes'),
(62, 'avatar_default', 'mystery', 'yes'),
(63, 'large_size_w', '1024', 'yes'),
(64, 'large_size_h', '1024', 'yes'),
(65, 'image_default_link_type', 'none', 'yes'),
(66, 'image_default_size', '', 'yes'),
(67, 'image_default_align', '', 'yes'),
(68, 'close_comments_for_old_posts', '0', 'yes'),
(69, 'close_comments_days_old', '14', 'yes'),
(70, 'thread_comments', '1', 'yes'),
(71, 'thread_comments_depth', '5', 'yes'),
(72, 'page_comments', '0', 'yes'),
(73, 'comments_per_page', '50', 'yes'),
(74, 'default_comments_page', 'newest', 'yes'),
(75, 'comment_order', 'asc', 'yes'),
(76, 'sticky_posts', 'a:0:{}', 'yes'),
(77, 'widget_categories', 'a:1:{s:12:"_multiwidget";i:1;}', 'yes'),
(78, 'widget_text', 'a:2:{i:1;a:0:{}s:12:"_multiwidget";i:1;}', 'yes'),
(79, 'widget_rss', 'a:2:{i:1;a:0:{}s:12:"_multiwidget";i:1;}', 'yes'),
(80, 'uninstall_plugins', 'a:0:{}', 'no'),
(81, 'timezone_string', '', 'yes'),
(82, 'page_for_posts', '2', 'yes'),
(83, 'page_on_front', '55', 'yes'),
(84, 'default_post_format', '0', 'yes'),
(85, 'link_manager_enabled', '0', 'yes'),
(86, 'finished_splitting_shared_terms', '1', 'yes'),
(87, 'site_icon', '0', 'yes'),
(88, 'medium_large_size_w', '768', 'yes'),
(89, 'medium_large_size_h', '0', 'yes'),
(90, 'initial_db_version', '35700', 'yes'),
(91, 'wp_user_roles', 'a:6:{s:13:"administrator";a:2:{s:4:"name";s:13:"Administrator";s:12:"capabilities";a:91:{s:13:"switch_themes";b:1;s:11:"edit_themes";b:1;s:16:"activate_plugins";b:1;s:12:"edit_plugins";b:1;s:10:"edit_users";b:1;s:10:"edit_files";b:1;s:14:"manage_options";b:1;s:17:"moderate_comments";b:1;s:17:"manage_categories";b:1;s:12:"manage_links";b:1;s:12:"upload_files";b:1;s:6:"import";b:1;s:15:"unfiltered_html";b:1;s:10:"edit_posts";b:1;s:17:"edit_others_posts";b:1;s:20:"edit_published_posts";b:1;s:13:"publish_posts";b:1;s:10:"edit_pages";b:1;s:4:"read";b:1;s:8:"level_10";b:1;s:7:"level_9";b:1;s:7:"level_8";b:1;s:7:"level_7";b:1;s:7:"level_6";b:1;s:7:"level_5";b:1;s:7:"level_4";b:1;s:7:"level_3";b:1;s:7:"level_2";b:1;s:7:"level_1";b:1;s:7:"level_0";b:1;s:17:"edit_others_pages";b:1;s:20:"edit_published_pages";b:1;s:13:"publish_pages";b:1;s:12:"delete_pages";b:1;s:19:"delete_others_pages";b:1;s:22:"delete_published_pages";b:1;s:12:"delete_posts";b:1;s:19:"delete_others_posts";b:1;s:22:"delete_published_posts";b:1;s:20:"delete_private_posts";b:1;s:18:"edit_private_posts";b:1;s:18:"read_private_posts";b:1;s:20:"delete_private_pages";b:1;s:18:"edit_private_pages";b:1;s:18:"read_private_pages";b:1;s:12:"delete_users";b:1;s:12:"create_users";b:1;s:17:"unfiltered_upload";b:1;s:14:"edit_dashboard";b:1;s:14:"update_plugins";b:1;s:14:"delete_plugins";b:1;s:15:"install_plugins";b:1;s:13:"update_themes";b:1;s:14:"install_themes";b:1;s:11:"update_core";b:1;s:10:"list_users";b:1;s:12:"remove_users";b:1;s:13:"promote_users";b:1;s:18:"edit_theme_options";b:1;s:13:"delete_themes";b:1;s:6:"export";b:1;s:17:"delete_lp_courses";b:1;s:27:"delete_published_lp_courses";b:1;s:15:"edit_lp_courses";b:1;s:25:"edit_published_lp_courses";b:1;s:18:"publish_lp_courses";b:1;s:25:"delete_private_lp_courses";b:1;s:23:"edit_private_lp_courses";b:1;s:24:"delete_others_lp_courses";b:1;s:22:"edit_others_lp_courses";b:1;s:17:"delete_lp_lessons";b:1;s:27:"delete_published_lp_lessons";b:1;s:15:"edit_lp_lessons";b:1;s:25:"edit_published_lp_lessons";b:1;s:18:"publish_lp_lessons";b:1;s:25:"delete_private_lp_lessons";b:1;s:23:"edit_private_lp_lessons";b:1;s:24:"delete_others_lp_lessons";b:1;s:22:"edit_others_lp_lessons";b:1;s:16:"delete_lp_orders";b:1;s:26:"delete_published_lp_orders";b:1;s:14:"edit_lp_orders";b:1;s:24:"edit_published_lp_orders";b:1;s:17:"publish_lp_orders";b:1;s:24:"delete_private_lp_orders";b:1;s:22:"edit_private_lp_orders";b:1;s:23:"delete_others_lp_orders";b:1;s:21:"edit_others_lp_orders";b:1;s:45:"slideshow-jquery-image-gallery-add-slideshows";b:1;s:46:"slideshow-jquery-image-gallery-edit-slideshows";b:1;s:48:"slideshow-jquery-image-gallery-delete-slideshows";b:1;}}s:6:"editor";a:2:{s:4:"name";s:6:"Editor";s:12:"capabilities";a:37:{s:17:"moderate_comments";b:1;s:17:"manage_categories";b:1;s:12:"manage_links";b:1;s:12:"upload_files";b:1;s:15:"unfiltered_html";b:1;s:10:"edit_posts";b:1;s:17:"edit_others_posts";b:1;s:20:"edit_published_posts";b:1;s:13:"publish_posts";b:1;s:10:"edit_pages";b:1;s:4:"read";b:1;s:7:"level_7";b:1;s:7:"level_6";b:1;s:7:"level_5";b:1;s:7:"level_4";b:1;s:7:"level_3";b:1;s:7:"level_2";b:1;s:7:"level_1";b:1;s:7:"level_0";b:1;s:17:"edit_others_pages";b:1;s:20:"edit_published_pages";b:1;s:13:"publish_pages";b:1;s:12:"delete_pages";b:1;s:19:"delete_others_pages";b:1;s:22:"delete_published_pages";b:1;s:12:"delete_posts";b:1;s:19:"delete_others_posts";b:1;s:22:"delete_published_posts";b:1;s:20:"delete_private_posts";b:1;s:18:"edit_private_posts";b:1;s:18:"read_private_posts";b:1;s:20:"delete_private_pages";b:1;s:18:"edit_private_pages";b:1;s:18:"read_private_pages";b:1;s:45:"slideshow-jquery-image-gallery-add-slideshows";b:1;s:46:"slideshow-jquery-image-gallery-edit-slideshows";b:1;s:48:"slideshow-jquery-image-gallery-delete-slideshows";b:1;}}s:6:"author";a:2:{s:4:"name";s:6:"Author";s:12:"capabilities";a:13:{s:12:"upload_files";b:1;s:10:"edit_posts";b:1;s:20:"edit_published_posts";b:1;s:13:"publish_posts";b:1;s:4:"read";b:1;s:7:"level_2";b:1;s:7:"level_1";b:1;s:7:"level_0";b:1;s:12:"delete_posts";b:1;s:22:"delete_published_posts";b:1;s:45:"slideshow-jquery-image-gallery-add-slideshows";b:1;s:46:"slideshow-jquery-image-gallery-edit-slideshows";b:1;s:48:"slideshow-jquery-image-gallery-delete-slideshows";b:1;}}s:11:"contributor";a:2:{s:4:"name";s:11:"Contributor";s:12:"capabilities";a:5:{s:10:"edit_posts";b:1;s:4:"read";b:1;s:7:"level_1";b:1;s:7:"level_0";b:1;s:12:"delete_posts";b:1;}}s:10:"subscriber";a:2:{s:4:"name";s:10:"Subscriber";s:12:"capabilities";a:2:{s:4:"read";b:1;s:7:"level_0";b:1;}}s:10:"lp_teacher";a:2:{s:4:"name";s:10:"Instructor";s:12:"capabilities";a:12:{s:27:"delete_published_lp_courses";b:1;s:25:"edit_published_lp_courses";b:1;s:15:"edit_lp_courses";b:1;s:17:"delete_lp_courses";b:1;s:27:"delete_published_lp_lessons";b:1;s:25:"edit_published_lp_lessons";b:1;s:15:"edit_lp_lessons";b:1;s:17:"delete_lp_lessons";b:1;s:18:"publish_lp_lessons";b:1;s:12:"upload_files";b:1;s:4:"read";b:1;s:10:"edit_posts";b:1;}}}', 'yes'),
(92, 'widget_search', 'a:1:{s:12:"_multiwidget";i:1;}', 'yes'),
(93, 'widget_recent-posts', 'a:1:{s:12:"_multiwidget";i:1;}', 'yes'),
(94, 'widget_recent-comments', 'a:1:{s:12:"_multiwidget";i:1;}', 'yes'),
(95, 'widget_archives', 'a:1:{s:12:"_multiwidget";i:1;}', 'yes'),
(96, 'widget_meta', 'a:1:{s:12:"_multiwidget";i:1;}', 'yes'),
(97, 'sidebars_widgets', 'a:5:{s:19:"wp_inactive_widgets";a:0:{}s:9:"sidebar-1";a:0:{}s:9:"sidebar-2";a:0:{}s:9:"sidebar-3";a:1:{i:0;s:34:"academica-featured-posts-gallery-2";}s:13:"array_version";i:3;}', 'yes'),
(99, 'widget_pages', 'a:1:{s:12:"_multiwidget";i:1;}', 'yes'),
(100, 'widget_calendar', 'a:1:{s:12:"_multiwidget";i:1;}', 'yes'),
(101, 'widget_tag_cloud', 'a:1:{s:12:"_multiwidget";i:1;}', 'yes'),
(102, 'widget_nav_menu', 'a:1:{s:12:"_multiwidget";i:1;}', 'yes'),
(103, 'cron', 'a:6:{i:1464024534;a:1:{s:35:"custom_login_daily_scheduled_events";a:1:{s:32:"40cd750bba9870f18aada2478b24840a";a:3:{s:8:"schedule";s:5:"daily";s:4:"args";a:0:{}s:8:"interval";i:86400;}}}i:1464028162;a:1:{s:30:"wp_scheduled_auto_draft_delete";a:1:{s:32:"40cd750bba9870f18aada2478b24840a";a:3:{s:8:"schedule";s:5:"daily";s:4:"args";a:0:{}s:8:"interval";i:86400;}}}i:1464046292;a:3:{s:16:"wp_version_check";a:1:{s:32:"40cd750bba9870f18aada2478b24840a";a:3:{s:8:"schedule";s:10:"twicedaily";s:4:"args";a:0:{}s:8:"interval";i:43200;}}s:17:"wp_update_plugins";a:1:{s:32:"40cd750bba9870f18aada2478b24840a";a:3:{s:8:"schedule";s:10:"twicedaily";s:4:"args";a:0:{}s:8:"interval";i:43200;}}s:16:"wp_update_themes";a:1:{s:32:"40cd750bba9870f18aada2478b24840a";a:3:{s:8:"schedule";s:10:"twicedaily";s:4:"args";a:0:{}s:8:"interval";i:43200;}}}i:1464089516;a:1:{s:19:"wp_scheduled_delete";a:1:{s:32:"40cd750bba9870f18aada2478b24840a";a:3:{s:8:"schedule";s:5:"daily";s:4:"args";a:0:{}s:8:"interval";i:86400;}}}i:1464542934;a:1:{s:36:"custom_login_weekly_scheduled_events";a:1:{s:32:"40cd750bba9870f18aada2478b24840a";a:3:{s:8:"schedule";s:6:"weekly";s:4:"args";a:0:{}s:8:"interval";i:604800;}}}s:7:"version";i:2;}', 'yes'),
(137, 'recently_activated', 'a:3:{s:23:"ml-slider/ml-slider.php";i:1464023553;s:27:"text-slider/text-slider.php";i:1463951599;s:44:"slideshow-jquery-image-gallery/slideshow.php";i:1463951056;}', 'yes'),
(150, 'theme_mods_twentysixteen', 'a:2:{s:18:"nav_menu_locations";a:2:{s:7:"primary";i:2;s:6:"social";i:0;}s:16:"sidebars_widgets";a:2:{s:4:"time";i:1460468164;s:4:"data";a:2:{s:19:"wp_inactive_widgets";a:0:{}s:9:"sidebar-1";a:6:{i:0;s:8:"search-2";i:1;s:14:"recent-posts-2";i:2;s:17:"recent-comments-2";i:3;s:10:"archives-2";i:4;s:12:"categories-2";i:5;s:6:"meta-2";}}}}', 'yes'),
(164, 'WPLANG', '', 'yes'),
(187, 'custom_login_tracking_last_send', '1460309321', 'yes'),
(195, 'custom_login_design', 'a:51:{s:21:"html_background_color";s:7:"#7f7f7f";s:30:"html_background_color_checkbox";s:2:"on";s:29:"html_background_color_opacity";s:3:"0.9";s:19:"html_background_url";s:62:"http://localhost/invatacel/wp-content/uploads/2016/04/lean.jpg";s:24:"html_background_position";s:8:"left top";s:22:"html_background_repeat";s:9:"no-repeat";s:20:"html_background_size";s:5:"cover";s:12:"hide_wp_logo";s:2:"on";s:19:"logo_background_url";s:0:"";s:26:"logo_background_size_width";s:0:"";s:27:"logo_background_size_height";s:0:"";s:24:"logo_background_position";s:8:"left top";s:22:"logo_background_repeat";s:9:"no-repeat";s:20:"logo_background_size";s:4:"none";s:25:"logo_force_form_max_width";s:3:"off";s:16:"login_form_width";s:3:"320";s:27:"login_form_background_color";s:7:"#ffffff";s:36:"login_form_background_color_checkbox";s:2:"on";s:35:"login_form_background_color_opacity";s:3:"0.5";s:25:"login_form_background_url";s:0:"";s:30:"login_form_background_position";s:8:"left top";s:28:"login_form_background_repeat";s:9:"no-repeat";s:26:"login_form_background_size";s:4:"none";s:24:"login_form_border_radius";s:0:"";s:22:"login_form_border_size";s:0:"";s:23:"login_form_border_color";s:0:"";s:32:"login_form_border_color_checkbox";s:3:"off";s:31:"login_form_border_color_opacity";s:1:"1";s:21:"login_form_box_shadow";s:11:"2px 2px 5px";s:27:"login_form_box_shadow_color";s:0:"";s:36:"login_form_box_shadow_color_checkbox";s:3:"off";s:35:"login_form_box_shadow_color_opacity";s:1:"1";s:11:"label_color";s:0:"";s:20:"label_color_checkbox";s:3:"off";s:19:"label_color_opacity";s:1:"1";s:9:"nav_color";s:0:"";s:18:"nav_color_checkbox";s:3:"off";s:17:"nav_color_opacity";s:1:"1";s:21:"nav_text_shadow_color";s:0:"";s:30:"nav_text_shadow_color_checkbox";s:3:"off";s:29:"nav_text_shadow_color_opacity";s:1:"1";s:15:"nav_hover_color";s:0:"";s:24:"nav_hover_color_checkbox";s:3:"off";s:23:"nav_hover_color_opacity";s:1:"1";s:27:"nav_text_shadow_hover_color";s:0:"";s:36:"nav_text_shadow_hover_color_checkbox";s:3:"off";s:35:"nav_text_shadow_hover_color_opacity";s:1:"1";s:10:"custom_css";s:0:"";s:11:"animate.css";s:3:"off";s:11:"custom_html";s:0:"";s:13:"custom_jquery";s:0:"";}', 'yes'),
(202, 'mwpl_upgrade_224', '1', 'yes'),
(203, 'mwpl_custom_bgimage_list', 'a:0:{}', 'yes'),
(204, 'mwpl_upgrade_225', '1', 'yes'),
(205, 'mwpl_admin_notice_00000001', '1', 'yes'),
(206, 'mwpl_password_protected', '', 'yes'),
(207, 'mwpl_font-size', '24', 'yes'),
(208, 'mwpl_google_analytics', 'a:4:{s:12:"enable_login";N;s:12:"enable_admin";N;s:12:"enable_pages";N;s:13:"google_script";s:0:"";}', 'yes'),
(209, 'mwpl_custom_bgcolor', '#4492bf', 'yes'),
(210, 'mwpl_custom_textcolor', '#88a85e', 'yes'),
(211, 'mwpl_custom_linkcolor_normal', '#1d84b7', 'yes'),
(212, 'mwpl_custom_linkcolor_hover', '#8224e3', 'yes'),
(213, 'mwpl_enable_custom_login', '', 'yes'),
(214, 'mwpl_enable_form_bg', '1', 'yes'),
(215, 'mwpl_custom_bgimage', '', 'yes'),
(216, 'mwpl_form_position_top', '', 'yes'),
(217, 'mwpl_form_width', '18', 'yes'),
(218, 'mwpl_hide_top_bar', '', 'yes'),
(219, 'mwpl_remove_text_shadow', '', 'yes'),
(220, 'mwpl_form_bg_color', '#ffffff', 'yes'),
(221, 'mwpl_form_border_color', '#dd3333', 'yes'),
(222, 'mwpl_form_border_radius', '5', 'yes'),
(223, 'mwpl_form_box_shadow_right', '', 'yes'),
(224, 'mwpl_form_box_shadow_top', '', 'yes'),
(225, 'mwpl_form_box_shadow_softness', '', 'yes'),
(226, 'mwpl_form_box_shadow_color', '', 'yes'),
(227, 'mwpl_logo_link', '', 'yes'),
(228, 'mwpl_logo_title', 'Invatacel', 'yes'),
(229, 'mwpl_custom_message', '', 'yes'),
(230, 'mwpl_custom_message_alert', '', 'yes'),
(231, 'mwpl_bgimage_left', '50%', 'yes'),
(232, 'mwpl_bgimage_top', '30%', 'yes'),
(233, 'mwpl_font_size', '3', 'yes'),
(236, 'mwpl_redirect_login', 'dashboard', 'yes'),
(237, 'mwpl_custom_redirect_page', '', 'yes'),
(238, 'mwpl_hide_lost_password', '', 'yes'),
(239, 'mwpl_hide_login_messages', '', 'yes'),
(240, 'mwpl_disable_ie_compatibility_mode', '', 'yes'),
(241, 'custom_login_general', 'a:8:{s:6:"active";s:2:"on";s:10:"capability";s:14:"manage_options";s:8:"tracking";s:3:"off";s:13:"admin_notices";s:3:"off";s:16:"dashboard_widget";s:3:"off";s:11:"wp_shake_js";s:3:"off";s:16:"remove_login_css";s:3:"off";s:17:"lostpassword_text";s:3:"off";}', 'yes'),
(264, '_transient_timeout_custom_login_a1b01e734b573fca08eb1a65e6df9a38', '1476079209', 'no'),
(265, '_transient_custom_login_a1b01e734b573fca08eb1a65e6df9a38', '\n/**\n * Custom Login by Austin Passy\n *\n * Plugin URI  : https://frosty.media/plugins/custom-login/\n * Version     : 3.2.4\n * Author URI  : http://austin.passy.co/\n * Extensions  : https://frosty.media/plugin/tag/custom-login-extension/\n */\n\nhtml {\n	background-color: rgba(127,127,127,0.9);\n	background-image: url(''http://localhost/invatacel/wp-content/uploads/2016/04/lean.jpg'');\n	background-position: left top;\n	background-repeat: no-repeat;\n	\n	-webkit-background-size: cover;\n	-moz-background-size: cover;\n	-ms-background-size: cover;\n	-o-background-size: cover;\n	background-size: cover;\n	}\nbody.login {\n	background: transparent;\n	}\n#login {\n	width: 320px;\n	}\n#login form {\n	background-color: rgba(255,255,255,0.5);\n	\n	-webkit-box-shadow: 2px 2px 5px #121212;\n	-moz-box-shadow: 2px 2px 5px #121212;\n	-ms-box-shadow: 2px 2px 5px #121212;\n	-o-box-shadow: 2px 2px 5px #121212;\n	box-shadow: 2px 2px 5px #121212;\n	}\n#login h1 {\n	display: none;\n	}\n', 'no'),
(271, 'category_children', 'a:0:{}', 'yes'),
(277, 'nav_menu_options', 'a:2:{i:0;b:0;s:8:"auto_add";a:0:{}}', 'yes'),
(286, 'learn_press_instructor_registration', 'no', 'yes'),
(287, 'learn_press_auto_update_post_name', 'no', 'yes'),
(288, 'learn_press_currency', 'USD', 'yes'),
(289, 'learn_press_currency_pos', 'left', 'yes'),
(290, 'learn_press_thousands_separator', ',', 'yes'),
(291, 'learn_press_decimals_separator', '.', 'yes'),
(292, 'learn_press_number_of_decimals', '2', 'yes'),
(293, 'learn_press_debug', 'yes', 'yes'),
(294, 'learn_press_courses_page_id', '19', 'yes'),
(295, 'learn_press_course_category_base', 'course-category', 'yes'),
(296, 'learn_press_course_tag_base', 'course-tag', 'yes'),
(297, 'learn_press_required_review', 'yes', 'yes'),
(298, 'learn_press_enable_edit_published', 'yes', 'yes'),
(299, 'learn_press_archive_course_limit', '10', 'yes'),
(300, 'learn_press_single_course_image_size', 'a:3:{i:0;i:800;i:1;i:450;i:2;s:3:"yes";}', 'yes'),
(301, 'learn_press_course_thumbnail_image_size', 'a:3:{i:0;i:400;i:1;i:250;i:2;s:3:"yes";}', 'yes'),
(302, 'learn_press_enable_cart', 'yes', 'yes'),
(303, 'learn_press_redirect_after_add', 'yes', 'yes'),
(304, 'learn_press_ajax_add_to_cart', 'no', 'yes'),
(305, 'learn_press_no_checkout_free_course', 'yes', 'yes'),
(306, 'learn_press_cart_page_id', '17', 'yes'),
(307, 'learn_press_checkout_page_id', '16', 'yes'),
(308, 'learn_press_checkout_endpoints[lp_order_received]', 'lp-order-received', 'yes'),
(309, 'learn_press_profile_page_id', '18', 'yes'),
(310, 'learn_press_course_base_type', 'custom', 'yes'),
(311, 'learn_press_paypal_email', 'ionatanfrim@gmail.com', 'yes'),
(312, 'learn_press_paypal_enable', 'yes', 'yes'),
(316, 'learn_press_become_a_teacher_page_id', '20', 'yes'),
(320, 'course_category_children', 'a:0:{}', 'yes'),
(336, 'widget_academica-featured-posts-gallery', 'a:2:{i:2;a:3:{s:5:"title";s:8:"Featured";s:8:"category";i:0;s:6:"amount";i:4;}s:12:"_multiwidget";i:1;}', 'yes'),
(339, 'current_theme', 'Academica child', 'yes'),
(340, 'theme_mods_academica', 'a:3:{i:0;b:0;s:18:"nav_menu_locations";a:2:{s:7:"primary";i:2;s:6:"social";i:0;}s:16:"sidebars_widgets";a:2:{s:4:"time";i:1463945201;s:4:"data";a:4:{s:19:"wp_inactive_widgets";a:0:{}s:9:"sidebar-1";a:0:{}s:9:"sidebar-2";a:0:{}s:9:"sidebar-3";a:0:{}}}}', 'yes'),
(341, 'theme_switched', '', 'yes'),
(342, 'theme_switched_via_customizer', '', 'yes'),
(344, 'rewrite_rules', 'a:182:{s:11:"^wp-json/?$";s:22:"index.php?rest_route=/";s:14:"^wp-json/(.*)?";s:33:"index.php?rest_route=/$matches[1]";s:13:"lp-courses/?$";s:29:"index.php?post_type=lp_course";s:43:"lp-courses/feed/(feed|rdf|rss|rss2|atom)/?$";s:46:"index.php?post_type=lp_course&feed=$matches[1]";s:38:"lp-courses/(feed|rdf|rss|rss2|atom)/?$";s:46:"index.php?post_type=lp_course&feed=$matches[1]";s:30:"lp-courses/page/([0-9]{1,})/?$";s:47:"index.php?post_type=lp_course&paged=$matches[1]";s:28:"^courses/([^/]*)/?([^/]*)?/?";s:50:"index.php?lp_course=$matches[1]&lesson=$matches[2]";s:26:"^quizzes/([^/]*)/([^/]*)/?";s:50:"index.php?lp_quiz=$matches[1]&question=$matches[2]";s:40:"^lp-profile/([^/]*)/?([^/]*)/?([^/]*)?/?";s:69:"index.php?page_id=18&user=$matches[1]&view=$matches[2]&id=$matches[3]";s:47:"category/(.+?)/feed/(feed|rdf|rss|rss2|atom)/?$";s:52:"index.php?category_name=$matches[1]&feed=$matches[2]";s:42:"category/(.+?)/(feed|rdf|rss|rss2|atom)/?$";s:52:"index.php?category_name=$matches[1]&feed=$matches[2]";s:23:"category/(.+?)/embed/?$";s:46:"index.php?category_name=$matches[1]&embed=true";s:35:"category/(.+?)/page/?([0-9]{1,})/?$";s:53:"index.php?category_name=$matches[1]&paged=$matches[2]";s:17:"category/(.+?)/?$";s:35:"index.php?category_name=$matches[1]";s:44:"tag/([^/]+)/feed/(feed|rdf|rss|rss2|atom)/?$";s:42:"index.php?tag=$matches[1]&feed=$matches[2]";s:39:"tag/([^/]+)/(feed|rdf|rss|rss2|atom)/?$";s:42:"index.php?tag=$matches[1]&feed=$matches[2]";s:20:"tag/([^/]+)/embed/?$";s:36:"index.php?tag=$matches[1]&embed=true";s:32:"tag/([^/]+)/page/?([0-9]{1,})/?$";s:43:"index.php?tag=$matches[1]&paged=$matches[2]";s:14:"tag/([^/]+)/?$";s:25:"index.php?tag=$matches[1]";s:45:"type/([^/]+)/feed/(feed|rdf|rss|rss2|atom)/?$";s:50:"index.php?post_format=$matches[1]&feed=$matches[2]";s:40:"type/([^/]+)/(feed|rdf|rss|rss2|atom)/?$";s:50:"index.php?post_format=$matches[1]&feed=$matches[2]";s:21:"type/([^/]+)/embed/?$";s:44:"index.php?post_format=$matches[1]&embed=true";s:33:"type/([^/]+)/page/?([0-9]{1,})/?$";s:51:"index.php?post_format=$matches[1]&paged=$matches[2]";s:15:"type/([^/]+)/?$";s:33:"index.php?post_format=$matches[1]";s:33:"courses/.+?/attachment/([^/]+)/?$";s:32:"index.php?attachment=$matches[1]";s:43:"courses/.+?/attachment/([^/]+)/trackback/?$";s:37:"index.php?attachment=$matches[1]&tb=1";s:63:"courses/.+?/attachment/([^/]+)/feed/(feed|rdf|rss|rss2|atom)/?$";s:49:"index.php?attachment=$matches[1]&feed=$matches[2]";s:58:"courses/.+?/attachment/([^/]+)/(feed|rdf|rss|rss2|atom)/?$";s:49:"index.php?attachment=$matches[1]&feed=$matches[2]";s:58:"courses/.+?/attachment/([^/]+)/comment-page-([0-9]{1,})/?$";s:50:"index.php?attachment=$matches[1]&cpage=$matches[2]";s:39:"courses/.+?/attachment/([^/]+)/embed/?$";s:43:"index.php?attachment=$matches[1]&embed=true";s:22:"courses/(.+?)/embed/?$";s:42:"index.php?lp_course=$matches[1]&embed=true";s:26:"courses/(.+?)/trackback/?$";s:36:"index.php?lp_course=$matches[1]&tb=1";s:46:"courses/(.+?)/feed/(feed|rdf|rss|rss2|atom)/?$";s:48:"index.php?lp_course=$matches[1]&feed=$matches[2]";s:41:"courses/(.+?)/(feed|rdf|rss|rss2|atom)/?$";s:48:"index.php?lp_course=$matches[1]&feed=$matches[2]";s:34:"courses/(.+?)/page/?([0-9]{1,})/?$";s:49:"index.php?lp_course=$matches[1]&paged=$matches[2]";s:41:"courses/(.+?)/comment-page-([0-9]{1,})/?$";s:49:"index.php?lp_course=$matches[1]&cpage=$matches[2]";s:30:"courses/(.+?)(?:/([0-9]+))?/?$";s:48:"index.php?lp_course=$matches[1]&page=$matches[2]";s:54:"course-category/(.+?)/feed/(feed|rdf|rss|rss2|atom)/?$";s:54:"index.php?course_category=$matches[1]&feed=$matches[2]";s:49:"course-category/(.+?)/(feed|rdf|rss|rss2|atom)/?$";s:54:"index.php?course_category=$matches[1]&feed=$matches[2]";s:30:"course-category/(.+?)/embed/?$";s:48:"index.php?course_category=$matches[1]&embed=true";s:42:"course-category/(.+?)/page/?([0-9]{1,})/?$";s:55:"index.php?course_category=$matches[1]&paged=$matches[2]";s:24:"course-category/(.+?)/?$";s:37:"index.php?course_category=$matches[1]";s:51:"course-tag/([^/]+)/feed/(feed|rdf|rss|rss2|atom)/?$";s:49:"index.php?course_tag=$matches[1]&feed=$matches[2]";s:46:"course-tag/([^/]+)/(feed|rdf|rss|rss2|atom)/?$";s:49:"index.php?course_tag=$matches[1]&feed=$matches[2]";s:27:"course-tag/([^/]+)/embed/?$";s:43:"index.php?course_tag=$matches[1]&embed=true";s:39:"course-tag/([^/]+)/page/?([0-9]{1,})/?$";s:50:"index.php?course_tag=$matches[1]&paged=$matches[2]";s:21:"course-tag/([^/]+)/?$";s:32:"index.php?course_tag=$matches[1]";s:33:"quizzes/.+?/attachment/([^/]+)/?$";s:32:"index.php?attachment=$matches[1]";s:43:"quizzes/.+?/attachment/([^/]+)/trackback/?$";s:37:"index.php?attachment=$matches[1]&tb=1";s:63:"quizzes/.+?/attachment/([^/]+)/feed/(feed|rdf|rss|rss2|atom)/?$";s:49:"index.php?attachment=$matches[1]&feed=$matches[2]";s:58:"quizzes/.+?/attachment/([^/]+)/(feed|rdf|rss|rss2|atom)/?$";s:49:"index.php?attachment=$matches[1]&feed=$matches[2]";s:58:"quizzes/.+?/attachment/([^/]+)/comment-page-([0-9]{1,})/?$";s:50:"index.php?attachment=$matches[1]&cpage=$matches[2]";s:39:"quizzes/.+?/attachment/([^/]+)/embed/?$";s:43:"index.php?attachment=$matches[1]&embed=true";s:22:"quizzes/(.+?)/embed/?$";s:40:"index.php?lp_quiz=$matches[1]&embed=true";s:26:"quizzes/(.+?)/trackback/?$";s:34:"index.php?lp_quiz=$matches[1]&tb=1";s:34:"quizzes/(.+?)/page/?([0-9]{1,})/?$";s:47:"index.php?lp_quiz=$matches[1]&paged=$matches[2]";s:41:"quizzes/(.+?)/comment-page-([0-9]{1,})/?$";s:47:"index.php?lp_quiz=$matches[1]&cpage=$matches[2]";s:30:"quizzes/(.+?)(?:/([0-9]+))?/?$";s:46:"index.php?lp_quiz=$matches[1]&page=$matches[2]";s:35:"questions/.+?/attachment/([^/]+)/?$";s:32:"index.php?attachment=$matches[1]";s:45:"questions/.+?/attachment/([^/]+)/trackback/?$";s:37:"index.php?attachment=$matches[1]&tb=1";s:65:"questions/.+?/attachment/([^/]+)/feed/(feed|rdf|rss|rss2|atom)/?$";s:49:"index.php?attachment=$matches[1]&feed=$matches[2]";s:60:"questions/.+?/attachment/([^/]+)/(feed|rdf|rss|rss2|atom)/?$";s:49:"index.php?attachment=$matches[1]&feed=$matches[2]";s:60:"questions/.+?/attachment/([^/]+)/comment-page-([0-9]{1,})/?$";s:50:"index.php?attachment=$matches[1]&cpage=$matches[2]";s:41:"questions/.+?/attachment/([^/]+)/embed/?$";s:43:"index.php?attachment=$matches[1]&embed=true";s:24:"questions/(.+?)/embed/?$";s:44:"index.php?lp_question=$matches[1]&embed=true";s:28:"questions/(.+?)/trackback/?$";s:38:"index.php?lp_question=$matches[1]&tb=1";s:36:"questions/(.+?)/page/?([0-9]{1,})/?$";s:51:"index.php?lp_question=$matches[1]&paged=$matches[2]";s:43:"questions/(.+?)/comment-page-([0-9]{1,})/?$";s:51:"index.php?lp_question=$matches[1]&cpage=$matches[2]";s:32:"questions/(.+?)(?:/([0-9]+))?/?$";s:50:"index.php?lp_question=$matches[1]&page=$matches[2]";s:53:"question-tag/([^/]+)/feed/(feed|rdf|rss|rss2|atom)/?$";s:51:"index.php?question_tag=$matches[1]&feed=$matches[2]";s:48:"question-tag/([^/]+)/(feed|rdf|rss|rss2|atom)/?$";s:51:"index.php?question_tag=$matches[1]&feed=$matches[2]";s:29:"question-tag/([^/]+)/embed/?$";s:45:"index.php?question_tag=$matches[1]&embed=true";s:41:"question-tag/([^/]+)/page/?([0-9]{1,})/?$";s:52:"index.php?question_tag=$matches[1]&paged=$matches[2]";s:23:"question-tag/([^/]+)/?$";s:34:"index.php?question_tag=$matches[1]";s:33:"lessons/.+?/attachment/([^/]+)/?$";s:32:"index.php?attachment=$matches[1]";s:43:"lessons/.+?/attachment/([^/]+)/trackback/?$";s:37:"index.php?attachment=$matches[1]&tb=1";s:63:"lessons/.+?/attachment/([^/]+)/feed/(feed|rdf|rss|rss2|atom)/?$";s:49:"index.php?attachment=$matches[1]&feed=$matches[2]";s:58:"lessons/.+?/attachment/([^/]+)/(feed|rdf|rss|rss2|atom)/?$";s:49:"index.php?attachment=$matches[1]&feed=$matches[2]";s:58:"lessons/.+?/attachment/([^/]+)/comment-page-([0-9]{1,})/?$";s:50:"index.php?attachment=$matches[1]&cpage=$matches[2]";s:39:"lessons/.+?/attachment/([^/]+)/embed/?$";s:43:"index.php?attachment=$matches[1]&embed=true";s:22:"lessons/(.+?)/embed/?$";s:42:"index.php?lp_lesson=$matches[1]&embed=true";s:26:"lessons/(.+?)/trackback/?$";s:36:"index.php?lp_lesson=$matches[1]&tb=1";s:34:"lessons/(.+?)/page/?([0-9]{1,})/?$";s:49:"index.php?lp_lesson=$matches[1]&paged=$matches[2]";s:41:"lessons/(.+?)/comment-page-([0-9]{1,})/?$";s:49:"index.php?lp_lesson=$matches[1]&cpage=$matches[2]";s:30:"lessons/(.+?)(?:/([0-9]+))?/?$";s:48:"index.php?lp_lesson=$matches[1]&page=$matches[2]";s:51:"lesson_tag/([^/]+)/feed/(feed|rdf|rss|rss2|atom)/?$";s:49:"index.php?lesson_tag=$matches[1]&feed=$matches[2]";s:46:"lesson_tag/([^/]+)/(feed|rdf|rss|rss2|atom)/?$";s:49:"index.php?lesson_tag=$matches[1]&feed=$matches[2]";s:27:"lesson_tag/([^/]+)/embed/?$";s:43:"index.php?lesson_tag=$matches[1]&embed=true";s:39:"lesson_tag/([^/]+)/page/?([0-9]{1,})/?$";s:50:"index.php?lesson_tag=$matches[1]&paged=$matches[2]";s:21:"lesson_tag/([^/]+)/?$";s:32:"index.php?lesson_tag=$matches[1]";s:34:"lp_order/.+?/attachment/([^/]+)/?$";s:32:"index.php?attachment=$matches[1]";s:44:"lp_order/.+?/attachment/([^/]+)/trackback/?$";s:37:"index.php?attachment=$matches[1]&tb=1";s:64:"lp_order/.+?/attachment/([^/]+)/feed/(feed|rdf|rss|rss2|atom)/?$";s:49:"index.php?attachment=$matches[1]&feed=$matches[2]";s:59:"lp_order/.+?/attachment/([^/]+)/(feed|rdf|rss|rss2|atom)/?$";s:49:"index.php?attachment=$matches[1]&feed=$matches[2]";s:59:"lp_order/.+?/attachment/([^/]+)/comment-page-([0-9]{1,})/?$";s:50:"index.php?attachment=$matches[1]&cpage=$matches[2]";s:40:"lp_order/.+?/attachment/([^/]+)/embed/?$";s:43:"index.php?attachment=$matches[1]&embed=true";s:23:"lp_order/(.+?)/embed/?$";s:41:"index.php?lp_order=$matches[1]&embed=true";s:27:"lp_order/(.+?)/trackback/?$";s:35:"index.php?lp_order=$matches[1]&tb=1";s:35:"lp_order/(.+?)/page/?([0-9]{1,})/?$";s:48:"index.php?lp_order=$matches[1]&paged=$matches[2]";s:42:"lp_order/(.+?)/comment-page-([0-9]{1,})/?$";s:48:"index.php?lp_order=$matches[1]&cpage=$matches[2]";s:31:"lp_order/(.+?)(?:/([0-9]+))?/?$";s:47:"index.php?lp_order=$matches[1]&page=$matches[2]";s:48:".*wp-(atom|rdf|rss|rss2|feed|commentsrss2)\\.php$";s:18:"index.php?feed=old";s:20:".*wp-app\\.php(/.*)?$";s:19:"index.php?error=403";s:18:".*wp-register.php$";s:23:"index.php?register=true";s:32:"feed/(feed|rdf|rss|rss2|atom)/?$";s:27:"index.php?&feed=$matches[1]";s:27:"(feed|rdf|rss|rss2|atom)/?$";s:27:"index.php?&feed=$matches[1]";s:8:"embed/?$";s:21:"index.php?&embed=true";s:20:"page/?([0-9]{1,})/?$";s:28:"index.php?&paged=$matches[1]";s:27:"comment-page-([0-9]{1,})/?$";s:39:"index.php?&page_id=55&cpage=$matches[1]";s:28:"lp-order-received(/(.*))?/?$";s:40:"index.php?&lp-order-received=$matches[2]";s:18:"courses(/(.*))?/?$";s:30:"index.php?&courses=$matches[2]";s:18:"quizzes(/(.*))?/?$";s:30:"index.php?&quizzes=$matches[2]";s:17:"orders(/(.*))?/?$";s:29:"index.php?&orders=$matches[2]";s:24:"order-details(/(.*))?/?$";s:36:"index.php?&order-details=$matches[2]";s:41:"comments/feed/(feed|rdf|rss|rss2|atom)/?$";s:42:"index.php?&feed=$matches[1]&withcomments=1";s:36:"comments/(feed|rdf|rss|rss2|atom)/?$";s:42:"index.php?&feed=$matches[1]&withcomments=1";s:17:"comments/embed/?$";s:21:"index.php?&embed=true";s:44:"search/(.+)/feed/(feed|rdf|rss|rss2|atom)/?$";s:40:"index.php?s=$matches[1]&feed=$matches[2]";s:39:"search/(.+)/(feed|rdf|rss|rss2|atom)/?$";s:40:"index.php?s=$matches[1]&feed=$matches[2]";s:20:"search/(.+)/embed/?$";s:34:"index.php?s=$matches[1]&embed=true";s:32:"search/(.+)/page/?([0-9]{1,})/?$";s:41:"index.php?s=$matches[1]&paged=$matches[2]";s:14:"search/(.+)/?$";s:23:"index.php?s=$matches[1]";s:47:"author/([^/]+)/feed/(feed|rdf|rss|rss2|atom)/?$";s:50:"index.php?author_name=$matches[1]&feed=$matches[2]";s:42:"author/([^/]+)/(feed|rdf|rss|rss2|atom)/?$";s:50:"index.php?author_name=$matches[1]&feed=$matches[2]";s:23:"author/([^/]+)/embed/?$";s:44:"index.php?author_name=$matches[1]&embed=true";s:35:"author/([^/]+)/page/?([0-9]{1,})/?$";s:51:"index.php?author_name=$matches[1]&paged=$matches[2]";s:17:"author/([^/]+)/?$";s:33:"index.php?author_name=$matches[1]";s:69:"([0-9]{4})/([0-9]{1,2})/([0-9]{1,2})/feed/(feed|rdf|rss|rss2|atom)/?$";s:80:"index.php?year=$matches[1]&monthnum=$matches[2]&day=$matches[3]&feed=$matches[4]";s:64:"([0-9]{4})/([0-9]{1,2})/([0-9]{1,2})/(feed|rdf|rss|rss2|atom)/?$";s:80:"index.php?year=$matches[1]&monthnum=$matches[2]&day=$matches[3]&feed=$matches[4]";s:45:"([0-9]{4})/([0-9]{1,2})/([0-9]{1,2})/embed/?$";s:74:"index.php?year=$matches[1]&monthnum=$matches[2]&day=$matches[3]&embed=true";s:57:"([0-9]{4})/([0-9]{1,2})/([0-9]{1,2})/page/?([0-9]{1,})/?$";s:81:"index.php?year=$matches[1]&monthnum=$matches[2]&day=$matches[3]&paged=$matches[4]";s:39:"([0-9]{4})/([0-9]{1,2})/([0-9]{1,2})/?$";s:63:"index.php?year=$matches[1]&monthnum=$matches[2]&day=$matches[3]";s:56:"([0-9]{4})/([0-9]{1,2})/feed/(feed|rdf|rss|rss2|atom)/?$";s:64:"index.php?year=$matches[1]&monthnum=$matches[2]&feed=$matches[3]";s:51:"([0-9]{4})/([0-9]{1,2})/(feed|rdf|rss|rss2|atom)/?$";s:64:"index.php?year=$matches[1]&monthnum=$matches[2]&feed=$matches[3]";s:32:"([0-9]{4})/([0-9]{1,2})/embed/?$";s:58:"index.php?year=$matches[1]&monthnum=$matches[2]&embed=true";s:44:"([0-9]{4})/([0-9]{1,2})/page/?([0-9]{1,})/?$";s:65:"index.php?year=$matches[1]&monthnum=$matches[2]&paged=$matches[3]";s:26:"([0-9]{4})/([0-9]{1,2})/?$";s:47:"index.php?year=$matches[1]&monthnum=$matches[2]";s:43:"([0-9]{4})/feed/(feed|rdf|rss|rss2|atom)/?$";s:43:"index.php?year=$matches[1]&feed=$matches[2]";s:38:"([0-9]{4})/(feed|rdf|rss|rss2|atom)/?$";s:43:"index.php?year=$matches[1]&feed=$matches[2]";s:19:"([0-9]{4})/embed/?$";s:37:"index.php?year=$matches[1]&embed=true";s:31:"([0-9]{4})/page/?([0-9]{1,})/?$";s:44:"index.php?year=$matches[1]&paged=$matches[2]";s:13:"([0-9]{4})/?$";s:26:"index.php?year=$matches[1]";s:58:"[0-9]{4}/[0-9]{1,2}/[0-9]{1,2}/[^/]+/attachment/([^/]+)/?$";s:32:"index.php?attachment=$matches[1]";s:68:"[0-9]{4}/[0-9]{1,2}/[0-9]{1,2}/[^/]+/attachment/([^/]+)/trackback/?$";s:37:"index.php?attachment=$matches[1]&tb=1";s:88:"[0-9]{4}/[0-9]{1,2}/[0-9]{1,2}/[^/]+/attachment/([^/]+)/feed/(feed|rdf|rss|rss2|atom)/?$";s:49:"index.php?attachment=$matches[1]&feed=$matches[2]";s:83:"[0-9]{4}/[0-9]{1,2}/[0-9]{1,2}/[^/]+/attachment/([^/]+)/(feed|rdf|rss|rss2|atom)/?$";s:49:"index.php?attachment=$matches[1]&feed=$matches[2]";s:83:"[0-9]{4}/[0-9]{1,2}/[0-9]{1,2}/[^/]+/attachment/([^/]+)/comment-page-([0-9]{1,})/?$";s:50:"index.php?attachment=$matches[1]&cpage=$matches[2]";s:64:"[0-9]{4}/[0-9]{1,2}/[0-9]{1,2}/[^/]+/attachment/([^/]+)/embed/?$";s:43:"index.php?attachment=$matches[1]&embed=true";s:53:"([0-9]{4})/([0-9]{1,2})/([0-9]{1,2})/([^/]+)/embed/?$";s:91:"index.php?year=$matches[1]&monthnum=$matches[2]&day=$matches[3]&name=$matches[4]&embed=true";s:57:"([0-9]{4})/([0-9]{1,2})/([0-9]{1,2})/([^/]+)/trackback/?$";s:85:"index.php?year=$matches[1]&monthnum=$matches[2]&day=$matches[3]&name=$matches[4]&tb=1";s:77:"([0-9]{4})/([0-9]{1,2})/([0-9]{1,2})/([^/]+)/feed/(feed|rdf|rss|rss2|atom)/?$";s:97:"index.php?year=$matches[1]&monthnum=$matches[2]&day=$matches[3]&name=$matches[4]&feed=$matches[5]";s:72:"([0-9]{4})/([0-9]{1,2})/([0-9]{1,2})/([^/]+)/(feed|rdf|rss|rss2|atom)/?$";s:97:"index.php?year=$matches[1]&monthnum=$matches[2]&day=$matches[3]&name=$matches[4]&feed=$matches[5]";s:65:"([0-9]{4})/([0-9]{1,2})/([0-9]{1,2})/([^/]+)/page/?([0-9]{1,})/?$";s:98:"index.php?year=$matches[1]&monthnum=$matches[2]&day=$matches[3]&name=$matches[4]&paged=$matches[5]";s:72:"([0-9]{4})/([0-9]{1,2})/([0-9]{1,2})/([^/]+)/comment-page-([0-9]{1,})/?$";s:98:"index.php?year=$matches[1]&monthnum=$matches[2]&day=$matches[3]&name=$matches[4]&cpage=$matches[5]";s:61:"([0-9]{4})/([0-9]{1,2})/([0-9]{1,2})/([^/]+)(?:/([0-9]+))?/?$";s:97:"index.php?year=$matches[1]&monthnum=$matches[2]&day=$matches[3]&name=$matches[4]&page=$matches[5]";s:47:"[0-9]{4}/[0-9]{1,2}/[0-9]{1,2}/[^/]+/([^/]+)/?$";s:32:"index.php?attachment=$matches[1]";s:57:"[0-9]{4}/[0-9]{1,2}/[0-9]{1,2}/[^/]+/([^/]+)/trackback/?$";s:37:"index.php?attachment=$matches[1]&tb=1";s:77:"[0-9]{4}/[0-9]{1,2}/[0-9]{1,2}/[^/]+/([^/]+)/feed/(feed|rdf|rss|rss2|atom)/?$";s:49:"index.php?attachment=$matches[1]&feed=$matches[2]";s:72:"[0-9]{4}/[0-9]{1,2}/[0-9]{1,2}/[^/]+/([^/]+)/(feed|rdf|rss|rss2|atom)/?$";s:49:"index.php?attachment=$matches[1]&feed=$matches[2]";s:72:"[0-9]{4}/[0-9]{1,2}/[0-9]{1,2}/[^/]+/([^/]+)/comment-page-([0-9]{1,})/?$";s:50:"index.php?attachment=$matches[1]&cpage=$matches[2]";s:53:"[0-9]{4}/[0-9]{1,2}/[0-9]{1,2}/[^/]+/([^/]+)/embed/?$";s:43:"index.php?attachment=$matches[1]&embed=true";s:64:"([0-9]{4})/([0-9]{1,2})/([0-9]{1,2})/comment-page-([0-9]{1,})/?$";s:81:"index.php?year=$matches[1]&monthnum=$matches[2]&day=$matches[3]&cpage=$matches[4]";s:51:"([0-9]{4})/([0-9]{1,2})/comment-page-([0-9]{1,})/?$";s:65:"index.php?year=$matches[1]&monthnum=$matches[2]&cpage=$matches[3]";s:38:"([0-9]{4})/comment-page-([0-9]{1,})/?$";s:44:"index.php?year=$matches[1]&cpage=$matches[2]";s:27:".?.+?/attachment/([^/]+)/?$";s:32:"index.php?attachment=$matches[1]";s:37:".?.+?/attachment/([^/]+)/trackback/?$";s:37:"index.php?attachment=$matches[1]&tb=1";s:57:".?.+?/attachment/([^/]+)/feed/(feed|rdf|rss|rss2|atom)/?$";s:49:"index.php?attachment=$matches[1]&feed=$matches[2]";s:52:".?.+?/attachment/([^/]+)/(feed|rdf|rss|rss2|atom)/?$";s:49:"index.php?attachment=$matches[1]&feed=$matches[2]";s:52:".?.+?/attachment/([^/]+)/comment-page-([0-9]{1,})/?$";s:50:"index.php?attachment=$matches[1]&cpage=$matches[2]";s:33:".?.+?/attachment/([^/]+)/embed/?$";s:43:"index.php?attachment=$matches[1]&embed=true";s:16:"(.?.+?)/embed/?$";s:41:"index.php?pagename=$matches[1]&embed=true";s:20:"(.?.+?)/trackback/?$";s:35:"index.php?pagename=$matches[1]&tb=1";s:40:"(.?.+?)/feed/(feed|rdf|rss|rss2|atom)/?$";s:47:"index.php?pagename=$matches[1]&feed=$matches[2]";s:35:"(.?.+?)/(feed|rdf|rss|rss2|atom)/?$";s:47:"index.php?pagename=$matches[1]&feed=$matches[2]";s:28:"(.?.+?)/page/?([0-9]{1,})/?$";s:48:"index.php?pagename=$matches[1]&paged=$matches[2]";s:35:"(.?.+?)/comment-page-([0-9]{1,})/?$";s:48:"index.php?pagename=$matches[1]&cpage=$matches[2]";s:36:"(.?.+?)/lp-order-received(/(.*))?/?$";s:60:"index.php?pagename=$matches[1]&lp-order-received=$matches[3]";s:26:"(.?.+?)/courses(/(.*))?/?$";s:50:"index.php?pagename=$matches[1]&courses=$matches[3]";s:26:"(.?.+?)/quizzes(/(.*))?/?$";s:50:"index.php?pagename=$matches[1]&quizzes=$matches[3]";s:25:"(.?.+?)/orders(/(.*))?/?$";s:49:"index.php?pagename=$matches[1]&orders=$matches[3]";s:32:"(.?.+?)/order-details(/(.*))?/?$";s:56:"index.php?pagename=$matches[1]&order-details=$matches[3]";s:24:"(.?.+?)(?:/([0-9]+))?/?$";s:47:"index.php?pagename=$matches[1]&page=$matches[2]";}', 'yes'),
(357, '_site_transient_timeout_browser_653e7f51f7a706456280b1b334e97ded', '1463218947', 'yes'),
(358, '_site_transient_browser_653e7f51f7a706456280b1b334e97ded', 'a:9:{s:8:"platform";s:7:"Windows";s:4:"name";s:6:"Chrome";s:7:"version";s:12:"50.0.2661.94";s:10:"update_url";s:28:"http://www.google.com/chrome";s:7:"img_src";s:49:"http://s.wordpress.org/images/browsers/chrome.png";s:11:"img_src_ssl";s:48:"https://wordpress.org/images/browsers/chrome.png";s:15:"current_version";s:2:"18";s:7:"upgrade";b:0;s:8:"insecure";b:0;}', 'yes'),
(379, 'db_upgraded', '', 'yes'),
(381, '_site_transient_update_core', 'O:8:"stdClass":4:{s:7:"updates";a:1:{i:0;O:8:"stdClass":10:{s:8:"response";s:6:"latest";s:8:"download";s:59:"https://downloads.wordpress.org/release/wordpress-4.5.2.zip";s:6:"locale";s:5:"en_US";s:8:"packages";O:8:"stdClass":5:{s:4:"full";s:59:"https://downloads.wordpress.org/release/wordpress-4.5.2.zip";s:10:"no_content";s:70:"https://downloads.wordpress.org/release/wordpress-4.5.2-no-content.zip";s:11:"new_bundled";s:71:"https://downloads.wordpress.org/release/wordpress-4.5.2-new-bundled.zip";s:7:"partial";b:0;s:8:"rollback";b:0;}s:7:"current";s:5:"4.5.2";s:7:"version";s:5:"4.5.2";s:11:"php_version";s:5:"5.2.4";s:13:"mysql_version";s:3:"5.0";s:11:"new_bundled";s:3:"4.4";s:15:"partial_version";s:0:"";}}s:12:"last_checked";i:1464019960;s:15:"version_checked";s:5:"4.5.2";s:12:"translations";a:0:{}}', 'yes'),
(382, 'can_compress_scripts', '1', 'yes'),
(383, 'learn_press_profile_endpoints', 'a:4:{s:15:"profile-courses";s:7:"courses";s:15:"profile-quizzes";s:7:"quizzes";s:14:"profile-orders";s:6:"orders";s:21:"profile-order-details";s:13:"order-details";}', 'yes'),
(384, 'learn_press_checkout_endpoints', 'a:1:{s:17:"lp_order_received";s:17:"lp-order-received";}', 'yes'),
(389, '_learn_press_flush_rewrite_rules', 'yes', 'yes'),
(393, 'learnpress_db_version', '1.0.1', 'yes'),
(394, 'learnpress_version', '1.0.3.1', 'yes'),
(429, '_site_transient_timeout_browser_dbdadc589ec4fcf75e70d825b57f1777', '1464378234', 'yes'),
(430, '_site_transient_browser_dbdadc589ec4fcf75e70d825b57f1777', 'a:9:{s:8:"platform";s:7:"Windows";s:4:"name";s:7:"Firefox";s:7:"version";s:4:"46.0";s:10:"update_url";s:23:"http://www.firefox.com/";s:7:"img_src";s:50:"http://s.wordpress.org/images/browsers/firefox.png";s:11:"img_src_ssl";s:49:"https://wordpress.org/images/browsers/firefox.png";s:15:"current_version";s:2:"16";s:7:"upgrade";b:0;s:8:"insecure";b:0;}', 'yes'),
(487, '_site_transient_timeout_browser_21eeb7b1996389217be58d4c0114ecf4', '1464549502', 'yes'),
(488, '_site_transient_browser_21eeb7b1996389217be58d4c0114ecf4', 'a:9:{s:8:"platform";s:7:"Windows";s:4:"name";s:6:"Chrome";s:7:"version";s:13:"50.0.2661.102";s:10:"update_url";s:28:"http://www.google.com/chrome";s:7:"img_src";s:49:"http://s.wordpress.org/images/browsers/chrome.png";s:11:"img_src_ssl";s:48:"https://wordpress.org/images/browsers/chrome.png";s:15:"current_version";s:2:"18";s:7:"upgrade";b:0;s:8:"insecure";b:0;}', 'yes'),
(493, 'widget_wpzoom-featured-posts-gallery', 'a:1:{s:12:"_multiwidget";i:1;}', 'yes'),
(494, '_site_transient_update_themes', 'O:8:"stdClass":4:{s:12:"last_checked";i:1464019963;s:7:"checked";a:5:{s:15:"academica-child";s:3:"2.0";s:9:"academica";s:5:"2.0.1";s:13:"twentyfifteen";s:3:"1.4";s:14:"twentyfourteen";s:3:"1.6";s:13:"twentysixteen";s:3:"1.1";}s:8:"response";a:3:{s:13:"twentyfifteen";a:4:{s:5:"theme";s:13:"twentyfifteen";s:11:"new_version";s:3:"1.5";s:3:"url";s:43:"https://wordpress.org/themes/twentyfifteen/";s:7:"package";s:59:"https://downloads.wordpress.org/theme/twentyfifteen.1.5.zip";}s:14:"twentyfourteen";a:4:{s:5:"theme";s:14:"twentyfourteen";s:11:"new_version";s:3:"1.7";s:3:"url";s:44:"https://wordpress.org/themes/twentyfourteen/";s:7:"package";s:60:"https://downloads.wordpress.org/theme/twentyfourteen.1.7.zip";}s:13:"twentysixteen";a:4:{s:5:"theme";s:13:"twentysixteen";s:11:"new_version";s:3:"1.2";s:3:"url";s:43:"https://wordpress.org/themes/twentysixteen/";s:7:"package";s:59:"https://downloads.wordpress.org/theme/twentysixteen.1.2.zip";}}s:12:"translations";a:0:{}}', 'yes'),
(507, '_transient_timeout_plugin_slugs', '1464109954', 'no'),
(508, '_transient_plugin_slugs', 'a:14:{i:0;s:19:"akismet/akismet.php";i:1;s:32:"baw-login-logout-menu/bawllm.php";i:2;s:31:"code-snippets/code-snippets.php";i:3;s:29:"custom-login/custom-login.php";i:4;s:43:"flexi-quote-rotator/flexi-quote-rotator.php";i:5;s:33:"wp-force-login/wp-force-login.php";i:6;s:9:"hello.php";i:7;s:25:"learnpress/learnpress.php";i:8;s:51:"memphis-wordpress-custom-login/memphis-wp-login.php";i:9;s:23:"ml-slider/ml-slider.php";i:10;s:44:"slideshow-jquery-image-gallery/slideshow.php";i:11;s:63:"social-icons-widget-by-wpzoom/social-icons-widget-by-wpzoom.php";i:12;s:26:"studypress/Study-Press.php";i:13;s:27:"text-slider/text-slider.php";}', 'no'),
(511, 'theme_mods_academica-child', 'a:7:{i:0;b:0;s:18:"nav_menu_locations";a:3:{s:7:"primary";i:2;s:6:"social";i:0;s:6:"footer";i:6;}s:16:"header_textcolor";s:5:"blank";s:16:"background_color";s:6:"e8e8e8";s:4:"logo";s:71:"http://localhost/invatacel/wp-content/uploads/2016/05/logoInvatacel.png";s:12:"logo-favicon";s:66:"http://localhost/invatacel/wp-content/uploads/2016/05/download.png";s:23:"header-background-color";s:7:"#4486bf";}', 'yes'),
(515, '_transient_timeout_academica-8c0de1e0b1d3c7eb25baa23663e69431', '1464033712', 'no'),
(516, '_transient_academica-8c0de1e0b1d3c7eb25baa23663e69431', 'a:2:{s:5:"width";i:220;s:6:"height";i:111;}', 'no'),
(521, '_site_transient_timeout_poptags_40cd750bba9870f18aada2478b24840a', '1463961402', 'yes');
INSERT INTO `wp_options` (`option_id`, `option_name`, `option_value`, `autoload`) VALUES
(522, '_site_transient_poptags_40cd750bba9870f18aada2478b24840a', 'a:100:{s:6:"widget";a:3:{s:4:"name";s:6:"widget";s:4:"slug";s:6:"widget";s:5:"count";s:4:"5862";}s:4:"post";a:3:{s:4:"name";s:4:"Post";s:4:"slug";s:4:"post";s:5:"count";s:4:"3630";}s:6:"plugin";a:3:{s:4:"name";s:6:"plugin";s:4:"slug";s:6:"plugin";s:5:"count";s:4:"3598";}s:5:"admin";a:3:{s:4:"name";s:5:"admin";s:4:"slug";s:5:"admin";s:5:"count";s:4:"3109";}s:5:"posts";a:3:{s:4:"name";s:5:"posts";s:4:"slug";s:5:"posts";s:5:"count";s:4:"2782";}s:9:"shortcode";a:3:{s:4:"name";s:9:"shortcode";s:4:"slug";s:9:"shortcode";s:5:"count";s:4:"2346";}s:7:"sidebar";a:3:{s:4:"name";s:7:"sidebar";s:4:"slug";s:7:"sidebar";s:5:"count";s:4:"2205";}s:6:"google";a:3:{s:4:"name";s:6:"google";s:4:"slug";s:6:"google";s:5:"count";s:4:"2088";}s:7:"twitter";a:3:{s:4:"name";s:7:"twitter";s:4:"slug";s:7:"twitter";s:5:"count";s:4:"2032";}s:4:"page";a:3:{s:4:"name";s:4:"page";s:4:"slug";s:4:"page";s:5:"count";s:4:"2007";}s:6:"images";a:3:{s:4:"name";s:6:"images";s:4:"slug";s:6:"images";s:5:"count";s:4:"1982";}s:8:"comments";a:3:{s:4:"name";s:8:"comments";s:4:"slug";s:8:"comments";s:5:"count";s:4:"1929";}s:5:"image";a:3:{s:4:"name";s:5:"image";s:4:"slug";s:5:"image";s:5:"count";s:4:"1863";}s:8:"facebook";a:3:{s:4:"name";s:8:"Facebook";s:4:"slug";s:8:"facebook";s:5:"count";s:4:"1676";}s:11:"woocommerce";a:3:{s:4:"name";s:11:"woocommerce";s:4:"slug";s:11:"woocommerce";s:5:"count";s:4:"1641";}s:3:"seo";a:3:{s:4:"name";s:3:"seo";s:4:"slug";s:3:"seo";s:5:"count";s:4:"1568";}s:9:"wordpress";a:3:{s:4:"name";s:9:"wordpress";s:4:"slug";s:9:"wordpress";s:5:"count";s:4:"1530";}s:6:"social";a:3:{s:4:"name";s:6:"social";s:4:"slug";s:6:"social";s:5:"count";s:4:"1371";}s:7:"gallery";a:3:{s:4:"name";s:7:"gallery";s:4:"slug";s:7:"gallery";s:5:"count";s:4:"1304";}s:5:"links";a:3:{s:4:"name";s:5:"links";s:4:"slug";s:5:"links";s:5:"count";s:4:"1285";}s:5:"email";a:3:{s:4:"name";s:5:"email";s:4:"slug";s:5:"email";s:5:"count";s:4:"1218";}s:7:"widgets";a:3:{s:4:"name";s:7:"widgets";s:4:"slug";s:7:"widgets";s:5:"count";s:4:"1103";}s:5:"pages";a:3:{s:4:"name";s:5:"pages";s:4:"slug";s:5:"pages";s:5:"count";s:4:"1082";}s:6:"jquery";a:3:{s:4:"name";s:6:"jquery";s:4:"slug";s:6:"jquery";s:5:"count";s:4:"1005";}s:5:"media";a:3:{s:4:"name";s:5:"media";s:4:"slug";s:5:"media";s:5:"count";s:3:"981";}s:9:"ecommerce";a:3:{s:4:"name";s:9:"ecommerce";s:4:"slug";s:9:"ecommerce";s:5:"count";s:3:"970";}s:3:"rss";a:3:{s:4:"name";s:3:"rss";s:4:"slug";s:3:"rss";s:5:"count";s:3:"912";}s:5:"video";a:3:{s:4:"name";s:5:"video";s:4:"slug";s:5:"video";s:5:"count";s:3:"912";}s:4:"ajax";a:3:{s:4:"name";s:4:"AJAX";s:4:"slug";s:4:"ajax";s:5:"count";s:3:"908";}s:7:"content";a:3:{s:4:"name";s:7:"content";s:4:"slug";s:7:"content";s:5:"count";s:3:"899";}s:5:"login";a:3:{s:4:"name";s:5:"login";s:4:"slug";s:5:"login";s:5:"count";s:3:"898";}s:10:"javascript";a:3:{s:4:"name";s:10:"javascript";s:4:"slug";s:10:"javascript";s:5:"count";s:3:"832";}s:10:"responsive";a:3:{s:4:"name";s:10:"responsive";s:4:"slug";s:10:"responsive";s:5:"count";s:3:"820";}s:10:"buddypress";a:3:{s:4:"name";s:10:"buddypress";s:4:"slug";s:10:"buddypress";s:5:"count";s:3:"790";}s:8:"security";a:3:{s:4:"name";s:8:"security";s:4:"slug";s:8:"security";s:5:"count";s:3:"778";}s:10:"e-commerce";a:3:{s:4:"name";s:10:"e-commerce";s:4:"slug";s:10:"e-commerce";s:5:"count";s:3:"763";}s:5:"photo";a:3:{s:4:"name";s:5:"photo";s:4:"slug";s:5:"photo";s:5:"count";s:3:"756";}s:7:"youtube";a:3:{s:4:"name";s:7:"youtube";s:4:"slug";s:7:"youtube";s:5:"count";s:3:"752";}s:4:"spam";a:3:{s:4:"name";s:4:"spam";s:4:"slug";s:4:"spam";s:5:"count";s:3:"746";}s:5:"share";a:3:{s:4:"name";s:5:"Share";s:4:"slug";s:5:"share";s:5:"count";s:3:"745";}s:4:"feed";a:3:{s:4:"name";s:4:"feed";s:4:"slug";s:4:"feed";s:5:"count";s:3:"742";}s:4:"link";a:3:{s:4:"name";s:4:"link";s:4:"slug";s:4:"link";s:5:"count";s:3:"741";}s:8:"category";a:3:{s:4:"name";s:8:"category";s:4:"slug";s:8:"category";s:5:"count";s:3:"703";}s:9:"analytics";a:3:{s:4:"name";s:9:"analytics";s:4:"slug";s:9:"analytics";s:5:"count";s:3:"694";}s:6:"photos";a:3:{s:4:"name";s:6:"photos";s:4:"slug";s:6:"photos";s:5:"count";s:3:"689";}s:3:"css";a:3:{s:4:"name";s:3:"CSS";s:4:"slug";s:3:"css";s:5:"count";s:3:"683";}s:5:"embed";a:3:{s:4:"name";s:5:"embed";s:4:"slug";s:5:"embed";s:5:"count";s:3:"683";}s:4:"form";a:3:{s:4:"name";s:4:"form";s:4:"slug";s:4:"form";s:5:"count";s:3:"680";}s:6:"search";a:3:{s:4:"name";s:6:"search";s:4:"slug";s:6:"search";s:5:"count";s:3:"661";}s:6:"slider";a:3:{s:4:"name";s:6:"slider";s:4:"slug";s:6:"slider";s:5:"count";s:3:"652";}s:6:"custom";a:3:{s:4:"name";s:6:"custom";s:4:"slug";s:6:"custom";s:5:"count";s:3:"646";}s:9:"slideshow";a:3:{s:4:"name";s:9:"slideshow";s:4:"slug";s:9:"slideshow";s:5:"count";s:3:"642";}s:5:"stats";a:3:{s:4:"name";s:5:"stats";s:4:"slug";s:5:"stats";s:5:"count";s:3:"614";}s:6:"button";a:3:{s:4:"name";s:6:"button";s:4:"slug";s:6:"button";s:5:"count";s:3:"611";}s:4:"menu";a:3:{s:4:"name";s:4:"menu";s:4:"slug";s:4:"menu";s:5:"count";s:3:"599";}s:7:"comment";a:3:{s:4:"name";s:7:"comment";s:4:"slug";s:7:"comment";s:5:"count";s:3:"597";}s:9:"dashboard";a:3:{s:4:"name";s:9:"dashboard";s:4:"slug";s:9:"dashboard";s:5:"count";s:3:"595";}s:5:"theme";a:3:{s:4:"name";s:5:"theme";s:4:"slug";s:5:"theme";s:5:"count";s:3:"593";}s:4:"tags";a:3:{s:4:"name";s:4:"tags";s:4:"slug";s:4:"tags";s:5:"count";s:3:"588";}s:10:"categories";a:3:{s:4:"name";s:10:"categories";s:4:"slug";s:10:"categories";s:5:"count";s:3:"579";}s:6:"mobile";a:3:{s:4:"name";s:6:"mobile";s:4:"slug";s:6:"mobile";s:5:"count";s:3:"569";}s:10:"statistics";a:3:{s:4:"name";s:10:"statistics";s:4:"slug";s:10:"statistics";s:5:"count";s:3:"567";}s:3:"ads";a:3:{s:4:"name";s:3:"ads";s:4:"slug";s:3:"ads";s:5:"count";s:3:"562";}s:6:"editor";a:3:{s:4:"name";s:6:"editor";s:4:"slug";s:6:"editor";s:5:"count";s:3:"551";}s:4:"user";a:3:{s:4:"name";s:4:"user";s:4:"slug";s:4:"user";s:5:"count";s:3:"551";}s:5:"users";a:3:{s:4:"name";s:5:"users";s:4:"slug";s:5:"users";s:5:"count";s:3:"536";}s:4:"list";a:3:{s:4:"name";s:4:"list";s:4:"slug";s:4:"list";s:5:"count";s:3:"534";}s:7:"plugins";a:3:{s:4:"name";s:7:"plugins";s:4:"slug";s:7:"plugins";s:5:"count";s:3:"517";}s:9:"affiliate";a:3:{s:4:"name";s:9:"affiliate";s:4:"slug";s:9:"affiliate";s:5:"count";s:3:"516";}s:7:"picture";a:3:{s:4:"name";s:7:"picture";s:4:"slug";s:7:"picture";s:5:"count";s:3:"515";}s:6:"simple";a:3:{s:4:"name";s:6:"simple";s:4:"slug";s:6:"simple";s:5:"count";s:3:"506";}s:9:"multisite";a:3:{s:4:"name";s:9:"multisite";s:4:"slug";s:9:"multisite";s:5:"count";s:3:"506";}s:12:"social-media";a:3:{s:4:"name";s:12:"social media";s:4:"slug";s:12:"social-media";s:5:"count";s:3:"503";}s:12:"contact-form";a:3:{s:4:"name";s:12:"contact form";s:4:"slug";s:12:"contact-form";s:5:"count";s:3:"501";}s:7:"contact";a:3:{s:4:"name";s:7:"contact";s:4:"slug";s:7:"contact";s:5:"count";s:3:"482";}s:8:"pictures";a:3:{s:4:"name";s:8:"pictures";s:4:"slug";s:8:"pictures";s:5:"count";s:3:"464";}s:4:"shop";a:3:{s:4:"name";s:4:"shop";s:4:"slug";s:4:"shop";s:5:"count";s:3:"456";}s:9:"marketing";a:3:{s:4:"name";s:9:"marketing";s:4:"slug";s:9:"marketing";s:5:"count";s:3:"454";}s:3:"api";a:3:{s:4:"name";s:3:"api";s:4:"slug";s:3:"api";s:5:"count";s:3:"449";}s:3:"url";a:3:{s:4:"name";s:3:"url";s:4:"slug";s:3:"url";s:5:"count";s:3:"448";}s:10:"navigation";a:3:{s:4:"name";s:10:"navigation";s:4:"slug";s:10:"navigation";s:5:"count";s:3:"440";}s:4:"html";a:3:{s:4:"name";s:4:"html";s:4:"slug";s:4:"html";s:5:"count";s:3:"439";}s:10:"newsletter";a:3:{s:4:"name";s:10:"newsletter";s:4:"slug";s:10:"newsletter";s:5:"count";s:3:"425";}s:4:"meta";a:3:{s:4:"name";s:4:"meta";s:4:"slug";s:4:"meta";s:5:"count";s:3:"422";}s:5:"flash";a:3:{s:4:"name";s:5:"flash";s:4:"slug";s:5:"flash";s:5:"count";s:3:"422";}s:8:"tracking";a:3:{s:4:"name";s:8:"tracking";s:4:"slug";s:8:"tracking";s:5:"count";s:3:"421";}s:6:"events";a:3:{s:4:"name";s:6:"events";s:4:"slug";s:6:"events";s:5:"count";s:3:"418";}s:8:"calendar";a:3:{s:4:"name";s:8:"calendar";s:4:"slug";s:8:"calendar";s:5:"count";s:3:"417";}s:4:"news";a:3:{s:4:"name";s:4:"News";s:4:"slug";s:4:"news";s:5:"count";s:3:"408";}s:3:"tag";a:3:{s:4:"name";s:3:"tag";s:4:"slug";s:3:"tag";s:5:"count";s:3:"408";}s:10:"shortcodes";a:3:{s:4:"name";s:10:"shortcodes";s:4:"slug";s:10:"shortcodes";s:5:"count";s:3:"404";}s:11:"advertising";a:3:{s:4:"name";s:11:"advertising";s:4:"slug";s:11:"advertising";s:5:"count";s:3:"403";}s:9:"thumbnail";a:3:{s:4:"name";s:9:"thumbnail";s:4:"slug";s:9:"thumbnail";s:5:"count";s:3:"402";}s:6:"paypal";a:3:{s:4:"name";s:6:"paypal";s:4:"slug";s:6:"paypal";s:5:"count";s:3:"398";}s:6:"upload";a:3:{s:4:"name";s:6:"upload";s:4:"slug";s:6:"upload";s:5:"count";s:3:"397";}s:12:"notification";a:3:{s:4:"name";s:12:"notification";s:4:"slug";s:12:"notification";s:5:"count";s:3:"396";}s:7:"sharing";a:3:{s:4:"name";s:7:"sharing";s:4:"slug";s:7:"sharing";s:5:"count";s:3:"392";}s:4:"text";a:3:{s:4:"name";s:4:"text";s:4:"slug";s:4:"text";s:5:"count";s:3:"391";}s:8:"linkedin";a:3:{s:4:"name";s:8:"linkedin";s:4:"slug";s:8:"linkedin";s:5:"count";s:3:"389";}s:4:"code";a:3:{s:4:"name";s:4:"code";s:4:"slug";s:4:"code";s:5:"count";s:3:"389";}}', 'yes'),
(525, 'slideshow-plugin-updated-from-v1-x-x-to-v2-0-1', 'updated', 'no'),
(526, 'slideshow-plugin-updated-from-v2-to-v2-1-20', 'updated', 'no'),
(527, 'slideshow-jquery-image-gallery-updated-from-v2-1-20-to-v2-1-22', 'updated', 'no'),
(528, 'slideshow-jquery-image-gallery-updated-from-v2-1-20-to-v2-1-23', 'updated', 'no'),
(529, 'slideshow-jquery-image-gallery-updated-from-v2-1-23-to-v2-2-0', 'updated', 'no'),
(530, 'slideshow-jquery-image-gallery-updated-from-v2-2-0-to-v2-2-8', 'updated', 'no'),
(531, 'slideshow-jquery-image-gallery-updated-from-v2-2-8-to-v2-2-12', 'updated', 'no'),
(532, 'slideshow-jquery-image-gallery-updated-from-v2-2-12-to-v2-2-16', 'updated', 'no'),
(533, 'slideshow-jquery-image-gallery-updated-from-v2-2-16-to-v2-2-17', 'updated', 'no'),
(534, 'slideshow-jquery-image-gallery-updated-from-v2-2-17-to-v2-2-20', 'updated', 'no'),
(535, 'slideshow-jquery-image-gallery-plugin-version', '2.3.1', 'yes'),
(536, 'widget_slideshowwidget', 'a:1:{s:12:"_multiwidget";i:1;}', 'yes'),
(538, 'text_slider_choices', 'a:1:{s:5:"fonts";a:15:{i:0;s:4:"None";i:1;s:32:"Arial,Arial,Helvetica,sans-serif";i:2;s:45:"''Arial Black'',''Arial Black'',Gadget,sans-serif";i:3;s:39:"''Comic Sans MS'',''Comic Sans MS'',cursive";i:4;s:45:"''Courier New'',''Courier New'',Courier,monospace";i:5;s:21:"Georgia,Georgia,serif";i:6;s:26:"Impact,Charcoal,sans-serif";i:7;s:33:"''Lucida Console'',Monaco,monospace";i:8;s:48:"''Lucida Sans Unicode'',''Lucida Grande'',sans-serif";i:9;s:49:"''Palatino Linotype'',''Book Antiqua'',Palatino,serif";i:10;s:24:"Tahoma,Geneva,sans-serif";i:11;s:29:"''Times New Roman'',Times,serif";i:12;s:35:"''Trebuchet MS'',Helvetica,sans-serif";i:13;s:25:"Verdana,Geneva,sans-serif";i:14;s:29:"''Gill Sans'',Geneva,sans-serif";}}', 'yes'),
(539, 'text_slider_admin_notices', '', 'yes'),
(541, 'text_slider_settings', 'a:1:{i:0;a:18:{s:9:"multi_key";s:1:"0";s:11:"text_slides";a:1:{i:0;a:2:{s:9:"main_text";s:74:"Live as if you were to die tomorrow. Learn as if you were to live forever.";s:8:"sub_text";s:14:"Mahatma Gandhi";}}s:5:"delay";s:1:"9";s:8:"duration";s:1:"1";s:14:"defined_height";s:0:"";s:10:"custom_css";s:0:"";s:19:"maintext_fontfamily";s:21:"Georgia,Georgia,serif";s:17:"maintext_fontsize";s:2:"40";s:19:"maintext_fontweight";s:3:"200";s:14:"maintext_color";s:7:"#dd3333";s:18:"subtext_fontfamily";s:29:"''Gill Sans'',Geneva,sans-serif";s:16:"subtext_fontsize";s:2:"10";s:18:"subtext_fontweight";s:0:"";s:13:"subtext_color";s:7:"#000000";s:12:"use_font_css";i:0;s:10:"icon_color";s:7:"#eeeeee";s:16:"icon_hover_color";s:7:"#eeeeee";s:13:"icon_fontsize";s:2:"86";}}', 'yes'),
(551, 'widget_metaslider_widget', 'a:1:{s:12:"_multiwidget";i:1;}', 'yes'),
(553, 'metaslider_systemcheck', 'a:2:{s:16:"wordPressVersion";b:0;s:12:"imageLibrary";b:0;}', 'yes'),
(554, 'ml-slider_children', 'a:0:{}', 'yes'),
(556, 'widgetQuoteRotator', 'a:6:{s:5:"title";s:13:"Quote Rotator";s:5:"delay";i:5;s:4:"fade";i:2;s:8:"fontsize";i:12;s:8:"fontunit";s:2:"px";s:7:"version";s:3:"0.1";}', 'yes'),
(557, '_site_transient_update_plugins', 'O:8:"stdClass":5:{s:12:"last_checked";i:1464019962;s:7:"checked";a:14:{s:19:"akismet/akismet.php";s:6:"3.1.10";s:32:"baw-login-logout-menu/bawllm.php";s:5:"1.3.3";s:31:"code-snippets/code-snippets.php";s:5:"2.6.1";s:29:"custom-login/custom-login.php";s:5:"3.2.5";s:43:"flexi-quote-rotator/flexi-quote-rotator.php";s:5:"0.9.4";s:33:"wp-force-login/wp-force-login.php";s:3:"4.1";s:9:"hello.php";s:3:"1.6";s:25:"learnpress/learnpress.php";s:7:"1.0.3.1";s:51:"memphis-wordpress-custom-login/memphis-wp-login.php";s:5:"3.2.3";s:23:"ml-slider/ml-slider.php";s:5:"3.3.7";s:44:"slideshow-jquery-image-gallery/slideshow.php";s:5:"2.3.1";s:63:"social-icons-widget-by-wpzoom/social-icons-widget-by-wpzoom.php";s:5:"2.0.1";s:26:"studypress/Study-Press.php";s:5:"1.1.2";s:27:"text-slider/text-slider.php";s:5:"1.0.0";}s:8:"response";a:2:{s:19:"akismet/akismet.php";O:8:"stdClass":8:{s:2:"id";s:2:"15";s:4:"slug";s:7:"akismet";s:6:"plugin";s:19:"akismet/akismet.php";s:11:"new_version";s:6:"3.1.11";s:3:"url";s:38:"https://wordpress.org/plugins/akismet/";s:7:"package";s:57:"https://downloads.wordpress.org/plugin/akismet.3.1.11.zip";s:6:"tested";s:5:"4.5.2";s:13:"compatibility";O:8:"stdClass":1:{s:6:"scalar";O:8:"stdClass":1:{s:6:"scalar";b:0;}}}s:25:"learnpress/learnpress.php";O:8:"stdClass":8:{s:2:"id";s:5:"57592";s:4:"slug";s:10:"learnpress";s:6:"plugin";s:25:"learnpress/learnpress.php";s:11:"new_version";s:5:"1.0.5";s:3:"url";s:41:"https://wordpress.org/plugins/learnpress/";s:7:"package";s:53:"https://downloads.wordpress.org/plugin/learnpress.zip";s:6:"tested";s:5:"4.5.2";s:13:"compatibility";O:8:"stdClass":1:{s:6:"scalar";O:8:"stdClass":1:{s:6:"scalar";b:0;}}}}s:12:"translations";a:0:{}s:9:"no_update";a:12:{s:32:"baw-login-logout-menu/bawllm.php";O:8:"stdClass":6:{s:2:"id";s:5:"29878";s:4:"slug";s:21:"baw-login-logout-menu";s:6:"plugin";s:32:"baw-login-logout-menu/bawllm.php";s:11:"new_version";s:5:"1.3.3";s:3:"url";s:52:"https://wordpress.org/plugins/baw-login-logout-menu/";s:7:"package";s:64:"https://downloads.wordpress.org/plugin/baw-login-logout-menu.zip";}s:31:"code-snippets/code-snippets.php";O:8:"stdClass":6:{s:2:"id";s:5:"32262";s:4:"slug";s:13:"code-snippets";s:6:"plugin";s:31:"code-snippets/code-snippets.php";s:11:"new_version";s:5:"2.6.1";s:3:"url";s:44:"https://wordpress.org/plugins/code-snippets/";s:7:"package";s:56:"https://downloads.wordpress.org/plugin/code-snippets.zip";}s:29:"custom-login/custom-login.php";O:8:"stdClass":6:{s:2:"id";s:4:"9612";s:4:"slug";s:12:"custom-login";s:6:"plugin";s:29:"custom-login/custom-login.php";s:11:"new_version";s:5:"3.2.5";s:3:"url";s:43:"https://wordpress.org/plugins/custom-login/";s:7:"package";s:55:"https://downloads.wordpress.org/plugin/custom-login.zip";}s:43:"flexi-quote-rotator/flexi-quote-rotator.php";O:8:"stdClass":6:{s:2:"id";s:4:"5094";s:4:"slug";s:19:"flexi-quote-rotator";s:6:"plugin";s:43:"flexi-quote-rotator/flexi-quote-rotator.php";s:11:"new_version";s:5:"0.9.4";s:3:"url";s:50:"https://wordpress.org/plugins/flexi-quote-rotator/";s:7:"package";s:68:"https://downloads.wordpress.org/plugin/flexi-quote-rotator.0.9.4.zip";}s:33:"wp-force-login/wp-force-login.php";O:8:"stdClass":7:{s:2:"id";s:5:"51147";s:4:"slug";s:14:"wp-force-login";s:6:"plugin";s:33:"wp-force-login/wp-force-login.php";s:11:"new_version";s:3:"4.1";s:3:"url";s:45:"https://wordpress.org/plugins/wp-force-login/";s:7:"package";s:61:"https://downloads.wordpress.org/plugin/wp-force-login.4.1.zip";s:14:"upgrade_notice";s:91:"Multisite users can only access their assigned sites, except &#039;Super Admin&#039; users.";}s:9:"hello.php";O:8:"stdClass":6:{s:2:"id";s:4:"3564";s:4:"slug";s:11:"hello-dolly";s:6:"plugin";s:9:"hello.php";s:11:"new_version";s:3:"1.6";s:3:"url";s:42:"https://wordpress.org/plugins/hello-dolly/";s:7:"package";s:58:"https://downloads.wordpress.org/plugin/hello-dolly.1.6.zip";}s:51:"memphis-wordpress-custom-login/memphis-wp-login.php";O:8:"stdClass":6:{s:2:"id";s:5:"20188";s:4:"slug";s:30:"memphis-wordpress-custom-login";s:6:"plugin";s:51:"memphis-wordpress-custom-login/memphis-wp-login.php";s:11:"new_version";s:5:"3.2.3";s:3:"url";s:61:"https://wordpress.org/plugins/memphis-wordpress-custom-login/";s:7:"package";s:79:"https://downloads.wordpress.org/plugin/memphis-wordpress-custom-login.3.2.3.zip";}s:23:"ml-slider/ml-slider.php";O:8:"stdClass":6:{s:2:"id";s:5:"38583";s:4:"slug";s:9:"ml-slider";s:6:"plugin";s:23:"ml-slider/ml-slider.php";s:11:"new_version";s:5:"3.3.7";s:3:"url";s:40:"https://wordpress.org/plugins/ml-slider/";s:7:"package";s:58:"https://downloads.wordpress.org/plugin/ml-slider.3.3.7.zip";}s:44:"slideshow-jquery-image-gallery/slideshow.php";O:8:"stdClass":6:{s:2:"id";s:5:"31854";s:4:"slug";s:30:"slideshow-jquery-image-gallery";s:6:"plugin";s:44:"slideshow-jquery-image-gallery/slideshow.php";s:11:"new_version";s:5:"2.3.1";s:3:"url";s:61:"https://wordpress.org/plugins/slideshow-jquery-image-gallery/";s:7:"package";s:73:"https://downloads.wordpress.org/plugin/slideshow-jquery-image-gallery.zip";}s:63:"social-icons-widget-by-wpzoom/social-icons-widget-by-wpzoom.php";O:8:"stdClass":6:{s:2:"id";s:5:"58275";s:4:"slug";s:29:"social-icons-widget-by-wpzoom";s:6:"plugin";s:63:"social-icons-widget-by-wpzoom/social-icons-widget-by-wpzoom.php";s:11:"new_version";s:5:"2.0.1";s:3:"url";s:60:"https://wordpress.org/plugins/social-icons-widget-by-wpzoom/";s:7:"package";s:72:"https://downloads.wordpress.org/plugin/social-icons-widget-by-wpzoom.zip";}s:26:"studypress/Study-Press.php";O:8:"stdClass":6:{s:2:"id";s:5:"40863";s:4:"slug";s:10:"studypress";s:6:"plugin";s:26:"studypress/Study-Press.php";s:11:"new_version";s:5:"1.1.2";s:3:"url";s:41:"https://wordpress.org/plugins/studypress/";s:7:"package";s:59:"https://downloads.wordpress.org/plugin/studypress.1.1.2.zip";}s:27:"text-slider/text-slider.php";O:8:"stdClass":6:{s:2:"id";s:5:"50035";s:4:"slug";s:11:"text-slider";s:6:"plugin";s:27:"text-slider/text-slider.php";s:11:"new_version";s:5:"1.0.0";s:3:"url";s:42:"https://wordpress.org/plugins/text-slider/";s:7:"package";s:60:"https://downloads.wordpress.org/plugin/text-slider.1.0.3.zip";}}}', 'yes'),
(558, '_site_transient_timeout_available_translations', '1463962848', 'yes'),
(559, '_site_transient_available_translations', 'a:81:{s:2:"ar";a:8:{s:8:"language";s:2:"ar";s:7:"version";s:5:"4.5.2";s:7:"updated";s:19:"2016-04-10 15:55:55";s:12:"english_name";s:6:"Arabic";s:11:"native_name";s:14:"العربية";s:7:"package";s:61:"https://downloads.wordpress.org/translation/core/4.5.2/ar.zip";s:3:"iso";a:2:{i:1;s:2:"ar";i:2;s:3:"ara";}s:7:"strings";a:1:{s:8:"continue";s:16:"المتابعة";}}s:3:"ary";a:8:{s:8:"language";s:3:"ary";s:7:"version";s:5:"4.5.2";s:7:"updated";s:19:"2016-04-13 14:44:00";s:12:"english_name";s:15:"Moroccan Arabic";s:11:"native_name";s:31:"العربية المغربية";s:7:"package";s:62:"https://downloads.wordpress.org/translation/core/4.5.2/ary.zip";s:3:"iso";a:2:{i:1;s:2:"ar";i:3;s:3:"ary";}s:7:"strings";a:1:{s:8:"continue";s:16:"المتابعة";}}s:2:"az";a:8:{s:8:"language";s:2:"az";s:7:"version";s:5:"4.5.2";s:7:"updated";s:19:"2016-04-12 22:48:01";s:12:"english_name";s:11:"Azerbaijani";s:11:"native_name";s:16:"Azərbaycan dili";s:7:"package";s:61:"https://downloads.wordpress.org/translation/core/4.5.2/az.zip";s:3:"iso";a:2:{i:1;s:2:"az";i:2;s:3:"aze";}s:7:"strings";a:1:{s:8:"continue";s:5:"Davam";}}s:3:"azb";a:8:{s:8:"language";s:3:"azb";s:7:"version";s:5:"4.4.2";s:7:"updated";s:19:"2015-12-11 22:42:10";s:12:"english_name";s:17:"South Azerbaijani";s:11:"native_name";s:29:"گؤنئی آذربایجان";s:7:"package";s:62:"https://downloads.wordpress.org/translation/core/4.4.2/azb.zip";s:3:"iso";a:2:{i:1;s:2:"az";i:3;s:3:"azb";}s:7:"strings";a:1:{s:8:"continue";s:8:"Continue";}}s:5:"bg_BG";a:8:{s:8:"language";s:5:"bg_BG";s:7:"version";s:5:"4.5.2";s:7:"updated";s:19:"2016-05-03 14:05:41";s:12:"english_name";s:9:"Bulgarian";s:11:"native_name";s:18:"Български";s:7:"package";s:64:"https://downloads.wordpress.org/translation/core/4.5.2/bg_BG.zip";s:3:"iso";a:2:{i:1;s:2:"bg";i:2;s:3:"bul";}s:7:"strings";a:1:{s:8:"continue";s:12:"Напред";}}s:5:"bn_BD";a:8:{s:8:"language";s:5:"bn_BD";s:7:"version";s:5:"4.4.2";s:7:"updated";s:19:"2016-02-08 13:17:04";s:12:"english_name";s:7:"Bengali";s:11:"native_name";s:15:"বাংলা";s:7:"package";s:64:"https://downloads.wordpress.org/translation/core/4.4.2/bn_BD.zip";s:3:"iso";a:1:{i:1;s:2:"bn";}s:7:"strings";a:1:{s:8:"continue";s:23:"এগিয়ে চল.";}}s:5:"bs_BA";a:8:{s:8:"language";s:5:"bs_BA";s:7:"version";s:5:"4.5.2";s:7:"updated";s:19:"2016-04-19 23:16:37";s:12:"english_name";s:7:"Bosnian";s:11:"native_name";s:8:"Bosanski";s:7:"package";s:64:"https://downloads.wordpress.org/translation/core/4.5.2/bs_BA.zip";s:3:"iso";a:2:{i:1;s:2:"bs";i:2;s:3:"bos";}s:7:"strings";a:1:{s:8:"continue";s:7:"Nastavi";}}s:2:"ca";a:8:{s:8:"language";s:2:"ca";s:7:"version";s:5:"4.5.2";s:7:"updated";s:19:"2016-04-11 06:38:51";s:12:"english_name";s:7:"Catalan";s:11:"native_name";s:7:"Català";s:7:"package";s:61:"https://downloads.wordpress.org/translation/core/4.5.2/ca.zip";s:3:"iso";a:2:{i:1;s:2:"ca";i:2;s:3:"cat";}s:7:"strings";a:1:{s:8:"continue";s:8:"Continua";}}s:3:"ceb";a:8:{s:8:"language";s:3:"ceb";s:7:"version";s:5:"4.4.3";s:7:"updated";s:19:"2016-02-16 15:34:57";s:12:"english_name";s:7:"Cebuano";s:11:"native_name";s:7:"Cebuano";s:7:"package";s:62:"https://downloads.wordpress.org/translation/core/4.4.3/ceb.zip";s:3:"iso";a:2:{i:2;s:3:"ceb";i:3;s:3:"ceb";}s:7:"strings";a:1:{s:8:"continue";s:7:"Padayun";}}s:5:"cs_CZ";a:8:{s:8:"language";s:5:"cs_CZ";s:7:"version";s:5:"4.4.2";s:7:"updated";s:19:"2016-02-11 18:32:36";s:12:"english_name";s:5:"Czech";s:11:"native_name";s:12:"Čeština‎";s:7:"package";s:64:"https://downloads.wordpress.org/translation/core/4.4.2/cs_CZ.zip";s:3:"iso";a:2:{i:1;s:2:"cs";i:2;s:3:"ces";}s:7:"strings";a:1:{s:8:"continue";s:11:"Pokračovat";}}s:2:"cy";a:8:{s:8:"language";s:2:"cy";s:7:"version";s:5:"4.5.2";s:7:"updated";s:19:"2016-04-11 14:21:06";s:12:"english_name";s:5:"Welsh";s:11:"native_name";s:7:"Cymraeg";s:7:"package";s:61:"https://downloads.wordpress.org/translation/core/4.5.2/cy.zip";s:3:"iso";a:2:{i:1;s:2:"cy";i:2;s:3:"cym";}s:7:"strings";a:1:{s:8:"continue";s:6:"Parhau";}}s:5:"da_DK";a:8:{s:8:"language";s:5:"da_DK";s:7:"version";s:5:"4.5.2";s:7:"updated";s:19:"2016-04-11 15:42:12";s:12:"english_name";s:6:"Danish";s:11:"native_name";s:5:"Dansk";s:7:"package";s:64:"https://downloads.wordpress.org/translation/core/4.5.2/da_DK.zip";s:3:"iso";a:2:{i:1;s:2:"da";i:2;s:3:"dan";}s:7:"strings";a:1:{s:8:"continue";s:12:"Forts&#230;t";}}s:14:"de_CH_informal";a:8:{s:8:"language";s:14:"de_CH_informal";s:7:"version";s:5:"4.5.2";s:7:"updated";s:19:"2016-04-12 20:03:25";s:12:"english_name";s:23:"(Switzerland, Informal)";s:11:"native_name";s:21:"Deutsch (Schweiz, Du)";s:7:"package";s:73:"https://downloads.wordpress.org/translation/core/4.5.2/de_CH_informal.zip";s:3:"iso";a:1:{i:1;s:2:"de";}s:7:"strings";a:1:{s:8:"continue";s:6:"Weiter";}}s:5:"de_CH";a:8:{s:8:"language";s:5:"de_CH";s:7:"version";s:5:"4.5.2";s:7:"updated";s:19:"2016-04-12 19:26:41";s:12:"english_name";s:20:"German (Switzerland)";s:11:"native_name";s:17:"Deutsch (Schweiz)";s:7:"package";s:64:"https://downloads.wordpress.org/translation/core/4.5.2/de_CH.zip";s:3:"iso";a:1:{i:1;s:2:"de";}s:7:"strings";a:1:{s:8:"continue";s:10:"Fortfahren";}}s:12:"de_DE_formal";a:8:{s:8:"language";s:12:"de_DE_formal";s:7:"version";s:5:"4.5.2";s:7:"updated";s:19:"2016-05-19 09:18:17";s:12:"english_name";s:15:"German (Formal)";s:11:"native_name";s:13:"Deutsch (Sie)";s:7:"package";s:71:"https://downloads.wordpress.org/translation/core/4.5.2/de_DE_formal.zip";s:3:"iso";a:1:{i:1;s:2:"de";}s:7:"strings";a:1:{s:8:"continue";s:10:"Fortfahren";}}s:5:"de_DE";a:8:{s:8:"language";s:5:"de_DE";s:7:"version";s:5:"4.5.2";s:7:"updated";s:19:"2016-05-19 09:18:26";s:12:"english_name";s:6:"German";s:11:"native_name";s:7:"Deutsch";s:7:"package";s:64:"https://downloads.wordpress.org/translation/core/4.5.2/de_DE.zip";s:3:"iso";a:1:{i:1;s:2:"de";}s:7:"strings";a:1:{s:8:"continue";s:6:"Weiter";}}s:2:"el";a:8:{s:8:"language";s:2:"el";s:7:"version";s:5:"4.5.2";s:7:"updated";s:19:"2016-05-12 23:27:24";s:12:"english_name";s:5:"Greek";s:11:"native_name";s:16:"Ελληνικά";s:7:"package";s:61:"https://downloads.wordpress.org/translation/core/4.5.2/el.zip";s:3:"iso";a:2:{i:1;s:2:"el";i:2;s:3:"ell";}s:7:"strings";a:1:{s:8:"continue";s:16:"Συνέχεια";}}s:5:"en_AU";a:8:{s:8:"language";s:5:"en_AU";s:7:"version";s:5:"4.5.2";s:7:"updated";s:19:"2016-04-13 06:26:11";s:12:"english_name";s:19:"English (Australia)";s:11:"native_name";s:19:"English (Australia)";s:7:"package";s:64:"https://downloads.wordpress.org/translation/core/4.5.2/en_AU.zip";s:3:"iso";a:3:{i:1;s:2:"en";i:2;s:3:"eng";i:3;s:3:"eng";}s:7:"strings";a:1:{s:8:"continue";s:8:"Continue";}}s:5:"en_ZA";a:8:{s:8:"language";s:5:"en_ZA";s:7:"version";s:5:"4.5.2";s:7:"updated";s:19:"2016-04-28 11:29:02";s:12:"english_name";s:22:"English (South Africa)";s:11:"native_name";s:22:"English (South Africa)";s:7:"package";s:64:"https://downloads.wordpress.org/translation/core/4.5.2/en_ZA.zip";s:3:"iso";a:3:{i:1;s:2:"en";i:2;s:3:"eng";i:3;s:3:"eng";}s:7:"strings";a:1:{s:8:"continue";s:8:"Continue";}}s:5:"en_CA";a:8:{s:8:"language";s:5:"en_CA";s:7:"version";s:5:"4.5.2";s:7:"updated";s:19:"2016-04-10 05:23:57";s:12:"english_name";s:16:"English (Canada)";s:11:"native_name";s:16:"English (Canada)";s:7:"package";s:64:"https://downloads.wordpress.org/translation/core/4.5.2/en_CA.zip";s:3:"iso";a:3:{i:1;s:2:"en";i:2;s:3:"eng";i:3;s:3:"eng";}s:7:"strings";a:1:{s:8:"continue";s:8:"Continue";}}s:5:"en_NZ";a:8:{s:8:"language";s:5:"en_NZ";s:7:"version";s:5:"4.5.2";s:7:"updated";s:19:"2016-04-26 02:00:05";s:12:"english_name";s:21:"English (New Zealand)";s:11:"native_name";s:21:"English (New Zealand)";s:7:"package";s:64:"https://downloads.wordpress.org/translation/core/4.5.2/en_NZ.zip";s:3:"iso";a:3:{i:1;s:2:"en";i:2;s:3:"eng";i:3;s:3:"eng";}s:7:"strings";a:1:{s:8:"continue";s:8:"Continue";}}s:5:"en_GB";a:8:{s:8:"language";s:5:"en_GB";s:7:"version";s:5:"4.5.2";s:7:"updated";s:19:"2016-04-13 12:51:07";s:12:"english_name";s:12:"English (UK)";s:11:"native_name";s:12:"English (UK)";s:7:"package";s:64:"https://downloads.wordpress.org/translation/core/4.5.2/en_GB.zip";s:3:"iso";a:3:{i:1;s:2:"en";i:2;s:3:"eng";i:3;s:3:"eng";}s:7:"strings";a:1:{s:8:"continue";s:8:"Continue";}}s:2:"eo";a:8:{s:8:"language";s:2:"eo";s:7:"version";s:5:"4.5.2";s:7:"updated";s:19:"2016-04-11 10:58:49";s:12:"english_name";s:9:"Esperanto";s:11:"native_name";s:9:"Esperanto";s:7:"package";s:61:"https://downloads.wordpress.org/translation/core/4.5.2/eo.zip";s:3:"iso";a:2:{i:1;s:2:"eo";i:2;s:3:"epo";}s:7:"strings";a:1:{s:8:"continue";s:8:"Daŭrigi";}}s:5:"es_VE";a:8:{s:8:"language";s:5:"es_VE";s:7:"version";s:5:"4.5.2";s:7:"updated";s:19:"2016-04-28 13:08:25";s:12:"english_name";s:19:"Spanish (Venezuela)";s:11:"native_name";s:21:"Español de Venezuela";s:7:"package";s:64:"https://downloads.wordpress.org/translation/core/4.5.2/es_VE.zip";s:3:"iso";a:2:{i:1;s:2:"es";i:2;s:3:"spa";}s:7:"strings";a:1:{s:8:"continue";s:9:"Continuar";}}s:5:"es_PE";a:8:{s:8:"language";s:5:"es_PE";s:7:"version";s:5:"4.5.2";s:7:"updated";s:19:"2016-04-16 17:35:43";s:12:"english_name";s:14:"Spanish (Peru)";s:11:"native_name";s:17:"Español de Perú";s:7:"package";s:64:"https://downloads.wordpress.org/translation/core/4.5.2/es_PE.zip";s:3:"iso";a:2:{i:1;s:2:"es";i:2;s:3:"spa";}s:7:"strings";a:1:{s:8:"continue";s:9:"Continuar";}}s:5:"es_MX";a:8:{s:8:"language";s:5:"es_MX";s:7:"version";s:5:"4.5.2";s:7:"updated";s:19:"2016-04-12 21:06:55";s:12:"english_name";s:16:"Spanish (Mexico)";s:11:"native_name";s:19:"Español de México";s:7:"package";s:64:"https://downloads.wordpress.org/translation/core/4.5.2/es_MX.zip";s:3:"iso";a:2:{i:1;s:2:"es";i:2;s:3:"spa";}s:7:"strings";a:1:{s:8:"continue";s:9:"Continuar";}}s:5:"es_GT";a:8:{s:8:"language";s:5:"es_GT";s:7:"version";s:5:"4.5.2";s:7:"updated";s:19:"2016-04-13 12:43:00";s:12:"english_name";s:19:"Spanish (Guatemala)";s:11:"native_name";s:21:"Español de Guatemala";s:7:"package";s:64:"https://downloads.wordpress.org/translation/core/4.5.2/es_GT.zip";s:3:"iso";a:2:{i:1;s:2:"es";i:2;s:3:"spa";}s:7:"strings";a:1:{s:8:"continue";s:9:"Continuar";}}s:5:"es_CL";a:8:{s:8:"language";s:5:"es_CL";s:7:"version";s:5:"4.5.2";s:7:"updated";s:19:"2016-05-19 16:39:25";s:12:"english_name";s:15:"Spanish (Chile)";s:11:"native_name";s:17:"Español de Chile";s:7:"package";s:64:"https://downloads.wordpress.org/translation/core/4.5.2/es_CL.zip";s:3:"iso";a:2:{i:1;s:2:"es";i:2;s:3:"spa";}s:7:"strings";a:1:{s:8:"continue";s:9:"Continuar";}}s:5:"es_CO";a:8:{s:8:"language";s:5:"es_CO";s:7:"version";s:6:"4.3-RC";s:7:"updated";s:19:"2015-08-04 06:10:33";s:12:"english_name";s:18:"Spanish (Colombia)";s:11:"native_name";s:20:"Español de Colombia";s:7:"package";s:65:"https://downloads.wordpress.org/translation/core/4.3-RC/es_CO.zip";s:3:"iso";a:2:{i:1;s:2:"es";i:2;s:3:"spa";}s:7:"strings";a:1:{s:8:"continue";s:9:"Continuar";}}s:5:"es_ES";a:8:{s:8:"language";s:5:"es_ES";s:7:"version";s:5:"4.5.2";s:7:"updated";s:19:"2016-04-28 13:34:35";s:12:"english_name";s:15:"Spanish (Spain)";s:11:"native_name";s:8:"Español";s:7:"package";s:64:"https://downloads.wordpress.org/translation/core/4.5.2/es_ES.zip";s:3:"iso";a:1:{i:1;s:2:"es";}s:7:"strings";a:1:{s:8:"continue";s:9:"Continuar";}}s:5:"es_AR";a:8:{s:8:"language";s:5:"es_AR";s:7:"version";s:5:"4.5.2";s:7:"updated";s:19:"2016-04-19 21:32:12";s:12:"english_name";s:19:"Spanish (Argentina)";s:11:"native_name";s:21:"Español de Argentina";s:7:"package";s:64:"https://downloads.wordpress.org/translation/core/4.5.2/es_AR.zip";s:3:"iso";a:2:{i:1;s:2:"es";i:2;s:3:"spa";}s:7:"strings";a:1:{s:8:"continue";s:9:"Continuar";}}s:2:"et";a:8:{s:8:"language";s:2:"et";s:7:"version";s:5:"4.5.2";s:7:"updated";s:19:"2016-04-12 11:11:25";s:12:"english_name";s:8:"Estonian";s:11:"native_name";s:5:"Eesti";s:7:"package";s:61:"https://downloads.wordpress.org/translation/core/4.5.2/et.zip";s:3:"iso";a:2:{i:1;s:2:"et";i:2;s:3:"est";}s:7:"strings";a:1:{s:8:"continue";s:6:"Jätka";}}s:2:"eu";a:8:{s:8:"language";s:2:"eu";s:7:"version";s:5:"4.5.2";s:7:"updated";s:19:"2016-04-23 22:05:23";s:12:"english_name";s:6:"Basque";s:11:"native_name";s:7:"Euskara";s:7:"package";s:61:"https://downloads.wordpress.org/translation/core/4.5.2/eu.zip";s:3:"iso";a:2:{i:1;s:2:"eu";i:2;s:3:"eus";}s:7:"strings";a:1:{s:8:"continue";s:8:"Jarraitu";}}s:5:"fa_IR";a:8:{s:8:"language";s:5:"fa_IR";s:7:"version";s:5:"4.4.3";s:7:"updated";s:19:"2016-01-31 19:24:20";s:12:"english_name";s:7:"Persian";s:11:"native_name";s:10:"فارسی";s:7:"package";s:64:"https://downloads.wordpress.org/translation/core/4.4.3/fa_IR.zip";s:3:"iso";a:2:{i:1;s:2:"fa";i:2;s:3:"fas";}s:7:"strings";a:1:{s:8:"continue";s:10:"ادامه";}}s:2:"fi";a:8:{s:8:"language";s:2:"fi";s:7:"version";s:5:"4.5.2";s:7:"updated";s:19:"2016-04-10 18:44:50";s:12:"english_name";s:7:"Finnish";s:11:"native_name";s:5:"Suomi";s:7:"package";s:61:"https://downloads.wordpress.org/translation/core/4.5.2/fi.zip";s:3:"iso";a:2:{i:1;s:2:"fi";i:2;s:3:"fin";}s:7:"strings";a:1:{s:8:"continue";s:5:"Jatka";}}s:5:"fr_BE";a:8:{s:8:"language";s:5:"fr_BE";s:7:"version";s:5:"4.5.2";s:7:"updated";s:19:"2016-04-11 07:33:47";s:12:"english_name";s:16:"French (Belgium)";s:11:"native_name";s:21:"Français de Belgique";s:7:"package";s:64:"https://downloads.wordpress.org/translation/core/4.5.2/fr_BE.zip";s:3:"iso";a:2:{i:1;s:2:"fr";i:2;s:3:"fra";}s:7:"strings";a:1:{s:8:"continue";s:9:"Continuer";}}s:5:"fr_FR";a:8:{s:8:"language";s:5:"fr_FR";s:7:"version";s:5:"4.5.2";s:7:"updated";s:19:"2016-05-20 21:53:56";s:12:"english_name";s:15:"French (France)";s:11:"native_name";s:9:"Français";s:7:"package";s:64:"https://downloads.wordpress.org/translation/core/4.5.2/fr_FR.zip";s:3:"iso";a:1:{i:1;s:2:"fr";}s:7:"strings";a:1:{s:8:"continue";s:9:"Continuer";}}s:5:"fr_CA";a:8:{s:8:"language";s:5:"fr_CA";s:7:"version";s:5:"4.5.2";s:7:"updated";s:19:"2016-04-29 19:30:46";s:12:"english_name";s:15:"French (Canada)";s:11:"native_name";s:19:"Français du Canada";s:7:"package";s:64:"https://downloads.wordpress.org/translation/core/4.5.2/fr_CA.zip";s:3:"iso";a:2:{i:1;s:2:"fr";i:2;s:3:"fra";}s:7:"strings";a:1:{s:8:"continue";s:9:"Continuer";}}s:2:"gd";a:8:{s:8:"language";s:2:"gd";s:7:"version";s:5:"4.3.4";s:7:"updated";s:19:"2015-09-24 15:25:30";s:12:"english_name";s:15:"Scottish Gaelic";s:11:"native_name";s:9:"Gàidhlig";s:7:"package";s:61:"https://downloads.wordpress.org/translation/core/4.3.4/gd.zip";s:3:"iso";a:3:{i:1;s:2:"gd";i:2;s:3:"gla";i:3;s:3:"gla";}s:7:"strings";a:1:{s:8:"continue";s:15:"Lean air adhart";}}s:5:"gl_ES";a:8:{s:8:"language";s:5:"gl_ES";s:7:"version";s:5:"4.5.2";s:7:"updated";s:19:"2016-04-22 23:06:30";s:12:"english_name";s:8:"Galician";s:11:"native_name";s:6:"Galego";s:7:"package";s:64:"https://downloads.wordpress.org/translation/core/4.5.2/gl_ES.zip";s:3:"iso";a:2:{i:1;s:2:"gl";i:2;s:3:"glg";}s:7:"strings";a:1:{s:8:"continue";s:9:"Continuar";}}s:3:"haz";a:8:{s:8:"language";s:3:"haz";s:7:"version";s:5:"4.4.2";s:7:"updated";s:19:"2015-12-05 00:59:09";s:12:"english_name";s:8:"Hazaragi";s:11:"native_name";s:15:"هزاره گی";s:7:"package";s:62:"https://downloads.wordpress.org/translation/core/4.4.2/haz.zip";s:3:"iso";a:1:{i:3;s:3:"haz";}s:7:"strings";a:1:{s:8:"continue";s:10:"ادامه";}}s:5:"he_IL";a:8:{s:8:"language";s:5:"he_IL";s:7:"version";s:5:"4.5.2";s:7:"updated";s:19:"2016-04-16 13:14:11";s:12:"english_name";s:6:"Hebrew";s:11:"native_name";s:16:"עִבְרִית";s:7:"package";s:64:"https://downloads.wordpress.org/translation/core/4.5.2/he_IL.zip";s:3:"iso";a:1:{i:1;s:2:"he";}s:7:"strings";a:1:{s:8:"continue";s:8:"המשך";}}s:5:"hi_IN";a:8:{s:8:"language";s:5:"hi_IN";s:7:"version";s:5:"4.5.2";s:7:"updated";s:19:"2016-05-13 11:24:52";s:12:"english_name";s:5:"Hindi";s:11:"native_name";s:18:"हिन्दी";s:7:"package";s:64:"https://downloads.wordpress.org/translation/core/4.5.2/hi_IN.zip";s:3:"iso";a:2:{i:1;s:2:"hi";i:2;s:3:"hin";}s:7:"strings";a:1:{s:8:"continue";s:12:"जारी";}}s:2:"hr";a:8:{s:8:"language";s:2:"hr";s:7:"version";s:5:"4.5.2";s:7:"updated";s:19:"2016-05-07 12:13:44";s:12:"english_name";s:8:"Croatian";s:11:"native_name";s:8:"Hrvatski";s:7:"package";s:61:"https://downloads.wordpress.org/translation/core/4.5.2/hr.zip";s:3:"iso";a:2:{i:1;s:2:"hr";i:2;s:3:"hrv";}s:7:"strings";a:1:{s:8:"continue";s:7:"Nastavi";}}s:5:"hu_HU";a:8:{s:8:"language";s:5:"hu_HU";s:7:"version";s:5:"4.5.2";s:7:"updated";s:19:"2016-05-03 06:34:38";s:12:"english_name";s:9:"Hungarian";s:11:"native_name";s:6:"Magyar";s:7:"package";s:64:"https://downloads.wordpress.org/translation/core/4.5.2/hu_HU.zip";s:3:"iso";a:2:{i:1;s:2:"hu";i:2;s:3:"hun";}s:7:"strings";a:1:{s:8:"continue";s:10:"Folytatás";}}s:2:"hy";a:8:{s:8:"language";s:2:"hy";s:7:"version";s:5:"4.4.2";s:7:"updated";s:19:"2016-02-04 07:13:54";s:12:"english_name";s:8:"Armenian";s:11:"native_name";s:14:"Հայերեն";s:7:"package";s:61:"https://downloads.wordpress.org/translation/core/4.4.2/hy.zip";s:3:"iso";a:2:{i:1;s:2:"hy";i:2;s:3:"hye";}s:7:"strings";a:1:{s:8:"continue";s:20:"Շարունակել";}}s:5:"id_ID";a:8:{s:8:"language";s:5:"id_ID";s:7:"version";s:5:"4.5.2";s:7:"updated";s:19:"2016-05-06 12:11:53";s:12:"english_name";s:10:"Indonesian";s:11:"native_name";s:16:"Bahasa Indonesia";s:7:"package";s:64:"https://downloads.wordpress.org/translation/core/4.5.2/id_ID.zip";s:3:"iso";a:2:{i:1;s:2:"id";i:2;s:3:"ind";}s:7:"strings";a:1:{s:8:"continue";s:9:"Lanjutkan";}}s:5:"is_IS";a:8:{s:8:"language";s:5:"is_IS";s:7:"version";s:5:"4.5.2";s:7:"updated";s:19:"2016-04-30 15:18:26";s:12:"english_name";s:9:"Icelandic";s:11:"native_name";s:9:"Íslenska";s:7:"package";s:64:"https://downloads.wordpress.org/translation/core/4.5.2/is_IS.zip";s:3:"iso";a:2:{i:1;s:2:"is";i:2;s:3:"isl";}s:7:"strings";a:1:{s:8:"continue";s:6:"Áfram";}}s:5:"it_IT";a:8:{s:8:"language";s:5:"it_IT";s:7:"version";s:5:"4.5.2";s:7:"updated";s:19:"2016-05-21 08:19:48";s:12:"english_name";s:7:"Italian";s:11:"native_name";s:8:"Italiano";s:7:"package";s:64:"https://downloads.wordpress.org/translation/core/4.5.2/it_IT.zip";s:3:"iso";a:2:{i:1;s:2:"it";i:2;s:3:"ita";}s:7:"strings";a:1:{s:8:"continue";s:8:"Continua";}}s:2:"ja";a:8:{s:8:"language";s:2:"ja";s:7:"version";s:5:"4.5.2";s:7:"updated";s:19:"2016-04-27 00:36:15";s:12:"english_name";s:8:"Japanese";s:11:"native_name";s:9:"日本語";s:7:"package";s:61:"https://downloads.wordpress.org/translation/core/4.5.2/ja.zip";s:3:"iso";a:1:{i:1;s:2:"ja";}s:7:"strings";a:1:{s:8:"continue";s:9:"続ける";}}s:5:"ka_GE";a:8:{s:8:"language";s:5:"ka_GE";s:7:"version";s:5:"4.5.2";s:7:"updated";s:19:"2016-04-11 09:29:35";s:12:"english_name";s:8:"Georgian";s:11:"native_name";s:21:"ქართული";s:7:"package";s:64:"https://downloads.wordpress.org/translation/core/4.5.2/ka_GE.zip";s:3:"iso";a:2:{i:1;s:2:"ka";i:2;s:3:"kat";}s:7:"strings";a:1:{s:8:"continue";s:30:"გაგრძელება";}}s:5:"ko_KR";a:8:{s:8:"language";s:5:"ko_KR";s:7:"version";s:5:"4.5.2";s:7:"updated";s:19:"2016-05-08 02:07:38";s:12:"english_name";s:6:"Korean";s:11:"native_name";s:9:"한국어";s:7:"package";s:64:"https://downloads.wordpress.org/translation/core/4.5.2/ko_KR.zip";s:3:"iso";a:2:{i:1;s:2:"ko";i:2;s:3:"kor";}s:7:"strings";a:1:{s:8:"continue";s:6:"계속";}}s:5:"lt_LT";a:8:{s:8:"language";s:5:"lt_LT";s:7:"version";s:5:"4.5.2";s:7:"updated";s:19:"2016-04-10 06:34:16";s:12:"english_name";s:10:"Lithuanian";s:11:"native_name";s:15:"Lietuvių kalba";s:7:"package";s:64:"https://downloads.wordpress.org/translation/core/4.5.2/lt_LT.zip";s:3:"iso";a:2:{i:1;s:2:"lt";i:2;s:3:"lit";}s:7:"strings";a:1:{s:8:"continue";s:6:"Tęsti";}}s:5:"mk_MK";a:8:{s:8:"language";s:5:"mk_MK";s:7:"version";s:5:"4.5.2";s:7:"updated";s:19:"2016-05-12 13:55:28";s:12:"english_name";s:10:"Macedonian";s:11:"native_name";s:31:"Македонски јазик";s:7:"package";s:64:"https://downloads.wordpress.org/translation/core/4.5.2/mk_MK.zip";s:3:"iso";a:2:{i:1;s:2:"mk";i:2;s:3:"mkd";}s:7:"strings";a:1:{s:8:"continue";s:16:"Продолжи";}}s:2:"mr";a:8:{s:8:"language";s:2:"mr";s:7:"version";s:5:"4.5.2";s:7:"updated";s:19:"2016-05-16 06:42:31";s:12:"english_name";s:7:"Marathi";s:11:"native_name";s:15:"मराठी";s:7:"package";s:61:"https://downloads.wordpress.org/translation/core/4.5.2/mr.zip";s:3:"iso";a:2:{i:1;s:2:"mr";i:2;s:3:"mar";}s:7:"strings";a:1:{s:8:"continue";s:25:"सुरु ठेवा";}}s:5:"ms_MY";a:8:{s:8:"language";s:5:"ms_MY";s:7:"version";s:5:"4.4.3";s:7:"updated";s:19:"2016-01-28 05:41:39";s:12:"english_name";s:5:"Malay";s:11:"native_name";s:13:"Bahasa Melayu";s:7:"package";s:64:"https://downloads.wordpress.org/translation/core/4.4.3/ms_MY.zip";s:3:"iso";a:2:{i:1;s:2:"ms";i:2;s:3:"msa";}s:7:"strings";a:1:{s:8:"continue";s:8:"Teruskan";}}s:5:"my_MM";a:8:{s:8:"language";s:5:"my_MM";s:7:"version";s:6:"4.1.11";s:7:"updated";s:19:"2015-03-26 15:57:42";s:12:"english_name";s:17:"Myanmar (Burmese)";s:11:"native_name";s:15:"ဗမာစာ";s:7:"package";s:65:"https://downloads.wordpress.org/translation/core/4.1.11/my_MM.zip";s:3:"iso";a:2:{i:1;s:2:"my";i:2;s:3:"mya";}s:7:"strings";a:1:{s:8:"continue";s:54:"ဆက်လက်လုပ်ဆောင်ပါ။";}}s:5:"nb_NO";a:8:{s:8:"language";s:5:"nb_NO";s:7:"version";s:5:"4.5.2";s:7:"updated";s:19:"2016-04-13 12:35:50";s:12:"english_name";s:19:"Norwegian (Bokmål)";s:11:"native_name";s:13:"Norsk bokmål";s:7:"package";s:64:"https://downloads.wordpress.org/translation/core/4.5.2/nb_NO.zip";s:3:"iso";a:2:{i:1;s:2:"nb";i:2;s:3:"nob";}s:7:"strings";a:1:{s:8:"continue";s:8:"Fortsett";}}s:5:"nl_NL";a:8:{s:8:"language";s:5:"nl_NL";s:7:"version";s:5:"4.5.2";s:7:"updated";s:19:"2016-05-13 08:12:50";s:12:"english_name";s:5:"Dutch";s:11:"native_name";s:10:"Nederlands";s:7:"package";s:64:"https://downloads.wordpress.org/translation/core/4.5.2/nl_NL.zip";s:3:"iso";a:2:{i:1;s:2:"nl";i:2;s:3:"nld";}s:7:"strings";a:1:{s:8:"continue";s:8:"Doorgaan";}}s:12:"nl_NL_formal";a:8:{s:8:"language";s:12:"nl_NL_formal";s:7:"version";s:5:"4.4.3";s:7:"updated";s:19:"2016-01-20 13:35:50";s:12:"english_name";s:14:"Dutch (Formal)";s:11:"native_name";s:20:"Nederlands (Formeel)";s:7:"package";s:71:"https://downloads.wordpress.org/translation/core/4.4.3/nl_NL_formal.zip";s:3:"iso";a:2:{i:1;s:2:"nl";i:2;s:3:"nld";}s:7:"strings";a:1:{s:8:"continue";s:8:"Doorgaan";}}s:5:"nn_NO";a:8:{s:8:"language";s:5:"nn_NO";s:7:"version";s:5:"4.5.2";s:7:"updated";s:19:"2016-04-11 07:36:04";s:12:"english_name";s:19:"Norwegian (Nynorsk)";s:11:"native_name";s:13:"Norsk nynorsk";s:7:"package";s:64:"https://downloads.wordpress.org/translation/core/4.5.2/nn_NO.zip";s:3:"iso";a:2:{i:1;s:2:"nn";i:2;s:3:"nno";}s:7:"strings";a:1:{s:8:"continue";s:9:"Hald fram";}}s:3:"oci";a:8:{s:8:"language";s:3:"oci";s:7:"version";s:5:"4.5.2";s:7:"updated";s:19:"2016-05-11 06:50:43";s:12:"english_name";s:7:"Occitan";s:11:"native_name";s:7:"Occitan";s:7:"package";s:62:"https://downloads.wordpress.org/translation/core/4.5.2/oci.zip";s:3:"iso";a:2:{i:1;s:2:"oc";i:2;s:3:"oci";}s:7:"strings";a:1:{s:8:"continue";s:9:"Contunhar";}}s:5:"pl_PL";a:8:{s:8:"language";s:5:"pl_PL";s:7:"version";s:5:"4.5.2";s:7:"updated";s:19:"2016-05-18 16:39:27";s:12:"english_name";s:6:"Polish";s:11:"native_name";s:6:"Polski";s:7:"package";s:64:"https://downloads.wordpress.org/translation/core/4.5.2/pl_PL.zip";s:3:"iso";a:2:{i:1;s:2:"pl";i:2;s:3:"pol";}s:7:"strings";a:1:{s:8:"continue";s:9:"Kontynuuj";}}s:2:"ps";a:8:{s:8:"language";s:2:"ps";s:7:"version";s:6:"4.1.11";s:7:"updated";s:19:"2015-03-29 22:19:48";s:12:"english_name";s:6:"Pashto";s:11:"native_name";s:8:"پښتو";s:7:"package";s:62:"https://downloads.wordpress.org/translation/core/4.1.11/ps.zip";s:3:"iso";a:2:{i:1;s:2:"ps";i:2;s:3:"pus";}s:7:"strings";a:1:{s:8:"continue";s:19:"دوام ورکړه";}}s:5:"pt_BR";a:8:{s:8:"language";s:5:"pt_BR";s:7:"version";s:5:"4.5.2";s:7:"updated";s:19:"2016-05-16 13:10:26";s:12:"english_name";s:19:"Portuguese (Brazil)";s:11:"native_name";s:20:"Português do Brasil";s:7:"package";s:64:"https://downloads.wordpress.org/translation/core/4.5.2/pt_BR.zip";s:3:"iso";a:2:{i:1;s:2:"pt";i:2;s:3:"por";}s:7:"strings";a:1:{s:8:"continue";s:9:"Continuar";}}s:5:"pt_PT";a:8:{s:8:"language";s:5:"pt_PT";s:7:"version";s:5:"4.5.2";s:7:"updated";s:19:"2016-05-17 23:58:57";s:12:"english_name";s:21:"Portuguese (Portugal)";s:11:"native_name";s:10:"Português";s:7:"package";s:64:"https://downloads.wordpress.org/translation/core/4.5.2/pt_PT.zip";s:3:"iso";a:1:{i:1;s:2:"pt";}s:7:"strings";a:1:{s:8:"continue";s:9:"Continuar";}}s:5:"ro_RO";a:8:{s:8:"language";s:5:"ro_RO";s:7:"version";s:5:"4.5.2";s:7:"updated";s:19:"2016-05-16 14:37:58";s:12:"english_name";s:8:"Romanian";s:11:"native_name";s:8:"Română";s:7:"package";s:64:"https://downloads.wordpress.org/translation/core/4.5.2/ro_RO.zip";s:3:"iso";a:2:{i:1;s:2:"ro";i:2;s:3:"ron";}s:7:"strings";a:1:{s:8:"continue";s:9:"Continuă";}}s:5:"ru_RU";a:8:{s:8:"language";s:5:"ru_RU";s:7:"version";s:5:"4.5.2";s:7:"updated";s:19:"2016-04-13 18:04:14";s:12:"english_name";s:7:"Russian";s:11:"native_name";s:14:"Русский";s:7:"package";s:64:"https://downloads.wordpress.org/translation/core/4.5.2/ru_RU.zip";s:3:"iso";a:2:{i:1;s:2:"ru";i:2;s:3:"rus";}s:7:"strings";a:1:{s:8:"continue";s:20:"Продолжить";}}s:5:"sk_SK";a:8:{s:8:"language";s:5:"sk_SK";s:7:"version";s:5:"4.5.2";s:7:"updated";s:19:"2016-04-27 07:36:55";s:12:"english_name";s:6:"Slovak";s:11:"native_name";s:11:"Slovenčina";s:7:"package";s:64:"https://downloads.wordpress.org/translation/core/4.5.2/sk_SK.zip";s:3:"iso";a:2:{i:1;s:2:"sk";i:2;s:3:"slk";}s:7:"strings";a:1:{s:8:"continue";s:12:"Pokračovať";}}s:5:"sl_SI";a:8:{s:8:"language";s:5:"sl_SI";s:7:"version";s:5:"4.4.2";s:7:"updated";s:19:"2015-11-26 00:00:18";s:12:"english_name";s:9:"Slovenian";s:11:"native_name";s:13:"Slovenščina";s:7:"package";s:64:"https://downloads.wordpress.org/translation/core/4.4.2/sl_SI.zip";s:3:"iso";a:2:{i:1;s:2:"sl";i:2;s:3:"slv";}s:7:"strings";a:1:{s:8:"continue";s:8:"Nadaljuj";}}s:2:"sq";a:8:{s:8:"language";s:2:"sq";s:7:"version";s:5:"4.5.2";s:7:"updated";s:19:"2016-05-09 09:01:28";s:12:"english_name";s:8:"Albanian";s:11:"native_name";s:5:"Shqip";s:7:"package";s:61:"https://downloads.wordpress.org/translation/core/4.5.2/sq.zip";s:3:"iso";a:2:{i:1;s:2:"sq";i:2;s:3:"sqi";}s:7:"strings";a:1:{s:8:"continue";s:6:"Vazhdo";}}s:5:"sr_RS";a:8:{s:8:"language";s:5:"sr_RS";s:7:"version";s:5:"4.5.2";s:7:"updated";s:19:"2016-04-10 08:00:57";s:12:"english_name";s:7:"Serbian";s:11:"native_name";s:23:"Српски језик";s:7:"package";s:64:"https://downloads.wordpress.org/translation/core/4.5.2/sr_RS.zip";s:3:"iso";a:2:{i:1;s:2:"sr";i:2;s:3:"srp";}s:7:"strings";a:1:{s:8:"continue";s:14:"Настави";}}s:5:"sv_SE";a:8:{s:8:"language";s:5:"sv_SE";s:7:"version";s:5:"4.5.2";s:7:"updated";s:19:"2016-05-14 14:47:49";s:12:"english_name";s:7:"Swedish";s:11:"native_name";s:7:"Svenska";s:7:"package";s:64:"https://downloads.wordpress.org/translation/core/4.5.2/sv_SE.zip";s:3:"iso";a:2:{i:1;s:2:"sv";i:2;s:3:"swe";}s:7:"strings";a:1:{s:8:"continue";s:9:"Fortsätt";}}s:2:"th";a:8:{s:8:"language";s:2:"th";s:7:"version";s:5:"4.5.2";s:7:"updated";s:19:"2016-04-22 14:05:41";s:12:"english_name";s:4:"Thai";s:11:"native_name";s:9:"ไทย";s:7:"package";s:61:"https://downloads.wordpress.org/translation/core/4.5.2/th.zip";s:3:"iso";a:2:{i:1;s:2:"th";i:2;s:3:"tha";}s:7:"strings";a:1:{s:8:"continue";s:15:"ต่อไป";}}s:2:"tl";a:8:{s:8:"language";s:2:"tl";s:7:"version";s:5:"4.4.2";s:7:"updated";s:19:"2015-11-27 15:51:36";s:12:"english_name";s:7:"Tagalog";s:11:"native_name";s:7:"Tagalog";s:7:"package";s:61:"https://downloads.wordpress.org/translation/core/4.4.2/tl.zip";s:3:"iso";a:2:{i:1;s:2:"tl";i:2;s:3:"tgl";}s:7:"strings";a:1:{s:8:"continue";s:10:"Magpatuloy";}}s:5:"tr_TR";a:8:{s:8:"language";s:5:"tr_TR";s:7:"version";s:5:"4.5.2";s:7:"updated";s:19:"2016-04-21 01:31:12";s:12:"english_name";s:7:"Turkish";s:11:"native_name";s:8:"Türkçe";s:7:"package";s:64:"https://downloads.wordpress.org/translation/core/4.5.2/tr_TR.zip";s:3:"iso";a:2:{i:1;s:2:"tr";i:2;s:3:"tur";}s:7:"strings";a:1:{s:8:"continue";s:5:"Devam";}}s:5:"ug_CN";a:8:{s:8:"language";s:5:"ug_CN";s:7:"version";s:6:"4.1.11";s:7:"updated";s:19:"2015-03-26 16:45:38";s:12:"english_name";s:6:"Uighur";s:11:"native_name";s:9:"Uyƣurqə";s:7:"package";s:65:"https://downloads.wordpress.org/translation/core/4.1.11/ug_CN.zip";s:3:"iso";a:2:{i:1;s:2:"ug";i:2;s:3:"uig";}s:7:"strings";a:1:{s:8:"continue";s:26:"داۋاملاشتۇرۇش";}}s:2:"uk";a:8:{s:8:"language";s:2:"uk";s:7:"version";s:5:"4.5.2";s:7:"updated";s:19:"2016-05-03 13:19:01";s:12:"english_name";s:9:"Ukrainian";s:11:"native_name";s:20:"Українська";s:7:"package";s:61:"https://downloads.wordpress.org/translation/core/4.5.2/uk.zip";s:3:"iso";a:2:{i:1;s:2:"uk";i:2;s:3:"ukr";}s:7:"strings";a:1:{s:8:"continue";s:20:"Продовжити";}}s:2:"vi";a:8:{s:8:"language";s:2:"vi";s:7:"version";s:5:"4.4.2";s:7:"updated";s:19:"2015-12-09 01:01:25";s:12:"english_name";s:10:"Vietnamese";s:11:"native_name";s:14:"Tiếng Việt";s:7:"package";s:61:"https://downloads.wordpress.org/translation/core/4.4.2/vi.zip";s:3:"iso";a:2:{i:1;s:2:"vi";i:2;s:3:"vie";}s:7:"strings";a:1:{s:8:"continue";s:12:"Tiếp tục";}}s:5:"zh_CN";a:8:{s:8:"language";s:5:"zh_CN";s:7:"version";s:5:"4.5.2";s:7:"updated";s:19:"2016-04-17 03:29:01";s:12:"english_name";s:15:"Chinese (China)";s:11:"native_name";s:12:"简体中文";s:7:"package";s:64:"https://downloads.wordpress.org/translation/core/4.5.2/zh_CN.zip";s:3:"iso";a:2:{i:1;s:2:"zh";i:2;s:3:"zho";}s:7:"strings";a:1:{s:8:"continue";s:6:"继续";}}s:5:"zh_TW";a:8:{s:8:"language";s:5:"zh_TW";s:7:"version";s:5:"4.5.2";s:7:"updated";s:19:"2016-04-12 09:08:07";s:12:"english_name";s:16:"Chinese (Taiwan)";s:11:"native_name";s:12:"繁體中文";s:7:"package";s:64:"https://downloads.wordpress.org/translation/core/4.5.2/zh_TW.zip";s:3:"iso";a:2:{i:1;s:2:"zh";i:2;s:3:"zho";}s:7:"strings";a:1:{s:8:"continue";s:6:"繼續";}}}', 'yes'),
(563, '_transient_timeout_dash_88ae138922fe95674369b1cb3d215a2b', '1464063280', 'no'),
(564, '_transient_dash_88ae138922fe95674369b1cb3d215a2b', '<div class="rss-widget"><p><strong>RSS Error</strong>: WP HTTP Error: Could not resolve host: wordpress.org</p></div><div class="rss-widget"><p><strong>RSS Error</strong>: WP HTTP Error: Could not resolve host: planet.wordpress.org</p></div><div class="rss-widget"><ul></ul></div>', 'no'),
(565, '_transient_timeout_lpaddons_a2963ad2ecb5b77a51ca1ac3064b1071', '1464024414', 'no'),
(566, '_transient_lpaddons_a2963ad2ecb5b77a51ca1ac3064b1071', 'a:1:{s:24:"learnpress-fill-in-blank";a:17:{s:4:"name";s:24:"LearnPress Fill in Blank";s:4:"slug";s:24:"learnpress-fill-in-blank";s:7:"version";s:3:"1.0";s:6:"author";s:44:"<a href="http://thimpress.com">ThimPress</a>";s:14:"author_profile";s:38:"https://profiles.wordpress.org/thongta";s:12:"contributors";a:3:{s:9:"thimpress";s:0:"";s:6:"tunnhn";s:37:"https://profiles.wordpress.org/tunnhn";s:7:"thongta";s:38:"https://profiles.wordpress.org/thongta";}s:8:"requires";s:3:"3.8";s:6:"tested";s:5:"4.2.8";s:6:"rating";i:0;s:11:"num_ratings";s:1:"0";s:7:"ratings";a:5:{i:1;i:0;i:2;i:0;i:3;i:0;i:4;i:0;i:5;i:0;}s:15:"active_installs";i:2000;s:12:"last_updated";s:21:"2016-04-19 3:13am GMT";s:8:"homepage";s:31:"http://thimpress.com/learnpress";s:17:"short_description";s:64:"Fill in Blank question type for LearnPress WordPress LMS Plugin.";s:5:"icons";a:2:{s:2:"2x";s:71:"//ps.w.org/learnpress-fill-in-blank/assets/icon-256x256.png?rev=1192198";s:2:"1x";s:71:"//ps.w.org/learnpress-fill-in-blank/assets/icon-128x128.png?rev=1192198";}s:6:"source";s:2:"wp";}}', 'no'),
(567, '_transient_timeout_lp_more_add_ons', '1464024415', 'no');
INSERT INTO `wp_options` (`option_id`, `option_name`, `option_value`, `autoload`) VALUES
(568, '_transient_lp_more_add_ons', 'a:1:{s:24:"learnpress-fill-in-blank";a:17:{s:4:"name";s:24:"LearnPress Fill in Blank";s:4:"slug";s:24:"learnpress-fill-in-blank";s:7:"version";s:3:"1.0";s:6:"author";s:44:"<a href="http://thimpress.com">ThimPress</a>";s:14:"author_profile";s:38:"https://profiles.wordpress.org/thongta";s:12:"contributors";a:3:{s:9:"thimpress";s:0:"";s:6:"tunnhn";s:37:"https://profiles.wordpress.org/tunnhn";s:7:"thongta";s:38:"https://profiles.wordpress.org/thongta";}s:8:"requires";s:3:"3.8";s:6:"tested";s:5:"4.2.8";s:6:"rating";i:0;s:11:"num_ratings";s:1:"0";s:7:"ratings";a:5:{i:1;i:0;i:2;i:0;i:3;i:0;i:4;i:0;i:5;i:0;}s:15:"active_installs";i:2000;s:12:"last_updated";s:21:"2016-04-19 3:13am GMT";s:8:"homepage";s:31:"http://thimpress.com/learnpress";s:17:"short_description";s:64:"Fill in Blank question type for LearnPress WordPress LMS Plugin.";s:5:"icons";a:2:{s:2:"2x";s:71:"//ps.w.org/learnpress-fill-in-blank/assets/icon-256x256.png?rev=1192198";s:2:"1x";s:71:"//ps.w.org/learnpress-fill-in-blank/assets/icon-128x128.png?rev=1192198";}s:6:"source";s:2:"wp";}}', 'no'),
(569, '_site_transient_timeout_theme_roots', '1464026002', 'yes'),
(570, '_site_transient_theme_roots', 'a:5:{s:15:"academica-child";s:7:"/themes";s:9:"academica";s:7:"/themes";s:13:"twentyfifteen";s:7:"/themes";s:14:"twentyfourteen";s:7:"/themes";s:13:"twentysixteen";s:7:"/themes";}', 'yes');

-- --------------------------------------------------------

--
-- Table structure for table `wp_postmeta`
--

CREATE TABLE `wp_postmeta` (
  `meta_id` bigint(20) UNSIGNED NOT NULL,
  `post_id` bigint(20) UNSIGNED NOT NULL DEFAULT '0',
  `meta_key` varchar(255) COLLATE utf8mb4_unicode_ci DEFAULT NULL,
  `meta_value` longtext COLLATE utf8mb4_unicode_ci
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

--
-- Dumping data for table `wp_postmeta`
--

INSERT INTO `wp_postmeta` (`meta_id`, `post_id`, `meta_key`, `meta_value`) VALUES
(1, 2, '_wp_page_template', 'default'),
(4, 10, '_wp_attached_file', '2016/04/lean.jpg'),
(5, 10, '_wp_attachment_metadata', 'a:5:{s:5:"width";i:1200;s:6:"height";i:675;s:4:"file";s:16:"2016/04/lean.jpg";s:5:"sizes";a:5:{s:9:"thumbnail";a:4:{s:4:"file";s:16:"lean-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}s:6:"medium";a:4:{s:4:"file";s:16:"lean-300x169.jpg";s:5:"width";i:300;s:6:"height";i:169;s:9:"mime-type";s:10:"image/jpeg";}s:12:"medium_large";a:4:{s:4:"file";s:16:"lean-768x432.jpg";s:5:"width";i:768;s:6:"height";i:432;s:9:"mime-type";s:10:"image/jpeg";}s:5:"large";a:4:{s:4:"file";s:17:"lean-1024x576.jpg";s:5:"width";i:1024;s:6:"height";i:576;s:9:"mime-type";s:10:"image/jpeg";}s:14:"post-thumbnail";a:4:{s:4:"file";s:17:"lean-1200x675.jpg";s:5:"width";i:1200;s:6:"height";i:675;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}'),
(21, 16, '_learn_press_page', 'checkout'),
(22, 17, '_learn_press_page', 'cart'),
(23, 18, '_learn_press_page', 'profile'),
(24, 19, '_learn_press_page', 'courses'),
(25, 20, '_learn_press_page', 'become_a_teacher'),
(26, 21, '_edit_lock', '1462616049:1'),
(27, 21, '_edit_last', '1'),
(28, 21, '_admin_hidden_sections', NULL),
(29, 21, '_lpr_course_lesson_quiz', ''),
(30, 21, '_lp_course_status', 'publish'),
(31, 21, '_lp_duration', '10'),
(32, 21, '_lp_max_students', '1000'),
(33, 21, '_lp_students', '0'),
(34, 21, '_lp_retake_count', '0'),
(35, 21, '_lp_course_result', 'evaluate_lesson'),
(36, 21, '_lp_passing_condition', '50'),
(37, 21, '_lp_payment', 'no'),
(38, 21, '_lp_price', '0'),
(39, 21, '_lp_required_enroll', 'no'),
(40, 23, '_order_currency', 'USD'),
(41, 23, '_prices_include_tax', 'no'),
(42, 23, '_user_ip_address', '::1'),
(43, 23, '_user_agent', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/49.0.2623.110 Safari/537.36'),
(44, 23, '_user_id', '2'),
(45, 23, '_order_subtotal', '0'),
(46, 23, '_order_total', '0'),
(47, 23, '_order_key', 'order570a9c0d2341f'),
(48, 23, '_payment_method', ''),
(49, 23, '_payment_method_title', ''),
(50, 23, '_order_version', '1.0'),
(64, 27, '_menu_item_type', 'post_type'),
(65, 27, '_menu_item_menu_item_parent', '0'),
(66, 27, '_menu_item_object_id', '19'),
(67, 27, '_menu_item_object', 'page'),
(68, 27, '_menu_item_target', ''),
(69, 27, '_menu_item_classes', 'a:1:{i:0;s:0:"";}'),
(70, 27, '_menu_item_xfn', ''),
(71, 27, '_menu_item_url', ''),
(80, 30, '_order_currency', 'USD'),
(81, 30, '_prices_include_tax', 'no'),
(82, 30, '_user_ip_address', '::1'),
(83, 30, '_user_agent', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/49.0.2623.110 Safari/537.36'),
(84, 30, '_user_id', '1'),
(85, 30, '_order_subtotal', '0'),
(86, 30, '_order_total', '0'),
(87, 30, '_order_key', 'order570cf9d6f1e78'),
(88, 30, '_payment_method', ''),
(89, 30, '_payment_method_title', ''),
(90, 30, '_order_version', '1.0'),
(94, 32, '_lp_preview', 'yes'),
(95, 32, '_edit_lock', '1464023669:1'),
(96, 32, '_edit_last', '1'),
(97, 32, '_lp_course_result', 'no'),
(98, 32, '_lp_payment', 'no'),
(99, 34, '_lp_preview', 'yes'),
(100, 34, '_edit_lock', '1463776580:1'),
(101, 34, '_edit_last', '1'),
(102, 34, '_lp_course_result', 'no'),
(103, 34, '_lp_payment', 'no'),
(112, 21, '_wp_trash_meta_status', 'publish'),
(113, 21, '_wp_trash_meta_time', '1462616234'),
(114, 21, '_wp_desired_post_slug', 'html'),
(115, 39, '_lp_course_result', 'evaluate_lesson'),
(116, 39, '_lp_payment', 'no'),
(117, 39, '_lp_required_enroll', 'no'),
(118, 39, '_edit_lock', '1464022833:1'),
(119, 39, '_edit_last', '1'),
(120, 39, '_lpr_course_lesson_quiz', ''),
(121, 39, '_lp_course_status', 'publish'),
(122, 39, '_lp_duration', '10'),
(123, 39, '_lp_max_students', '1000'),
(124, 39, '_lp_students', '0'),
(125, 39, '_lp_retake_count', '0'),
(130, 43, '_lp_preview', 'yes'),
(131, 43, '_edit_lock', '1462616974:1'),
(132, 43, '_edit_last', '1'),
(133, 43, '_lp_course_result', 'no'),
(134, 43, '_lp_payment', 'no'),
(135, 49, '_edit_lock', '1462616941:1'),
(136, 49, '_edit_last', '1'),
(139, 49, '_wp_trash_meta_status', 'publish'),
(140, 49, '_wp_trash_meta_time', '1462617377'),
(141, 49, '_wp_desired_post_slug', 'test-code'),
(142, 51, '_lp_course_result', 'evaluate_lesson'),
(143, 51, '_lp_payment', 'no'),
(144, 51, '_lp_required_enroll', 'no'),
(145, 51, '_edit_lock', '1464022936:1'),
(146, 51, '_edit_last', '1'),
(147, 51, '_lpr_course_lesson_quiz', ''),
(148, 51, '_lp_course_status', 'publish'),
(149, 51, '_lp_duration', '10'),
(150, 51, '_lp_max_students', '1000'),
(151, 51, '_lp_students', '0'),
(152, 51, '_lp_retake_count', '0'),
(153, 53, '_lp_preview', 'yes'),
(154, 53, '_edit_lock', '1463840521:1'),
(155, 53, '_edit_last', '1'),
(156, 53, '_lp_course_result', 'no'),
(157, 53, '_lp_payment', 'no'),
(158, 55, '_edit_lock', '1464023000:1'),
(159, 55, '_edit_last', '1'),
(161, 57, '_menu_item_type', 'post_type'),
(162, 57, '_menu_item_menu_item_parent', '0'),
(163, 57, '_menu_item_object_id', '55'),
(164, 57, '_menu_item_object', 'page'),
(165, 57, '_menu_item_target', ''),
(166, 57, '_menu_item_classes', 'a:1:{i:0;s:0:"";}'),
(167, 57, '_menu_item_xfn', ''),
(168, 57, '_menu_item_url', ''),
(170, 58, '_edit_lock', '1464022059:1'),
(171, 58, '_edit_last', '1'),
(173, 60, '_menu_item_type', 'post_type'),
(174, 60, '_menu_item_menu_item_parent', '0'),
(175, 60, '_menu_item_object_id', '58'),
(176, 60, '_menu_item_object', 'page'),
(177, 60, '_menu_item_target', ''),
(178, 60, '_menu_item_classes', 'a:1:{i:0;s:0:"";}'),
(179, 60, '_menu_item_xfn', ''),
(180, 60, '_menu_item_url', ''),
(182, 61, '_menu_item_type', 'custom'),
(183, 61, '_menu_item_menu_item_parent', '0'),
(184, 61, '_menu_item_object_id', '61'),
(185, 61, '_menu_item_object', 'custom'),
(186, 61, '_menu_item_target', ''),
(187, 61, '_menu_item_classes', 'a:1:{i:0;s:0:"";}'),
(188, 61, '_menu_item_xfn', ''),
(189, 61, '_menu_item_url', '#bawloginout#'),
(195, 63, '_lp_course_result', 'evaluate_lesson'),
(196, 63, '_lp_payment', 'no'),
(197, 63, '_lp_required_enroll', 'no'),
(198, 63, '_edit_lock', '1464023964:1'),
(199, 63, '_edit_last', '1'),
(200, 63, '_lpr_course_lesson_quiz', ''),
(201, 63, '_lp_course_status', 'publish'),
(202, 63, '_lp_duration', '10'),
(203, 63, '_lp_max_students', '1000'),
(204, 63, '_lp_students', '0'),
(205, 63, '_lp_retake_count', '0'),
(206, 65, '_lp_preview', 'yes'),
(207, 65, '_edit_lock', '1463842949:1'),
(208, 65, '_edit_last', '1'),
(209, 65, '_lp_course_result', 'no'),
(210, 65, '_lp_payment', 'no'),
(211, 67, '_order_currency', 'USD'),
(212, 67, '_prices_include_tax', 'no'),
(213, 67, '_user_ip_address', '::1'),
(214, 67, '_user_agent', 'Mozilla/5.0 (Windows NT 6.3; WOW64; rv:46.0) Gecko/20100101 Firefox/46.0'),
(215, 67, '_user_id', '1'),
(216, 67, '_order_subtotal', '0'),
(217, 67, '_order_total', '0'),
(218, 67, '_order_key', 'order572dfa36a0d03'),
(219, 67, '_payment_method', ''),
(220, 67, '_payment_method_title', ''),
(221, 67, '_order_version', '1.0'),
(222, 39, '_admin_hidden_sections', NULL),
(230, 72, '_lp_preview', 'no'),
(244, 39, '_lp_editor_hidden', 'yes'),
(263, 81, '_lp_duration', '10'),
(264, 81, '_lp_preview', 'yes'),
(265, 81, '_lp_course_result', 'no'),
(266, 81, '_lp_payment', 'no'),
(267, 81, '_edit_lock', '1463776534:1'),
(268, 81, '_edit_last', '1'),
(281, 87, '_lp_duration', '10'),
(282, 87, '_lp_preview', 'yes'),
(283, 87, '_lp_course_result', 'no'),
(284, 87, '_lp_payment', 'no'),
(285, 87, '_edit_lock', '1463776728:1'),
(286, 87, '_edit_last', '1'),
(287, 90, '_lp_duration', '10'),
(288, 90, '_lp_preview', 'yes'),
(289, 90, '_lp_course_result', 'no'),
(290, 90, '_lp_payment', 'no'),
(291, 90, '_edit_lock', '1463776808:1'),
(292, 90, '_edit_last', '1'),
(293, 93, '_lp_duration', '10'),
(294, 93, '_lp_preview', 'yes'),
(295, 93, '_lp_course_result', 'no'),
(296, 93, '_lp_payment', 'no'),
(297, 93, '_edit_lock', '1463835507:1'),
(298, 93, '_edit_last', '1'),
(299, 96, '_lp_duration', '10'),
(300, 96, '_lp_preview', 'yes'),
(301, 96, '_lp_course_result', 'no'),
(302, 96, '_lp_payment', 'no'),
(303, 96, '_edit_lock', '1463835794:1'),
(304, 96, '_edit_last', '1'),
(305, 98, '_lp_duration', '10'),
(306, 98, '_lp_preview', 'yes'),
(307, 99, '_lp_duration', '10'),
(308, 99, '_lp_preview', 'yes'),
(309, 100, '_lp_duration', '10'),
(310, 100, '_lp_preview', 'yes'),
(311, 101, '_lp_duration', '10'),
(312, 101, '_lp_preview', 'yes'),
(313, 102, '_lp_duration', '10'),
(314, 102, '_lp_preview', 'yes'),
(315, 103, '_lp_duration', '10'),
(316, 103, '_lp_preview', 'yes'),
(317, 104, '_lp_duration', '10'),
(318, 104, '_lp_preview', 'yes'),
(319, 105, '_lp_duration', '10'),
(320, 105, '_lp_preview', 'yes'),
(321, 106, '_lp_duration', '10'),
(322, 106, '_lp_preview', 'yes'),
(323, 98, '_lp_course_result', 'no'),
(324, 98, '_lp_payment', 'no'),
(325, 98, '_edit_lock', '1463835931:1'),
(326, 98, '_edit_last', '1'),
(330, 99, '_lp_course_result', 'no'),
(331, 99, '_lp_payment', 'no'),
(332, 99, '_edit_lock', '1463837297:1'),
(333, 99, '_edit_last', '1'),
(334, 100, '_lp_course_result', 'no'),
(335, 100, '_lp_payment', 'no'),
(336, 100, '_edit_lock', '1463837472:1'),
(337, 100, '_edit_last', '1'),
(338, 101, '_lp_course_result', 'no'),
(339, 101, '_lp_payment', 'no'),
(340, 101, '_edit_lock', '1463837419:1'),
(341, 101, '_edit_last', '1'),
(342, 102, '_lp_course_result', 'no'),
(343, 102, '_lp_payment', 'no'),
(344, 102, '_edit_lock', '1463837475:1'),
(345, 102, '_edit_last', '1'),
(346, 103, '_lp_course_result', 'no'),
(347, 103, '_lp_payment', 'no'),
(348, 103, '_edit_lock', '1463837533:1'),
(349, 103, '_edit_last', '1'),
(350, 104, '_lp_course_result', 'no'),
(351, 104, '_lp_payment', 'no'),
(352, 104, '_edit_lock', '1463837562:1'),
(353, 104, '_edit_last', '1'),
(354, 105, '_lp_course_result', 'no'),
(355, 105, '_lp_payment', 'no'),
(356, 105, '_edit_lock', '1463837579:1'),
(357, 105, '_edit_last', '1'),
(358, 106, '_lp_course_result', 'no'),
(359, 106, '_lp_payment', 'no'),
(360, 106, '_edit_lock', '1463839921:1'),
(361, 106, '_edit_last', '1'),
(362, 118, '_lp_duration', '10'),
(363, 118, '_lp_preview', 'yes'),
(364, 119, '_lp_duration', '10'),
(365, 119, '_lp_preview', 'yes'),
(366, 120, '_lp_duration', '10'),
(367, 120, '_lp_preview', 'yes'),
(368, 121, '_lp_duration', '10'),
(369, 121, '_lp_preview', 'yes'),
(370, 122, '_lp_duration', '10'),
(371, 122, '_lp_preview', 'yes'),
(372, 123, '_lp_duration', '10'),
(373, 123, '_lp_preview', 'yes'),
(374, 124, '_lp_duration', '10'),
(375, 124, '_lp_preview', 'yes'),
(376, 125, '_lp_duration', '10'),
(377, 125, '_lp_preview', 'yes'),
(378, 126, '_lp_duration', '10'),
(379, 126, '_lp_preview', 'yes'),
(380, 127, '_lp_duration', '10'),
(381, 127, '_lp_preview', 'yes'),
(382, 128, '_lp_duration', '10'),
(383, 128, '_lp_preview', 'yes'),
(384, 129, '_lp_duration', '10'),
(385, 129, '_lp_preview', 'yes'),
(386, 130, '_lp_duration', '10'),
(387, 130, '_lp_preview', 'yes'),
(388, 131, '_lp_duration', '10'),
(389, 131, '_lp_preview', 'yes'),
(390, 132, '_lp_duration', '10'),
(391, 132, '_lp_preview', 'yes'),
(392, 118, '_lp_course_result', 'no'),
(393, 118, '_lp_payment', 'no'),
(394, 118, '_edit_lock', '1463840750:1'),
(395, 118, '_edit_last', '1'),
(396, 119, '_lp_course_result', 'no'),
(397, 119, '_lp_payment', 'no'),
(398, 119, '_edit_lock', '1463840818:1'),
(399, 119, '_edit_last', '1'),
(400, 120, '_lp_course_result', 'no'),
(401, 120, '_lp_payment', 'no'),
(402, 120, '_edit_lock', '1463840843:1'),
(403, 120, '_edit_last', '1'),
(404, 121, '_lp_course_result', 'no'),
(405, 121, '_lp_payment', 'no'),
(406, 121, '_edit_lock', '1463840896:1'),
(407, 121, '_edit_last', '1'),
(408, 122, '_lp_course_result', 'no'),
(409, 122, '_lp_payment', 'no'),
(410, 122, '_edit_lock', '1463840909:1'),
(411, 122, '_edit_last', '1'),
(412, 123, '_lp_course_result', 'no'),
(413, 123, '_lp_payment', 'no'),
(414, 123, '_edit_lock', '1463840942:1'),
(415, 123, '_edit_last', '1'),
(416, 124, '_lp_course_result', 'no'),
(417, 124, '_lp_payment', 'no'),
(418, 124, '_edit_lock', '1463840973:1'),
(419, 124, '_edit_last', '1'),
(420, 125, '_lp_course_result', 'no'),
(421, 125, '_lp_payment', 'no'),
(422, 125, '_edit_lock', '1463840998:1'),
(423, 125, '_edit_last', '1'),
(424, 126, '_lp_course_result', 'no'),
(425, 126, '_lp_payment', 'no'),
(426, 126, '_edit_lock', '1463841023:1'),
(427, 126, '_edit_last', '1'),
(428, 127, '_lp_course_result', 'no'),
(429, 127, '_lp_payment', 'no'),
(430, 127, '_edit_lock', '1463841054:1'),
(431, 127, '_edit_last', '1'),
(432, 128, '_lp_course_result', 'no'),
(433, 128, '_lp_payment', 'no'),
(434, 128, '_edit_lock', '1463841083:1'),
(435, 128, '_edit_last', '1'),
(436, 129, '_lp_course_result', 'no'),
(437, 129, '_lp_payment', 'no'),
(438, 129, '_edit_lock', '1463841107:1'),
(439, 129, '_edit_last', '1'),
(440, 130, '_lp_course_result', 'no'),
(441, 130, '_lp_payment', 'no'),
(442, 130, '_edit_lock', '1463841134:1'),
(443, 130, '_edit_last', '1'),
(444, 131, '_lp_course_result', 'no'),
(445, 131, '_lp_payment', 'no'),
(446, 131, '_edit_lock', '1463841173:1'),
(447, 131, '_edit_last', '1'),
(448, 132, '_lp_course_result', 'no'),
(449, 132, '_lp_payment', 'no'),
(450, 132, '_edit_lock', '1463841444:1'),
(451, 132, '_edit_last', '1'),
(601, 191, '_lp_duration', '10'),
(602, 191, '_lp_preview', 'yes'),
(603, 192, '_lp_duration', '10'),
(604, 192, '_lp_preview', 'yes'),
(605, 193, '_lp_duration', '10'),
(606, 193, '_lp_preview', 'yes'),
(607, 194, '_lp_duration', '10'),
(608, 194, '_lp_preview', 'yes'),
(609, 195, '_lp_duration', '10'),
(610, 195, '_lp_preview', 'yes'),
(611, 196, '_lp_duration', '10'),
(612, 196, '_lp_preview', 'yes'),
(613, 197, '_lp_duration', '10'),
(614, 197, '_lp_preview', 'yes'),
(615, 198, '_lp_duration', '10'),
(616, 198, '_lp_preview', 'yes'),
(617, 199, '_lp_duration', '10'),
(618, 199, '_lp_preview', 'yes'),
(619, 200, '_lp_duration', '10'),
(620, 200, '_lp_preview', 'yes'),
(621, 201, '_lp_duration', '10'),
(622, 201, '_lp_preview', 'yes'),
(623, 202, '_lp_duration', '10'),
(624, 202, '_lp_preview', 'yes'),
(625, 203, '_lp_duration', '10'),
(626, 203, '_lp_preview', 'yes'),
(627, 204, '_lp_duration', '10'),
(628, 204, '_lp_preview', 'yes'),
(629, 205, '_lp_duration', '10'),
(630, 205, '_lp_preview', 'yes'),
(631, 206, '_lp_duration', '10'),
(632, 206, '_lp_preview', 'yes'),
(633, 207, '_lp_duration', '10'),
(634, 207, '_lp_preview', 'yes'),
(635, 208, '_lp_duration', '10'),
(636, 208, '_lp_preview', 'yes'),
(637, 209, '_lp_duration', '10'),
(638, 209, '_lp_preview', 'yes'),
(639, 210, '_lp_duration', '10'),
(640, 210, '_lp_preview', 'yes'),
(641, 211, '_lp_duration', '10'),
(642, 211, '_lp_preview', 'yes'),
(643, 191, '_lp_course_result', 'no'),
(644, 191, '_lp_payment', 'no'),
(645, 191, '_edit_lock', '1463842313:1'),
(646, 191, '_edit_last', '1'),
(647, 192, '_lp_course_result', 'no'),
(648, 192, '_lp_payment', 'no'),
(649, 192, '_edit_lock', '1463842478:1'),
(650, 192, '_edit_last', '1'),
(651, 193, '_lp_course_result', 'no'),
(652, 193, '_lp_payment', 'no'),
(653, 193, '_edit_lock', '1463842353:1'),
(654, 193, '_edit_last', '1'),
(655, 194, '_lp_course_result', 'no'),
(656, 194, '_lp_payment', 'no'),
(657, 194, '_edit_lock', '1463842370:1'),
(658, 194, '_edit_last', '1'),
(659, 195, '_lp_course_result', 'no'),
(660, 195, '_lp_payment', 'no'),
(661, 195, '_edit_lock', '1463842381:1'),
(662, 195, '_edit_last', '1'),
(663, 196, '_lp_course_result', 'no'),
(664, 196, '_lp_payment', 'no'),
(665, 196, '_edit_lock', '1463842416:1'),
(666, 196, '_edit_last', '1'),
(667, 197, '_lp_course_result', 'no'),
(668, 197, '_lp_payment', 'no'),
(669, 197, '_edit_lock', '1463842445:1'),
(670, 197, '_edit_last', '1'),
(671, 198, '_lp_course_result', 'no'),
(672, 198, '_lp_payment', 'no'),
(673, 198, '_edit_lock', '1463842937:1'),
(674, 198, '_edit_last', '1'),
(675, 199, '_lp_course_result', 'no'),
(676, 199, '_lp_payment', 'no'),
(677, 199, '_edit_lock', '1463842484:1'),
(678, 199, '_edit_last', '1'),
(679, 200, '_lp_course_result', 'no'),
(680, 200, '_lp_payment', 'no'),
(681, 200, '_edit_lock', '1463842509:1'),
(682, 200, '_edit_last', '1'),
(683, 201, '_lp_course_result', 'no'),
(684, 201, '_lp_payment', 'no'),
(685, 201, '_edit_lock', '1463842543:1'),
(686, 201, '_edit_last', '1'),
(687, 202, '_lp_course_result', 'no'),
(688, 202, '_lp_payment', 'no'),
(689, 202, '_edit_lock', '1463842572:1'),
(690, 202, '_edit_last', '1'),
(691, 203, '_lp_course_result', 'no'),
(692, 203, '_lp_payment', 'no'),
(693, 203, '_edit_lock', '1463842594:1'),
(694, 203, '_edit_last', '1'),
(695, 204, '_lp_course_result', 'no'),
(696, 204, '_lp_payment', 'no'),
(697, 204, '_edit_lock', '1463842621:1'),
(698, 204, '_edit_last', '1'),
(699, 205, '_lp_course_result', 'no'),
(700, 205, '_lp_payment', 'no'),
(701, 205, '_edit_lock', '1463842645:1'),
(702, 205, '_edit_last', '1'),
(703, 206, '_lp_course_result', 'no'),
(704, 206, '_lp_payment', 'no'),
(705, 206, '_edit_lock', '1463842675:1'),
(706, 206, '_edit_last', '1'),
(707, 230, '_lp_duration', '10'),
(708, 230, '_lp_preview', 'yes'),
(709, 230, '_lp_course_result', 'no'),
(710, 230, '_lp_payment', 'no'),
(711, 230, '_edit_lock', '1463842726:1'),
(712, 230, '_edit_last', '1'),
(713, 208, '_lp_course_result', 'no'),
(714, 208, '_lp_payment', 'no'),
(715, 208, '_edit_lock', '1463842776:1'),
(716, 208, '_edit_last', '1'),
(717, 207, '_lp_course_result', 'no'),
(718, 207, '_lp_payment', 'no'),
(719, 207, '_edit_lock', '1463842847:1'),
(720, 207, '_edit_last', '1'),
(721, 209, '_lp_course_result', 'no'),
(722, 209, '_lp_payment', 'no'),
(723, 209, '_edit_lock', '1463842866:1'),
(724, 209, '_edit_last', '1'),
(725, 210, '_lp_course_result', 'no'),
(726, 210, '_lp_payment', 'no'),
(727, 210, '_edit_lock', '1463842894:1'),
(728, 210, '_edit_last', '1'),
(729, 211, '_lp_course_result', 'no'),
(730, 211, '_lp_payment', 'no'),
(731, 211, '_edit_lock', '1463842925:1'),
(732, 211, '_edit_last', '1'),
(733, 238, '_wp_attached_file', '2016/05/logoInvatacel.png'),
(734, 238, '_wp_attachment_metadata', 'a:5:{s:5:"width";i:220;s:6:"height";i:111;s:4:"file";s:25:"2016/05/logoInvatacel.png";s:5:"sizes";a:2:{s:9:"thumbnail";a:4:{s:4:"file";s:25:"logoInvatacel-150x111.png";s:5:"width";i:150;s:6:"height";i:111;s:9:"mime-type";s:9:"image/png";}s:31:"academica-featured-posts-widget";a:4:{s:4:"file";s:23:"logoInvatacel-75x50.png";s:5:"width";i:75;s:6:"height";i:50;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}'),
(737, 240, '_wp_attached_file', '2016/05/download-e1463947491115.png'),
(738, 240, '_wp_attachment_metadata', 'a:5:{s:5:"width";i:34;s:6:"height";i:30;s:4:"file";s:35:"2016/05/download-e1463947491115.png";s:5:"sizes";a:2:{s:9:"thumbnail";a:4:{s:4:"file";s:20:"download-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:31:"academica-featured-posts-widget";a:4:{s:4:"file";s:18:"download-75x50.png";s:5:"width";i:75;s:6:"height";i:50;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}'),
(739, 240, '_edit_lock', '1463947370:1'),
(740, 240, '_wp_attachment_backup_sizes', 'a:1:{s:9:"full-orig";a:3:{s:5:"width";i:240;s:6:"height";i:210;s:4:"file";s:12:"download.png";}}'),
(742, 241, '_edit_lock', '1463950907:1'),
(743, 241, '_edit_last', '1'),
(744, 241, 'settings', 'a:26:{s:9:"animation";s:5:"slide";s:10:"slideSpeed";s:1:"1";s:16:"descriptionSpeed";s:3:"0.4";s:13:"intervalSpeed";s:1:"5";s:13:"slidesPerView";s:1:"1";s:8:"maxWidth";s:1:"0";s:11:"aspectRatio";s:3:"3:1";s:6:"height";s:3:"200";s:14:"imageBehaviour";s:7:"natural";s:15:"showDescription";s:4:"true";s:15:"hideDescription";s:4:"true";s:27:"preserveSlideshowDimensions";s:5:"false";s:20:"enableResponsiveness";s:4:"true";s:4:"play";s:4:"true";s:4:"loop";s:4:"true";s:12:"pauseOnHover";s:4:"true";s:12:"controllable";s:4:"true";s:21:"hideNavigationButtons";s:5:"false";s:14:"showPagination";s:4:"true";s:14:"hidePagination";s:4:"true";s:12:"controlPanel";s:5:"false";s:16:"hideControlPanel";s:4:"true";s:15:"waitUntilLoaded";s:4:"true";s:15:"showLoadingIcon";s:4:"true";s:6:"random";s:5:"false";s:11:"avoidFilter";s:4:"true";}'),
(745, 241, 'styleSettings', 'a:1:{s:5:"style";s:15:"style-light.css";}'),
(746, 241, 'slides', 'a:1:{i:1;a:9:{s:17:"titleElementTagID";s:1:"0";s:5:"title";s:0:"";s:23:"descriptionElementTagID";s:1:"0";s:11:"description";s:94:"Live as if you were to die tomorrow. Learn as if you were to live forever.\r\n\r\nMahatma Gandhi\r\n";s:9:"textColor";s:6:"000000";s:5:"color";s:6:"FFFFFF";s:3:"url";s:0:"";s:9:"urlTarget";s:5:"_self";s:4:"type";s:4:"text";}}'),
(747, 245, 'ml-slider_settings', 'a:34:{s:4:"type";s:4:"flex";s:6:"random";b:0;s:8:"cssClass";s:0:"";s:8:"printCss";b:1;s:7:"printJs";b:1;s:5:"width";i:700;s:6:"height";i:300;s:3:"spw";i:7;s:3:"sph";i:5;s:5:"delay";i:3000;s:6:"sDelay";i:30;s:7:"opacity";d:0.69999999999999996;s:10:"titleSpeed";i:500;s:6:"effect";s:6:"random";s:10:"navigation";b:1;s:5:"links";b:1;s:10:"hoverPause";b:1;s:5:"theme";s:7:"default";s:9:"direction";s:10:"horizontal";s:7:"reverse";b:0;s:14:"animationSpeed";i:600;s:8:"prevText";s:1:"<";s:8:"nextText";s:1:">";s:6:"slices";i:15;s:6:"center";b:0;s:9:"smartCrop";b:1;s:12:"carouselMode";b:0;s:14:"carouselMargin";i:5;s:6:"easing";s:6:"linear";s:8:"autoPlay";b:1;s:11:"thumb_width";i:150;s:12:"thumb_height";i:100;s:9:"fullWidth";b:0;s:10:"noConflict";b:1;}'),
(749, 251, '_wp_attached_file', '2016/05/js.png'),
(750, 251, '_wp_attachment_metadata', 'a:5:{s:5:"width";i:225;s:6:"height";i:225;s:4:"file";s:14:"2016/05/js.png";s:5:"sizes";a:2:{s:9:"thumbnail";a:4:{s:4:"file";s:14:"js-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:31:"academica-featured-posts-widget";a:4:{s:4:"file";s:12:"js-75x50.png";s:5:"width";i:75;s:6:"height";i:50;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}'),
(751, 63, '_thumbnail_id', '251'),
(752, 252, '_wp_attached_file', '2016/05/html.png'),
(753, 252, '_wp_attachment_metadata', 'a:5:{s:5:"width";i:225;s:6:"height";i:225;s:4:"file";s:16:"2016/05/html.png";s:5:"sizes";a:2:{s:9:"thumbnail";a:4:{s:4:"file";s:16:"html-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:31:"academica-featured-posts-widget";a:4:{s:4:"file";s:14:"html-75x50.png";s:5:"width";i:75;s:6:"height";i:50;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}'),
(754, 39, '_thumbnail_id', '252'),
(755, 253, '_wp_attached_file', '2016/05/pic_angular.jpg'),
(756, 253, '_wp_attachment_metadata', 'a:5:{s:5:"width";i:225;s:6:"height";i:225;s:4:"file";s:23:"2016/05/pic_angular.jpg";s:5:"sizes";a:2:{s:9:"thumbnail";a:4:{s:4:"file";s:23:"pic_angular-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}s:31:"academica-featured-posts-widget";a:4:{s:4:"file";s:21:"pic_angular-75x50.jpg";s:5:"width";i:75;s:6:"height";i:50;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}'),
(757, 51, '_thumbnail_id', '253'),
(758, 19, '_edit_lock', '1464024022:1'),
(759, 254, '_menu_item_type', 'post_type'),
(760, 254, '_menu_item_menu_item_parent', '0'),
(761, 254, '_menu_item_object_id', '63'),
(762, 254, '_menu_item_object', 'lp_course'),
(763, 254, '_menu_item_target', ''),
(764, 254, '_menu_item_classes', 'a:1:{i:0;s:0:"";}'),
(765, 254, '_menu_item_xfn', ''),
(766, 254, '_menu_item_url', ''),
(768, 255, '_menu_item_type', 'post_type'),
(769, 255, '_menu_item_menu_item_parent', '0'),
(770, 255, '_menu_item_object_id', '51'),
(771, 255, '_menu_item_object', 'lp_course'),
(772, 255, '_menu_item_target', ''),
(773, 255, '_menu_item_classes', 'a:1:{i:0;s:0:"";}'),
(774, 255, '_menu_item_xfn', ''),
(775, 255, '_menu_item_url', ''),
(777, 256, '_menu_item_type', 'post_type'),
(778, 256, '_menu_item_menu_item_parent', '0'),
(779, 256, '_menu_item_object_id', '39'),
(780, 256, '_menu_item_object', 'lp_course'),
(781, 256, '_menu_item_target', ''),
(782, 256, '_menu_item_classes', 'a:1:{i:0;s:0:"";}'),
(783, 256, '_menu_item_xfn', ''),
(784, 256, '_menu_item_url', '');

-- --------------------------------------------------------

--
-- Table structure for table `wp_posts`
--

CREATE TABLE `wp_posts` (
  `ID` bigint(20) UNSIGNED NOT NULL,
  `post_author` bigint(20) UNSIGNED NOT NULL DEFAULT '0',
  `post_date` datetime NOT NULL DEFAULT '0000-00-00 00:00:00',
  `post_date_gmt` datetime NOT NULL DEFAULT '0000-00-00 00:00:00',
  `post_content` longtext COLLATE utf8mb4_unicode_ci NOT NULL,
  `post_title` text COLLATE utf8mb4_unicode_ci NOT NULL,
  `post_excerpt` text COLLATE utf8mb4_unicode_ci NOT NULL,
  `post_status` varchar(20) COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT 'publish',
  `comment_status` varchar(20) COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT 'open',
  `ping_status` varchar(20) COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT 'open',
  `post_password` varchar(20) COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT '',
  `post_name` varchar(200) COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT '',
  `to_ping` text COLLATE utf8mb4_unicode_ci NOT NULL,
  `pinged` text COLLATE utf8mb4_unicode_ci NOT NULL,
  `post_modified` datetime NOT NULL DEFAULT '0000-00-00 00:00:00',
  `post_modified_gmt` datetime NOT NULL DEFAULT '0000-00-00 00:00:00',
  `post_content_filtered` longtext COLLATE utf8mb4_unicode_ci NOT NULL,
  `post_parent` bigint(20) UNSIGNED NOT NULL DEFAULT '0',
  `guid` varchar(255) COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT '',
  `menu_order` int(11) NOT NULL DEFAULT '0',
  `post_type` varchar(20) COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT 'post',
  `post_mime_type` varchar(100) COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT '',
  `comment_count` bigint(20) NOT NULL DEFAULT '0'
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

--
-- Dumping data for table `wp_posts`
--

INSERT INTO `wp_posts` (`ID`, `post_author`, `post_date`, `post_date_gmt`, `post_content`, `post_title`, `post_excerpt`, `post_status`, `comment_status`, `ping_status`, `post_password`, `post_name`, `to_ping`, `pinged`, `post_modified`, `post_modified_gmt`, `post_content_filtered`, `post_parent`, `guid`, `menu_order`, `post_type`, `post_mime_type`, `comment_count`) VALUES
(2, 1, '2016-04-09 11:31:31', '2016-04-09 11:31:31', 'This is an example page. It''s different from a blog post because it will stay in one place and will show up in your site navigation (in most themes). Most people start with an About page that introduces them to potential site visitors. It might say something like this:\n\n<blockquote>Hi there! I''m a bike messenger by day, aspiring actor by night, and this is my website. I live in Los Angeles, have a great dog named Jack, and I like pi&#241;a coladas. (And gettin'' caught in the rain.)</blockquote>\n\n...or something like this:\n\n<blockquote>The XYZ Doohickey Company was founded in 1971, and has been providing quality doohickeys to the public ever since. Located in Gotham City, XYZ employs over 2,000 people and does all kinds of awesome things for the Gotham community.</blockquote>\n\nAs a new WordPress user, you should go to <a href="http://localhost/invatacel/wp-admin/">your dashboard</a> to delete this page and create new pages for your content. Have fun!', 'Sample Page', '', 'publish', 'closed', 'open', '', 'sample-page', '', '', '2016-04-09 11:31:31', '2016-04-09 11:31:31', '', 0, 'http://localhost/invatacel/?page_id=2', 0, 'page', '', 0),
(10, 1, '2016-04-10 17:34:07', '2016-04-10 17:34:07', '', 'lean', '', 'inherit', 'open', 'closed', '', 'lean', '', '', '2016-04-10 17:34:07', '2016-04-10 17:34:07', '', 0, 'http://localhost/invatacel/wp-content/uploads/2016/04/lean.jpg', 0, 'attachment', 'image/jpeg', 0),
(11, 2, '2016-04-10 18:02:48', '2016-04-10 18:02:48', '[studypress_child id=1]', 'HTML', 'Tutorial HTML', 'publish', 'closed', 'closed', '', 'html', '', '', '2016-04-10 18:02:49', '2016-04-10 18:02:49', '', 0, 'http://localhost/invatacel/course/html/', 0, 'course', '', 0),
(16, 2, '2016-04-10 18:28:34', '2016-04-10 18:28:34', '', 'LP Checkout', '', 'publish', 'closed', 'closed', '', 'lp-checkout', '', '', '2016-04-10 18:28:34', '2016-04-10 18:28:34', '', 0, 'http://localhost/invatacel/lp-checkout/', 0, 'page', '', 0),
(17, 2, '2016-04-10 18:28:34', '2016-04-10 18:28:34', '', 'LP Cart', '', 'publish', 'closed', 'closed', '', 'lp-cart', '', '', '2016-04-10 18:28:34', '2016-04-10 18:28:34', '', 0, 'http://localhost/invatacel/lp-cart/', 0, 'page', '', 0),
(18, 2, '2016-04-10 18:28:35', '2016-04-10 18:28:35', '', 'LP Profile', '', 'publish', 'closed', 'closed', '', 'lp-profile', '', '', '2016-04-10 18:28:35', '2016-04-10 18:28:35', '', 0, 'http://localhost/invatacel/lp-profile/', 0, 'page', '', 0),
(19, 2, '2016-04-10 18:28:35', '2016-04-10 18:28:35', '', 'LP Courses', '', 'publish', 'closed', 'closed', '', 'lp-courses', '', '', '2016-04-10 18:28:35', '2016-04-10 18:28:35', '', 0, 'http://localhost/invatacel/lp-courses/', 0, 'page', '', 0),
(20, 2, '2016-04-10 18:28:35', '2016-04-10 18:28:35', '', 'LP Become A Teacher', '', 'publish', 'closed', 'closed', '', 'lp-become-a-teacher', '', '', '2016-04-10 18:28:35', '2016-04-10 18:28:35', '', 0, 'http://localhost/invatacel/lp-become-a-teacher/', 0, 'page', '', 0),
(21, 2, '2016-04-10 18:33:14', '2016-04-10 18:33:14', 'With HTML you can create your own Web site.\r\n\r\nThis tutorial teaches you everything about HTML.\r\n\r\nHTML is easy to learn - You will enjoy it.', 'HTML', '', 'trash', 'open', 'closed', '', 'html__trashed', '', '', '2016-05-07 10:17:14', '2016-05-07 10:17:14', '', 0, 'http://localhost/invatacel/?post_type=lp_course&#038;p=21', 0, 'lp_course', '', 0),
(22, 2, '2016-04-10 18:31:27', '2016-04-10 18:31:27', '', 'HTML', '', 'inherit', 'closed', 'closed', '', '21-revision-v1', '', '', '2016-04-10 18:31:27', '2016-04-10 18:31:27', '', 21, 'http://localhost/invatacel/2016/04/10/21-revision-v1/', 0, 'revision', '', 0),
(23, 1, '2016-04-10 18:31:40', '2016-04-10 18:31:40', '', 'Order on Sunday 10th April 2016 06:31:40 PM', '', 'lp-completed', 'open', 'closed', '', 'order-on-sunday-10th-april-2016-063140-pm', '', '', '2016-04-10 18:31:40', '2016-04-10 18:31:40', '', 0, 'http://localhost/invatacel/lp_order/order-on-sunday-10th-april-2016-063140-pm/', 0, 'lp_order', '', 0),
(27, 2, '2016-04-10 18:44:58', '2016-04-10 18:44:58', '', 'Courses', '', 'publish', 'closed', 'closed', '', '27', '', '', '2016-05-07 11:05:57', '2016-05-07 11:05:57', '', 0, 'http://localhost/invatacel/?p=27', 2, 'nav_menu_item', '', 0),
(30, 1, '2016-04-12 13:36:22', '2016-04-12 13:36:22', '', 'Order on Tuesday 12th April 2016 01:36:22 PM', '', 'lp-completed', 'open', 'closed', '', 'order-on-tuesday-12th-april-2016-013622-pm', '', '', '2016-04-12 13:36:22', '2016-04-12 13:36:22', '', 0, 'http://localhost/invatacel/lp_order/order-on-tuesday-12th-april-2016-013622-pm/', 0, 'lp_order', '', 0),
(32, 1, '2016-05-07 10:05:32', '2016-05-07 10:05:32', 'Copy this example in a Notepad file, then save as .html file and open the saved file in a browser.\r\n\r\nEx:\r\n\r\n&lt;!DOCTYPE html&gt;\r\n&lt;html&gt;\r\n&lt;body&gt;\r\n\r\n&lt;h1&gt;My First Heading&lt;/h1&gt;\r\n\r\n&lt;p&gt;My first paragraph.&lt;/p&gt;\r\n\r\n&lt;/body&gt;\r\n&lt;/html&gt;\r\n<h2>HTML Headings</h2>\r\nHTML headings are defined with the <strong>&lt;h1&gt;</strong> to <strong>&lt;h6&gt;</strong> tags:\r\n\r\n&lt;h1&gt;This is a heading&lt;/h1&gt;\r\n&lt;h2&gt;This is a heading&lt;/h2&gt;\r\n&lt;h3&gt;This is a heading&lt;/h3&gt;\r\n<h2>HTML Paragraphs</h2>\r\nHTML paragraphs are defined with the <strong>&lt;p&gt;</strong> tag:\r\n\r\n&lt;p&gt;This is a paragraph.&lt;/p&gt;\r\n&lt;p&gt;This is another paragraph.&lt;/p&gt;', 'Basic Example', '', 'publish', 'closed', 'closed', '', 'basic-example', '', '', '2016-05-07 10:05:32', '2016-05-07 10:05:32', '', 0, 'http://localhost/invatacel/?post_type=lp_lesson&#038;p=32', 0, 'lp_lesson', '', 0),
(33, 1, '2016-05-07 10:05:32', '2016-05-07 10:05:32', 'Copy this example in a Notepad file, then save as .html file and open the saved file in a browser.\r\n\r\nEx:\r\n\r\n&lt;!DOCTYPE html&gt;\r\n&lt;html&gt;\r\n&lt;body&gt;\r\n\r\n&lt;h1&gt;My First Heading&lt;/h1&gt;\r\n\r\n&lt;p&gt;My first paragraph.&lt;/p&gt;\r\n\r\n&lt;/body&gt;\r\n&lt;/html&gt;\r\n<h2>HTML Headings</h2>\r\nHTML headings are defined with the <strong>&lt;h1&gt;</strong> to <strong>&lt;h6&gt;</strong> tags:\r\n\r\n&lt;h1&gt;This is a heading&lt;/h1&gt;\r\n&lt;h2&gt;This is a heading&lt;/h2&gt;\r\n&lt;h3&gt;This is a heading&lt;/h3&gt;\r\n<h2>HTML Paragraphs</h2>\r\nHTML paragraphs are defined with the <strong>&lt;p&gt;</strong> tag:\r\n\r\n&lt;p&gt;This is a paragraph.&lt;/p&gt;\r\n&lt;p&gt;This is another paragraph.&lt;/p&gt;', 'Basic Example', '', 'inherit', 'closed', 'closed', '', '32-revision-v1', '', '', '2016-05-07 10:05:32', '2016-05-07 10:05:32', '', 32, 'http://localhost/invatacel/2016/05/07/32-revision-v1/', 0, 'revision', '', 0),
(34, 1, '2016-05-07 10:13:07', '2016-05-07 10:13:07', 'HTML <strong>documents</strong> are made up by HTML <strong>elements</strong>.\r\n<h2>HTML Elements</h2>\r\nHTML elements are written with a <strong>start</strong> tag, with an <strong>end</strong> tag, with the <strong>content</strong> in between:\r\n<div class="htmlHigh">&lt;tagname&gt;content&lt;/tagname&gt;</div>\r\nThe HTML <strong>element</strong> is everything from the start tag to the end tag:\r\n<div class="htmlHigh">&lt;p&gt;My first HTML paragraph.&lt;/p&gt;</div>\r\n<div class="htmlHigh"></div>\r\n<div class="htmlHigh">\r\n<table class="w3-table-all notranslate">\r\n<tbody>\r\n<tr>\r\n<th>Start tag</th>\r\n<th>Element content</th>\r\n<th>End tag</th>\r\n</tr>\r\n<tr>\r\n<td>&lt;h1&gt;</td>\r\n<td>My First Heading</td>\r\n<td>&lt;/h1&gt;</td>\r\n</tr>\r\n<tr>\r\n<td>&lt;p&gt;</td>\r\n<td>My first paragraph.</td>\r\n<td>&lt;/p&gt;</td>\r\n</tr>\r\n<tr>\r\n<td>&lt;br&gt;</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n&nbsp;\r\n\r\n</div>\r\n<table class="lamp">\r\n<tbody>\r\n<tr>\r\n<td>Some HTML elements do not have an end tag.</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n&nbsp;\r\n<h2>Nested HTML Elements</h2>\r\nHTML elements can be nested (elements can contain elements).\r\n\r\nAll HTML documents consist of nested HTML elements.\r\n\r\nThis example contains 4 HTML elements:\r\n\r\n&nbsp;\r\n\r\nEx:\r\n\r\n[code language="html"]\r\n&lt;!DOCTYPE html&gt;\r\n&lt;html&gt;\r\n&lt;body&gt;\r\n\r\n&lt;h1&gt;My First Heading&lt;/h1&gt;\r\n&lt;p&gt;My first paragraph.&lt;/p&gt;\r\n\r\n&lt;/body&gt;\r\n&lt;/html&gt;\r\n\r\n[/code]\r\n\r\n&nbsp;\r\n<h2>HTML Example Explained</h2>\r\nThe <strong>&lt;html&gt;</strong> element defines the <strong>whole document</strong>.\r\n\r\nIt has a <strong>start</strong> tag &lt;html&gt; and an <strong>end</strong> tag &lt;/html&gt;.\r\n\r\nThe element <strong>content</strong> is another HTML element (the &lt;body&gt; element).\r\n\r\n[code language="html"]\r\n\r\n&lt;html&gt;\r\n&lt;body&gt;\r\n\r\n&lt;h1&gt;My First Heading&lt;/h1&gt;\r\n&lt;p&gt;My first paragraph.&lt;/p&gt;\r\n\r\n&lt;/body&gt;\r\n&lt;/html&gt;\r\n\r\n[/code]', 'HTML Elements', '', 'publish', 'closed', 'closed', '', 'html-elements', '', '', '2016-05-20 20:38:23', '2016-05-20 20:38:23', '', 0, 'http://localhost/invatacel/?post_type=lp_lesson&#038;p=34', 0, 'lp_lesson', '', 0),
(35, 1, '2016-05-07 10:13:07', '2016-05-07 10:13:07', 'HTML <strong>documents</strong> are made up by HTML <strong>elements</strong>.\r\n<h2>HTML Elements</h2>\r\nHTML elements are written with a <strong>start</strong> tag, with an <strong>end</strong> tag, with the <strong>content</strong> in between:\r\n<div class="htmlHigh">&lt;tagname&gt;content&lt;/tagname&gt;</div>\r\nThe HTML <strong>element</strong> is everything from the start tag to the end tag:\r\n<div class="htmlHigh">&lt;p&gt;My first HTML paragraph.&lt;/p&gt;</div>\r\n<div class="htmlHigh"></div>\r\n<div class="htmlHigh">\r\n<table class="w3-table-all notranslate">\r\n<tbody>\r\n<tr>\r\n<th>Start tag</th>\r\n<th>Element content</th>\r\n<th>End tag</th>\r\n</tr>\r\n<tr>\r\n<td>&lt;h1&gt;</td>\r\n<td>My First Heading</td>\r\n<td>&lt;/h1&gt;</td>\r\n</tr>\r\n<tr>\r\n<td>&lt;p&gt;</td>\r\n<td>My first paragraph.</td>\r\n<td>&lt;/p&gt;</td>\r\n</tr>\r\n<tr>\r\n<td>&lt;br&gt;</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n&nbsp;\r\n\r\n</div>\r\n<table class="lamp">\r\n<tbody>\r\n<tr>\r\n<td>Some HTML elements do not have an end tag.</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n&nbsp;\r\n<h2>Nested HTML Elements</h2>\r\nHTML elements can be nested (elements can contain elements).\r\n\r\nAll HTML documents consist of nested HTML elements.\r\n\r\nThis example contains 4 HTML elements:\r\n\r\n&nbsp;\r\n\r\nEx:\r\n\r\n[code language="html"]\r\n&lt;!DOCTYPE html&gt;\r\n&lt;html&gt;\r\n&lt;body&gt;\r\n\r\n&lt;h1&gt;My First Heading&lt;/h1&gt;\r\n&lt;p&gt;My first paragraph.&lt;/p&gt;\r\n\r\n&lt;/body&gt;\r\n&lt;/html&gt;\r\n\r\n[/code]\r\n\r\n&nbsp;\r\n<h2>HTML Example Explained</h2>\r\nThe <strong>&lt;html&gt;</strong> element defines the <strong>whole document</strong>.\r\n\r\nIt has a <strong>start</strong> tag &lt;html&gt; and an <strong>end</strong> tag &lt;/html&gt;.\r\n\r\nThe element <strong>content</strong> is another HTML element (the &lt;body&gt; element).\r\n\r\n[code language="html"]\r\n\r\n&lt;html&gt;\r\n&lt;body&gt;\r\n\r\n&lt;h1&gt;My First Heading&lt;/h1&gt;\r\n&lt;p&gt;My first paragraph.&lt;/p&gt;\r\n\r\n&lt;/body&gt;\r\n&lt;/html&gt;\r\n\r\n[/code]', 'HTML Elements', '', 'inherit', 'closed', 'closed', '', '34-revision-v1', '', '', '2016-05-07 10:13:07', '2016-05-07 10:13:07', '', 34, 'http://localhost/invatacel/2016/05/07/34-revision-v1/', 0, 'revision', '', 0),
(36, 1, '2016-05-07 10:14:51', '2016-05-07 10:14:51', 'With HTML you can create your own Web site.\r\n\r\nThis tutorial teaches you everything about HTML.\r\n\r\nHTML is easy to learn - You will enjoy it.', 'HTML', '', 'inherit', 'closed', 'closed', '', '21-revision-v1', '', '', '2016-05-07 10:14:51', '2016-05-07 10:14:51', '', 21, 'http://localhost/invatacel/2016/05/07/21-revision-v1/', 0, 'revision', '', 0),
(39, 1, '2016-05-07 10:18:55', '2016-05-07 10:18:55', 'With HTML you can create your own Web site.\r\n\r\nThis tutorial teaches you everything about HTML.\r\n\r\nHTML is easy to learn - You will enjoy it.', 'HTML', '', 'publish', 'open', 'closed', '', 'html', '', '', '2016-05-21 13:07:16', '2016-05-21 13:07:16', '', 0, 'http://localhost/invatacel/?post_type=lp_course&#038;p=39', 0, 'lp_course', '', 0),
(40, 1, '2016-05-07 10:18:55', '2016-05-07 10:18:55', '', 'HTML', '', 'inherit', 'closed', 'closed', '', '39-revision-v1', '', '', '2016-05-07 10:18:55', '2016-05-07 10:18:55', '', 39, 'http://localhost/invatacel/2016/05/07/39-revision-v1/', 0, 'revision', '', 0),
(41, 1, '2016-05-07 10:19:07', '2016-05-07 10:19:07', 'With HTML you can create your own Web site.\r\n\r\nThis tutorial teaches you everything about HTML.\r\n\r\nHTML is easy to learn - You will enjoy it.', 'HTML', '', 'inherit', 'closed', 'closed', '', '39-revision-v1', '', '', '2016-05-07 10:19:07', '2016-05-07 10:19:07', '', 39, 'http://localhost/invatacel/2016/05/07/39-revision-v1/', 0, 'revision', '', 0),
(43, 1, '2016-05-07 10:21:06', '2016-05-07 10:21:06', 'HTML is a <strong>markup</strong> language for <strong>describing</strong> web documents (web pages).\r\n<ul>\r\n 	<li>HTML stands for <b>H</b>yper <b>T</b>ext <b>M</b>arkup <b>L</b>anguage</li>\r\n 	<li>A markup language is a set of <b>markup tags</b></li>\r\n 	<li>HTML documents are described by <b>HTML tags</b></li>\r\n 	<li>Each HTML tag <b>describes</b> different document content</li>\r\n</ul>\r\n[code language="css"]dsdfsdfds[/code]\r\n\r\n[code language="css"]\r\n\r\n<span class="highLT">&lt;</span><span class="highELE">!DOCTYPE</span> <span class="highATT">html</span><span class="highGT">&gt;</span>\r\n&lt;html&gt;\r\n&lt;head&gt;\r\n&lt;title&gt;Page Title&lt;/title&gt;\r\n&lt;/head&gt;\r\n&lt;body&gt;\r\n\r\n&lt;h1&gt;My First Heading&lt;/h1&gt;\r\n&lt;p&gt;My first paragraph.&lt;/p&gt;\r\n\r\n&lt;/body&gt;\r\n&lt;/html&gt;\r\n\r\n[/code]', 'About HTML', '', 'publish', 'closed', 'closed', '', 'about-html', '', '', '2016-05-07 10:29:34', '2016-05-07 10:29:34', '', 0, 'http://localhost/invatacel/?post_type=lp_lesson&#038;p=43', 0, 'lp_lesson', '', 0),
(44, 1, '2016-05-07 10:21:06', '2016-05-07 10:21:06', 'HTML is a <strong>markup</strong> language for <strong>describing</strong> web documents (web pages).\r\n<ul>\r\n 	<li>HTML stands for <b>H</b>yper <b>T</b>ext <b>M</b>arkup <b>L</b>anguage</li>\r\n 	<li>A markup language is a set of <b>markup tags</b></li>\r\n 	<li>HTML documents are described by <b>HTML tags</b></li>\r\n 	<li>Each HTML tag <b>describes</b> different document content</li>\r\n</ul>\r\n[code language="html"]\r\n\r\n<span class="highLT">&lt;</span><span class="highELE">!DOCTYPE</span> <span class="highATT">html</span><span class="highGT">&gt;</span>\r\n<span class="highLT">&lt;</span><span class="highELE">html</span><span class="highGT">&gt;</span>\r\n<span class="highLT">&lt;</span><span class="highELE">head</span><span class="highGT">&gt;</span>\r\n<span class="highLT">&lt;</span><span class="highELE">title</span><span class="highGT">&gt;</span>Page Title<span class="highLT">&lt;</span><span class="highELE">/title</span><span class="highGT">&gt;</span>\r\n<span class="highLT">&lt;</span><span class="highELE">/head</span><span class="highGT">&gt;</span>\r\n<span class="highLT">&lt;</span><span class="highELE">body</span><span class="highGT">&gt;</span>\r\n\r\n<span class="highLT">&lt;</span><span class="highELE">h1</span><span class="highGT">&gt;</span>My First Heading<span class="highLT">&lt;</span><span class="highELE">/h1</span><span class="highGT">&gt;</span>\r\n<span class="highLT">&lt;</span><span class="highELE">p</span><span class="highGT">&gt;</span>My first paragraph.<span class="highLT">&lt;</span><span class="highELE">/p</span><span class="highGT">&gt;</span>\r\n\r\n<span class="highLT">&lt;</span><span class="highELE">/body</span><span class="highGT">&gt;</span>\r\n<span class="highLT">&lt;</span><span class="highELE">/html</span><span class="highGT">&gt;</span>\r\n\r\n[/code]', 'About HTML', '', 'inherit', 'closed', 'closed', '', '43-revision-v1', '', '', '2016-05-07 10:21:06', '2016-05-07 10:21:06', '', 43, 'http://localhost/invatacel/2016/05/07/43-revision-v1/', 0, 'revision', '', 0),
(45, 1, '2016-05-07 10:25:59', '2016-05-07 10:25:59', 'HTML is a <strong>markup</strong> language for <strong>describing</strong> web documents (web pages).\r\n<ul>\r\n 	<li>HTML stands for <b>H</b>yper <b>T</b>ext <b>M</b>arkup <b>L</b>anguage</li>\r\n 	<li>A markup language is a set of <b>markup tags</b></li>\r\n 	<li>HTML documents are described by <b>HTML tags</b></li>\r\n 	<li>Each HTML tag <b>describes</b> different document content</li>\r\n</ul>\r\n[code language="css"]\r\n\r\n<span class="highLT">&lt;</span><span class="highELE">!DOCTYPE</span> <span class="highATT">html</span><span class="highGT">&gt;</span>\r\n<span class="highLT">&lt;</span><span class="highELE">html</span><span class="highGT">&gt;</span>\r\n<span class="highLT">&lt;</span><span class="highELE">head</span><span class="highGT">&gt;</span>\r\n<span class="highLT">&lt;</span><span class="highELE">title</span><span class="highGT">&gt;</span>Page Title<span class="highLT">&lt;</span><span class="highELE">/title</span><span class="highGT">&gt;</span>\r\n<span class="highLT">&lt;</span><span class="highELE">/head</span><span class="highGT">&gt;</span>\r\n<span class="highLT">&lt;</span><span class="highELE">body</span><span class="highGT">&gt;</span>\r\n\r\n<span class="highLT">&lt;</span><span class="highELE">h1</span><span class="highGT">&gt;</span>My First Heading<span class="highLT">&lt;</span><span class="highELE">/h1</span><span class="highGT">&gt;</span>\r\n<span class="highLT">&lt;</span><span class="highELE">p</span><span class="highGT">&gt;</span>My first paragraph.<span class="highLT">&lt;</span><span class="highELE">/p</span><span class="highGT">&gt;</span>\r\n\r\n<span class="highLT">&lt;</span><span class="highELE">/body</span><span class="highGT">&gt;</span>\r\n<span class="highLT">&lt;</span><span class="highELE">/html</span><span class="highGT">&gt;</span>\r\n\r\n[/code]', 'About HTML', '', 'inherit', 'closed', 'closed', '', '43-revision-v1', '', '', '2016-05-07 10:25:59', '2016-05-07 10:25:59', '', 43, 'http://localhost/invatacel/2016/05/07/43-revision-v1/', 0, 'revision', '', 0),
(46, 1, '2016-05-07 10:29:06', '2016-05-07 10:29:06', 'HTML is a <strong>markup</strong> language for <strong>describing</strong> web documents (web pages).\n<ul>\n 	<li>HTML stands for <b>H</b>yper <b>T</b>ext <b>M</b>arkup <b>L</b>anguage</li>\n 	<li>A markup language is a set of <b>markup tags</b></li>\n 	<li>HTML documents are described by <b>HTML tags</b></li>\n 	<li>Each HTML tag <b>describes</b> different document content</li>\n</ul>\n[code language="css"]dsdfsdfds[/code]\n\n[code language="css"]\n\n<span class="highLT">&lt;</span><span class="highELE">!DOCTYPE</span> <span class="highATT">html</span><span class="highGT">&gt;</span>\n&lt;html&gt;\n&lt;head&gt;\n&lt;title&gt;Page Title&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n\n&lt;h1&gt;My First Heading&lt;/h1&gt;\n&lt;p&gt;My first paragraph.&lt;/p&gt;\n\n&lt;/body&gt;\n&lt;/html&gt;\n\n[/code]', 'About HTML', '', 'inherit', 'closed', 'closed', '', '43-autosave-v1', '', '', '2016-05-07 10:29:06', '2016-05-07 10:29:06', '', 43, 'http://localhost/invatacel/2016/05/07/43-autosave-v1/', 0, 'revision', '', 0),
(47, 1, '2016-05-07 10:27:49', '2016-05-07 10:27:49', 'HTML is a <strong>markup</strong> language for <strong>describing</strong> web documents (web pages).\r\n<ul>\r\n 	<li>HTML stands for <b>H</b>yper <b>T</b>ext <b>M</b>arkup <b>L</b>anguage</li>\r\n 	<li>A markup language is a set of <b>markup tags</b></li>\r\n 	<li>HTML documents are described by <b>HTML tags</b></li>\r\n 	<li>Each HTML tag <b>describes</b> different document content</li>\r\n</ul>\r\n[code language="css"]dsdfsdfds[/code]\r\n\r\n[code language="css"]\r\n\r\n<span class="highLT">&lt;</span><span class="highELE">!DOCTYPE</span> <span class="highATT">html</span><span class="highGT">&gt;</span>\r\n<span class="highLT">&lt;</span><span class="highELE">html</span><span class="highGT">&gt;</span>\r\n<span class="highLT">&lt;</span><span class="highELE">head</span><span class="highGT">&gt;</span>\r\n<span class="highLT">&lt;</span><span class="highELE">title</span><span class="highGT">&gt;</span>Page Title<span class="highLT">&lt;</span><span class="highELE">/title</span><span class="highGT">&gt;</span>\r\n<span class="highLT">&lt;</span><span class="highELE">/head</span><span class="highGT">&gt;</span>\r\n<span class="highLT">&lt;</span><span class="highELE">body</span><span class="highGT">&gt;</span>\r\n\r\n<span class="highLT">&lt;</span><span class="highELE">h1</span><span class="highGT">&gt;</span>My First Heading<span class="highLT">&lt;</span><span class="highELE">/h1</span><span class="highGT">&gt;</span>\r\n<span class="highLT">&lt;</span><span class="highELE">p</span><span class="highGT">&gt;</span>My first paragraph.<span class="highLT">&lt;</span><span class="highELE">/p</span><span class="highGT">&gt;</span>\r\n\r\n<span class="highLT">&lt;</span><span class="highELE">/body</span><span class="highGT">&gt;</span>\r\n<span class="highLT">&lt;</span><span class="highELE">/html</span><span class="highGT">&gt;</span>\r\n\r\n[/code]', 'About HTML', '', 'inherit', 'closed', 'closed', '', '43-revision-v1', '', '', '2016-05-07 10:27:49', '2016-05-07 10:27:49', '', 43, 'http://localhost/invatacel/2016/05/07/43-revision-v1/', 0, 'revision', '', 0),
(48, 1, '2016-05-07 10:29:34', '2016-05-07 10:29:34', 'HTML is a <strong>markup</strong> language for <strong>describing</strong> web documents (web pages).\r\n<ul>\r\n 	<li>HTML stands for <b>H</b>yper <b>T</b>ext <b>M</b>arkup <b>L</b>anguage</li>\r\n 	<li>A markup language is a set of <b>markup tags</b></li>\r\n 	<li>HTML documents are described by <b>HTML tags</b></li>\r\n 	<li>Each HTML tag <b>describes</b> different document content</li>\r\n</ul>\r\n[code language="css"]dsdfsdfds[/code]\r\n\r\n[code language="css"]\r\n\r\n<span class="highLT">&lt;</span><span class="highELE">!DOCTYPE</span> <span class="highATT">html</span><span class="highGT">&gt;</span>\r\n&lt;html&gt;\r\n&lt;head&gt;\r\n&lt;title&gt;Page Title&lt;/title&gt;\r\n&lt;/head&gt;\r\n&lt;body&gt;\r\n\r\n&lt;h1&gt;My First Heading&lt;/h1&gt;\r\n&lt;p&gt;My first paragraph.&lt;/p&gt;\r\n\r\n&lt;/body&gt;\r\n&lt;/html&gt;\r\n\r\n[/code]', 'About HTML', '', 'inherit', 'closed', 'closed', '', '43-revision-v1', '', '', '2016-05-07 10:29:34', '2016-05-07 10:29:34', '', 43, 'http://localhost/invatacel/2016/05/07/43-revision-v1/', 0, 'revision', '', 0),
(49, 1, '2016-05-07 10:30:18', '2016-05-07 10:30:18', '[code language="css"]\r\nyour code here\r\n[/code]', 'Test code', '', 'trash', 'open', 'open', '', 'test-code__trashed', '', '', '2016-05-07 10:36:17', '2016-05-07 10:36:17', '', 0, 'http://localhost/invatacel/?p=49', 0, 'post', '', 0),
(50, 1, '2016-05-07 10:29:56', '2016-05-07 10:29:56', '[code language="css"]\r\nyour code here\r\n[/code]', 'Test code', '', 'inherit', 'closed', 'closed', '', '49-revision-v1', '', '', '2016-05-07 10:29:56', '2016-05-07 10:29:56', '', 49, 'http://localhost/invatacel/2016/05/07/49-revision-v1/', 0, 'revision', '', 0),
(51, 1, '2016-05-07 10:44:33', '2016-05-07 10:44:33', '<strong><em>AngularJS extends HTML with new attributes.</em></strong>\r\n\r\n<strong><em>AngularJS is perfect for Single Page Applications (SPAs).</em></strong>\r\n\r\n<strong><em>AngularJS is easy to learn.</em></strong>', 'Angular JS', '', 'publish', 'open', 'closed', '', 'angular-js', '', '', '2016-05-23 17:04:19', '2016-05-23 17:04:19', '', 0, 'http://localhost/invatacel/?post_type=lp_course&#038;p=51', 0, 'lp_course', '', 0),
(52, 1, '2016-05-07 10:44:33', '2016-05-07 10:44:33', '<strong><em>AngularJS extends HTML with new attributes.</em></strong>\r\n\r\n<strong><em>AngularJS is perfect for Single Page Applications (SPAs).</em></strong>\r\n\r\n<strong><em>AngularJS is easy to learn.</em></strong>', 'Angular JS', '', 'inherit', 'closed', 'closed', '', '51-revision-v1', '', '', '2016-05-07 10:44:33', '2016-05-07 10:44:33', '', 51, 'http://localhost/invatacel/2016/05/07/51-revision-v1/', 0, 'revision', '', 0),
(53, 1, '2016-05-07 10:50:53', '2016-05-07 10:50:53', '<p class="intro">AngularJS is a <strong>JavaScript framework</strong>. It can be added to an HTML page with a &lt;script&gt; tag.</p>\r\n<p class="intro">AngularJS extends HTML attributes with <strong>Directives</strong>, and binds data to HTML with <strong>Expressions</strong>.</p>\r\n\r\n<h2>AngularJS is a JavaScript Framework</h2>\r\nAngularJS is a JavaScript framework. It is a library written in JavaScript.\r\n\r\nAngularJS is distributed as a JavaScript file, and can be added to a web page with a script tag:\r\n\r\n<span style="color: #ff9900;">&lt;script src="http://ajax.googleapis.com/ajax/libs/angularjs/1.4.8/angular.min.js"&gt;&lt;/script&gt;</span>\r\n<h2>AngularJS Extends HTML</h2>\r\nAngularJS extends HTML with <strong>ng-directives</strong>.\r\n\r\nThe <strong>ng-app</strong> directive defines an AngularJS application.\r\n\r\nThe <strong>ng-model</strong> directive binds the value of HTML controls (input, select, textarea) to application data.\r\n\r\nThe <strong>ng-bind</strong> directive binds application data to the HTML view.\r\n\r\n<span style="color: #ff9900;">&lt;!DOCTYPE html&gt;</span>\r\n<span style="color: #ff9900;">&lt;html&gt;</span>\r\n<span style="color: #ff9900;">&lt;script src="http://ajax.googleapis.com/ajax/libs/angularjs/1.4.8/angular.min.js"&gt;&lt;/script&gt;</span>\r\n<span style="color: #ff9900;">&lt;body&gt;</span>\r\n\r\n<span style="color: #ff9900;">&lt;div ng-app=""&gt;</span>\r\n<span style="color: #ff9900;">  &lt;p&gt;Name: &lt;input type="text" ng-model="name"&gt;&lt;/p&gt;</span>\r\n<span style="color: #ff9900;">  &lt;p ng-bind="name"&gt;&lt;/p&gt;</span>\r\n<span style="color: #ff9900;">&lt;/div&gt;</span>\r\n\r\n<span style="color: #ff9900;">&lt;/body&gt;</span>\r\n<span style="color: #ff9900;">&lt;/html&gt;</span>\r\n\r\nExample explained:\r\n\r\nAngularJS starts automatically when the web page has loaded.\r\n\r\nThe <strong>ng-app</strong> directive tells AngularJS that the &lt;div&gt; element is the "owner" of an AngularJS <strong>application</strong>.\r\n\r\nThe <strong>ng-model</strong> directive binds the value of the input field to the application variable <strong>name</strong>.\r\n\r\nThe <strong>ng-bind</strong> directive binds the <strong>innerHTML</strong> of the &lt;p&gt; element to the application variable <strong>name</strong>.\r\n<h2>AngularJS Directives</h2>\r\nAs you have already seen, AngularJS directives are HTML attributes with an <strong>ng</strong> prefix.\r\n\r\nThe <strong>ng-init</strong> directive initializes AngularJS application variables.\r\n\r\n<span style="color: #ff9900;">&lt;div ng-app="" ng-init="firstName=''John''"&gt;</span>\r\n\r\n<span style="color: #ff9900;">&lt;p&gt;The name is &lt;span ng-bind="firstName"&gt;&lt;/span&gt;&lt;/p&gt;</span>\r\n\r\n<span style="color: #ff9900;">&lt;/div&gt;</span>\r\n\r\nAlternatively with valid HTML:\r\n\r\n<span style="color: #ff9900;">&lt;div data-ng-app="" data-ng-init="firstName=''John''"&gt;</span>\r\n\r\n<span style="color: #ff9900;">&lt;p&gt;The name is &lt;span data-ng-bind="firstName"&gt;&lt;/span&gt;&lt;/p&gt;</span>\r\n\r\n<span style="color: #ff9900;">&lt;/div&gt;</span>\r\n<h2>AngularJS Expressions</h2>\r\nAngularJS expressions are written inside double braces: <strong>{{ expression }}</strong>.\r\n\r\nAngularJS will "output" data exactly where the expression is written:\r\n\r\n<span style="color: #ff9900;">&lt;!DOCTYPE html&gt;</span>\r\n<span style="color: #ff9900;">&lt;html&gt;</span>\r\n<span style="color: #ff9900;">&lt;script src="http://ajax.googleapis.com/ajax/libs/angularjs/1.4.8/angular.min.js"&gt;&lt;/script&gt;</span>\r\n<span style="color: #ff9900;">&lt;body&gt;</span>\r\n\r\n<span style="color: #ff9900;">&lt;div ng-app=""&gt;</span>\r\n<span style="color: #ff9900;">  &lt;p&gt;My first expression: {{ 5 + 5 }}&lt;/p&gt;</span>\r\n<span style="color: #ff9900;">&lt;/div&gt;</span>\r\n\r\n<span style="color: #ff9900;">&lt;/body&gt;</span>\r\n<span style="color: #ff9900;">&lt;/html&gt;</span>\r\n\r\nAngularJS expressions bind AngularJS data to HTML the same way as the <strong>ng-bind</strong> directive.\r\n\r\n<span style="color: #ff9900;">&lt;!DOCTYPE html&gt;</span>\r\n<span style="color: #ff9900;">&lt;html&gt;</span>\r\n<span style="color: #ff9900;">&lt;script src="http://ajax.googleapis.com/ajax/libs/angularjs/1.4.8/angular.min.js"&gt;&lt;/script&gt;</span>\r\n<span style="color: #ff9900;">&lt;body&gt;</span>\r\n\r\n<span style="color: #ff9900;">&lt;div ng-app=""&gt;</span>\r\n<span style="color: #ff9900;">  &lt;p&gt;Name: &lt;input type="text" ng-model="name"&gt;&lt;/p&gt;</span>\r\n<span style="color: #ff9900;">  &lt;p&gt;{{name}}&lt;/p&gt;</span>\r\n<span style="color: #ff9900;">&lt;/div&gt;</span>\r\n\r\n<span style="color: #ff9900;">&lt;/body&gt;</span>\r\n<span style="color: #ff9900;">&lt;/html&gt;</span>\r\n<h2>AngularJS Applications</h2>\r\nAngularJS <strong>modules</strong> define AngularJS applications.\r\n\r\nAngularJS <strong>controllers</strong> control AngularJS applications.\r\n\r\nThe <strong>ng-app</strong> directive defines the application, the <strong>ng-controller</strong> directive defines the controller.\r\n\r\n<span style="color: #ff9900;">&lt;div ng-app="<strong>myApp</strong>" ng-controller="<strong>myCtrl</strong>"&gt;</span>\r\n\r\n<span style="color: #ff9900;">First Name: &lt;input type="text" ng-model="firstName"&gt;&lt;br&gt;</span>\r\n<span style="color: #ff9900;">Last Name: &lt;input type="text" ng-model="lastName"&gt;&lt;br&gt;</span>\r\n<span style="color: #ff9900;">&lt;br&gt;</span>\r\n<span style="color: #ff9900;">Full Name: {{firstName + " " + lastName}}</span>\r\n\r\n<span style="color: #ff9900;">&lt;/div&gt;</span>\r\n\r\n<span style="color: #ff9900;">&lt;script&gt;</span>\r\n<span style="color: #ff9900;">var app = angular.module(''<strong>myApp</strong>'', []);</span>\r\n<span style="color: #ff9900;">app.controller(''<strong>myCtrl</strong>'', function($scope) {</span>\r\n<span style="color: #ff9900;">    $scope.firstName= "John";</span>\r\n<span style="color: #ff9900;">    $scope.lastName= "Doe";</span>\r\n<span style="color: #ff9900;">});</span>\r\n<span style="color: #ff9900;">&lt;/script&gt;</span>\r\n\r\nAngularJS modules define applications:\r\n\r\n<span style="color: #ff9900;">var app = angular.module(''myApp'', []);</span>\r\n\r\nAngularJS controllers control applications:\r\n\r\n<span style="color: #ff9900;">app.controller(''myCtrl'', function($scope) {</span>\r\n<span style="color: #ff9900;">    $scope.firstName= "John";</span>\r\n<span style="color: #ff9900;">    $scope.lastName= "Doe";</span>\r\n<span style="color: #ff9900;">});</span>', 'Angular JS Intro', '', 'publish', 'closed', 'closed', '', 'angular-js-intro', '', '', '2016-05-21 14:24:16', '2016-05-21 14:24:16', '', 0, 'http://localhost/invatacel/?post_type=lp_lesson&#038;p=53', 0, 'lp_lesson', '', 0),
(54, 1, '2016-05-07 10:50:53', '2016-05-07 10:50:53', '<p class="intro">AngularJS is a <strong>JavaScript framework</strong>. It can be added to an HTML page with a &lt;script&gt; tag.</p>\r\n<p class="intro">AngularJS extends HTML attributes with <strong>Directives</strong>, and binds data to HTML with <strong>Expressions</strong>.</p>\r\n\r\n<h2>AngularJS is a JavaScript Framework</h2>\r\nAngularJS is a JavaScript framework. It is a library written in JavaScript.\r\n\r\nAngularJS is distributed as a JavaScript file, and can be added to a web page with a script tag:\r\n\r\n<span style="color: #ff9900;">&lt;script src="http://ajax.googleapis.com/ajax/libs/angularjs/1.4.8/angular.min.js"&gt;&lt;/script&gt;</span>\r\n<h2>AngularJS Extends HTML</h2>\r\nAngularJS extends HTML with <strong>ng-directives</strong>.\r\n\r\nThe <strong>ng-app</strong> directive defines an AngularJS application.\r\n\r\nThe <strong>ng-model</strong> directive binds the value of HTML controls (input, select, textarea) to application data.\r\n\r\nThe <strong>ng-bind</strong> directive binds application data to the HTML view.\r\n\r\n<span style="color: #ff9900;">&lt;!DOCTYPE html&gt;</span>\r\n<span style="color: #ff9900;">&lt;html&gt;</span>\r\n<span style="color: #ff9900;">&lt;script src="http://ajax.googleapis.com/ajax/libs/angularjs/1.4.8/angular.min.js"&gt;&lt;/script&gt;</span>\r\n<span style="color: #ff9900;">&lt;body&gt;</span>\r\n\r\n<span style="color: #ff9900;">&lt;div ng-app=""&gt;</span>\r\n<span style="color: #ff9900;">  &lt;p&gt;Name: &lt;input type="text" ng-model="name"&gt;&lt;/p&gt;</span>\r\n<span style="color: #ff9900;">  &lt;p ng-bind="name"&gt;&lt;/p&gt;</span>\r\n<span style="color: #ff9900;">&lt;/div&gt;</span>\r\n\r\n<span style="color: #ff9900;">&lt;/body&gt;</span>\r\n<span style="color: #ff9900;">&lt;/html&gt;</span>\r\n\r\nExample explained:\r\n\r\nAngularJS starts automatically when the web page has loaded.\r\n\r\nThe <strong>ng-app</strong> directive tells AngularJS that the &lt;div&gt; element is the "owner" of an AngularJS <strong>application</strong>.\r\n\r\nThe <strong>ng-model</strong> directive binds the value of the input field to the application variable <strong>name</strong>.\r\n\r\nThe <strong>ng-bind</strong> directive binds the <strong>innerHTML</strong> of the &lt;p&gt; element to the application variable <strong>name</strong>.\r\n<h2>AngularJS Directives</h2>\r\nAs you have already seen, AngularJS directives are HTML attributes with an <strong>ng</strong> prefix.\r\n\r\nThe <strong>ng-init</strong> directive initializes AngularJS application variables.\r\n\r\n<span style="color: #ff9900;">&lt;div ng-app="" ng-init="firstName=''John''"&gt;</span>\r\n\r\n<span style="color: #ff9900;">&lt;p&gt;The name is &lt;span ng-bind="firstName"&gt;&lt;/span&gt;&lt;/p&gt;</span>\r\n\r\n<span style="color: #ff9900;">&lt;/div&gt;</span>\r\n\r\nAlternatively with valid HTML:\r\n\r\n<span style="color: #ff9900;">&lt;div data-ng-app="" data-ng-init="firstName=''John''"&gt;</span>\r\n\r\n<span style="color: #ff9900;">&lt;p&gt;The name is &lt;span data-ng-bind="firstName"&gt;&lt;/span&gt;&lt;/p&gt;</span>\r\n\r\n<span style="color: #ff9900;">&lt;/div&gt;</span>\r\n<h2>AngularJS Expressions</h2>\r\nAngularJS expressions are written inside double braces: <strong>{{ expression }}</strong>.\r\n\r\nAngularJS will "output" data exactly where the expression is written:\r\n\r\n<span style="color: #ff9900;">&lt;!DOCTYPE html&gt;</span>\r\n<span style="color: #ff9900;">&lt;html&gt;</span>\r\n<span style="color: #ff9900;">&lt;script src="http://ajax.googleapis.com/ajax/libs/angularjs/1.4.8/angular.min.js"&gt;&lt;/script&gt;</span>\r\n<span style="color: #ff9900;">&lt;body&gt;</span>\r\n\r\n<span style="color: #ff9900;">&lt;div ng-app=""&gt;</span>\r\n<span style="color: #ff9900;">  &lt;p&gt;My first expression: {{ 5 + 5 }}&lt;/p&gt;</span>\r\n<span style="color: #ff9900;">&lt;/div&gt;</span>\r\n\r\n<span style="color: #ff9900;">&lt;/body&gt;</span>\r\n<span style="color: #ff9900;">&lt;/html&gt;</span>\r\n\r\nAngularJS expressions bind AngularJS data to HTML the same way as the <strong>ng-bind</strong> directive.\r\n\r\n<span style="color: #ff9900;">&lt;!DOCTYPE html&gt;</span>\r\n<span style="color: #ff9900;">&lt;html&gt;</span>\r\n<span style="color: #ff9900;">&lt;script src="http://ajax.googleapis.com/ajax/libs/angularjs/1.4.8/angular.min.js"&gt;&lt;/script&gt;</span>\r\n<span style="color: #ff9900;">&lt;body&gt;</span>\r\n\r\n<span style="color: #ff9900;">&lt;div ng-app=""&gt;</span>\r\n<span style="color: #ff9900;">  &lt;p&gt;Name: &lt;input type="text" ng-model="name"&gt;&lt;/p&gt;</span>\r\n<span style="color: #ff9900;">  &lt;p&gt;{{name}}&lt;/p&gt;</span>\r\n<span style="color: #ff9900;">&lt;/div&gt;</span>\r\n\r\n<span style="color: #ff9900;">&lt;/body&gt;</span>\r\n<span style="color: #ff9900;">&lt;/html&gt;</span>\r\n<h2>AngularJS Applications</h2>\r\nAngularJS <strong>modules</strong> define AngularJS applications.\r\n\r\nAngularJS <strong>controllers</strong> control AngularJS applications.\r\n\r\nThe <strong>ng-app</strong> directive defines the application, the <strong>ng-controller</strong> directive defines the controller.\r\n\r\n<span style="color: #ff9900;">&lt;div ng-app="<strong>myApp</strong>" ng-controller="<strong>myCtrl</strong>"&gt;</span>\r\n\r\n<span style="color: #ff9900;">First Name: &lt;input type="text" ng-model="firstName"&gt;&lt;br&gt;</span>\r\n<span style="color: #ff9900;">Last Name: &lt;input type="text" ng-model="lastName"&gt;&lt;br&gt;</span>\r\n<span style="color: #ff9900;">&lt;br&gt;</span>\r\n<span style="color: #ff9900;">Full Name: {{firstName + " " + lastName}}</span>\r\n\r\n<span style="color: #ff9900;">&lt;/div&gt;</span>\r\n\r\n<span style="color: #ff9900;">&lt;script&gt;</span>\r\n<span style="color: #ff9900;">var app = angular.module(''<strong>myApp</strong>'', []);</span>\r\n<span style="color: #ff9900;">app.controller(''<strong>myCtrl</strong>'', function($scope) {</span>\r\n<span style="color: #ff9900;">    $scope.firstName= "John";</span>\r\n<span style="color: #ff9900;">    $scope.lastName= "Doe";</span>\r\n<span style="color: #ff9900;">});</span>\r\n<span style="color: #ff9900;">&lt;/script&gt;</span>\r\n\r\nAngularJS modules define applications:\r\n\r\n<span style="color: #ff9900;">var app = angular.module(''myApp'', []);</span>\r\n\r\nAngularJS controllers control applications:\r\n\r\n<span style="color: #ff9900;">app.controller(''myCtrl'', function($scope) {</span>\r\n<span style="color: #ff9900;">    $scope.firstName= "John";</span>\r\n<span style="color: #ff9900;">    $scope.lastName= "Doe";</span>\r\n<span style="color: #ff9900;">});</span>', 'Angular JS Intro', '', 'inherit', 'closed', 'closed', '', '53-revision-v1', '', '', '2016-05-07 10:50:53', '2016-05-07 10:50:53', '', 53, 'http://localhost/invatacel/2016/05/07/53-revision-v1/', 0, 'revision', '', 0),
(55, 1, '2016-05-07 10:59:22', '2016-05-07 10:59:22', '[quoteRotator]', 'Home', '', 'publish', 'closed', 'closed', '', 'home', '', '', '2016-05-23 17:05:25', '2016-05-23 17:05:25', '', 0, 'http://localhost/invatacel/?page_id=55', 0, 'page', '', 0),
(56, 1, '2016-05-07 10:59:22', '2016-05-07 10:59:22', 'Some content for the home page', 'Home', '', 'inherit', 'closed', 'closed', '', '55-revision-v1', '', '', '2016-05-07 10:59:22', '2016-05-07 10:59:22', '', 55, 'http://localhost/invatacel/2016/05/07/55-revision-v1/', 0, 'revision', '', 0),
(57, 1, '2016-05-07 11:00:28', '2016-05-07 11:00:28', ' ', '', '', 'publish', 'closed', 'closed', '', '57', '', '', '2016-05-07 11:05:57', '2016-05-07 11:05:57', '', 0, 'http://localhost/invatacel/?p=57', 1, 'nav_menu_item', '', 0),
(58, 1, '2016-05-07 11:01:01', '2016-05-07 11:01:01', '<strong>YOLO team.</strong>\r\n\r\n<strong><em>Camin 7 OBS</em></strong>', 'Contact', '', 'publish', 'closed', 'closed', '', 'contact', '', '', '2016-05-23 16:49:20', '2016-05-23 16:49:20', '', 0, 'http://localhost/invatacel/?page_id=58', 0, 'page', '', 0),
(59, 1, '2016-05-07 11:01:01', '2016-05-07 11:01:01', 'Contact info to be added here', 'Contact', '', 'inherit', 'closed', 'closed', '', '58-revision-v1', '', '', '2016-05-07 11:01:01', '2016-05-07 11:01:01', '', 58, 'http://localhost/invatacel/2016/05/07/58-revision-v1/', 0, 'revision', '', 0),
(60, 1, '2016-05-07 11:01:26', '2016-05-07 11:01:26', ' ', '', '', 'publish', 'closed', 'closed', '', '60', '', '', '2016-05-07 11:05:57', '2016-05-07 11:05:57', '', 0, 'http://localhost/invatacel/?p=60', 3, 'nav_menu_item', '', 0),
(61, 1, '2016-05-07 11:05:57', '2016-05-07 11:05:57', '', 'Log In|Log Out', '', 'publish', 'closed', 'closed', '', 'log-inlog-out', '', '', '2016-05-07 11:05:57', '2016-05-07 11:05:57', '', 0, 'http://localhost/invatacel/?p=61', 4, 'nav_menu_item', '', 0),
(63, 1, '2016-05-07 14:17:50', '2016-05-07 14:17:50', 'JavaScript is the programming language of HTML and the Web.\r\n\r\nProgramming makes computers do what you want them to do.\r\n\r\nJavaScript is easy to learn.\r\n\r\nThis tutorial will teach you JavaScript from basic to advanced.', 'Java Script', '', 'publish', 'open', 'closed', '', 'java-script', '', '', '2016-05-23 17:20:21', '2016-05-23 17:20:21', '', 0, 'http://localhost/invatacel/?post_type=lp_course&#038;p=63', 0, 'lp_course', '', 1),
(64, 1, '2016-05-07 14:17:50', '2016-05-07 14:17:50', 'JavaScript is the programming language of HTML and the Web.\r\n\r\nProgramming makes computers do what you want them to do.\r\n\r\nJavaScript is easy to learn.\r\n\r\nThis tutorial will teach you JavaScript from basic to advanced.', 'Java Script', '', 'inherit', 'closed', 'closed', '', '63-revision-v1', '', '', '2016-05-07 14:17:50', '2016-05-07 14:17:50', '', 63, 'http://localhost/invatacel/2016/05/07/63-revision-v1/', 0, 'revision', '', 0),
(65, 1, '2016-05-07 14:20:42', '2016-05-07 14:20:42', '<h2>JavaScript Can Change HTML Content</h2>\r\nOne of many HTML methods is <strong>getElementById()</strong>.\r\n\r\nThis example uses the method to "find" an HTML element (with id="demo"), and changes the element content (<strong>innerHTML</strong>) to "Hello JavaScript":', 'JS Introduction', '', 'publish', 'closed', 'closed', '', 'java-script-introduction', '', '', '2016-05-21 15:04:51', '2016-05-21 15:04:51', '', 0, 'http://localhost/invatacel/?post_type=lp_lesson&#038;p=65', 0, 'lp_lesson', '', 0),
(66, 1, '2016-05-07 14:20:42', '2016-05-07 14:20:42', '<h2>JavaScript Can Change HTML Content</h2>\r\nOne of many HTML methods is <strong>getElementById()</strong>.\r\n\r\nThis example uses the method to "find" an HTML element (with id="demo"), and changes the element content (<strong>innerHTML</strong>) to "Hello JavaScript":', 'Java Script Introduction', '', 'inherit', 'closed', 'closed', '', '65-revision-v1', '', '', '2016-05-07 14:20:42', '2016-05-07 14:20:42', '', 65, 'http://localhost/invatacel/2016/05/07/65-revision-v1/', 0, 'revision', '', 0),
(67, 1, '2016-05-07 14:22:46', '2016-05-07 14:22:46', '', 'Order on Saturday 7th May 2016 02:22:46 PM', '', 'lp-completed', 'open', 'closed', '', 'order-on-saturday-7th-may-2016-022246-pm', '', '', '2016-05-07 14:22:46', '2016-05-07 14:22:46', '', 0, 'http://localhost/invatacel/lp_order/order-on-saturday-7th-may-2016-022246-pm/', 0, 'lp_order', '', 0),
(68, 1, '2016-05-20 19:43:54', '0000-00-00 00:00:00', '', 'Auto Draft', '', 'auto-draft', 'open', 'open', '', '', '', '', '2016-05-20 19:43:54', '0000-00-00 00:00:00', '', 0, 'http://localhost/invatacel/?p=68', 0, 'post', '', 0),
(72, 1, '2016-05-20 20:24:14', '0000-00-00 00:00:00', '', 'Auto Draft', '', 'auto-draft', 'closed', 'closed', '', '', '', '', '2016-05-20 20:24:14', '0000-00-00 00:00:00', '', 0, 'http://localhost/invatacel/?post_type=lp_lesson&p=72', 0, 'lp_lesson', '', 0);
INSERT INTO `wp_posts` (`ID`, `post_author`, `post_date`, `post_date_gmt`, `post_content`, `post_title`, `post_excerpt`, `post_status`, `comment_status`, `ping_status`, `post_password`, `post_name`, `to_ping`, `pinged`, `post_modified`, `post_modified_gmt`, `post_content_filtered`, `post_parent`, `guid`, `menu_order`, `post_type`, `post_mime_type`, `comment_count`) VALUES
(81, 1, '2016-05-20 20:36:41', '2016-05-20 20:36:41', '<p class="intro">Attributes provide additional information about HTML elements.</p>\r\n\r\n\r\n<hr />\r\n\r\n<h2>HTML Attributes</h2>\r\n<ul>\r\n 	<li>HTML elements can have <b>attributes</b></li>\r\n 	<li>Attributes provide <b>additional information</b> about an element</li>\r\n 	<li>Attributes are always specified in <b>the start tag</b></li>\r\n 	<li>Attributes come in name/value pairs like: <b>name="value"</b></li>\r\n</ul>\r\n\r\n<hr />\r\n\r\n<h2>The lang Attribute</h2>\r\nThe document language can be declared in the <strong>&lt;html&gt;</strong> tag.\r\n\r\nThe language is declared in the <strong>lang</strong> attribute.\r\n\r\nDeclaring a language is important for accessibility applications (screen readers) and search engines:\r\n<div class="w3-example">\r\n<div class="w3-code notranslate htmlHigh">&lt;!DOCTYPE html&gt;\r\n&lt;html lang="en-US"&gt;\r\n&lt;body&gt;&lt;h1&gt;My First Heading&lt;/h1&gt;\r\n&lt;p&gt;My first paragraph.&lt;/p&gt;\r\n\r\n&lt;/body&gt;\r\n&lt;/html&gt;\r\n\r\n</div>\r\n</div>\r\nThe first two letters specify the language (en). If there is a dialect, use two more letters (US).\r\n\r\n<hr />\r\n\r\n<h2>The title Attribute</h2>\r\nHTML paragraphs are defined with the <strong>&lt;p&gt;</strong> tag.\r\n\r\nIn this example, the <strong>&lt;p&gt;</strong> element has a <strong>title</strong> attribute. The value of the attribute is "<strong>About W3Schools</strong>":\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate htmlHigh">&lt;p title="About W3Schools"&gt;\r\nW3Schools is a web developer''s site.\r\nIt provides tutorials and references covering\r\nmany aspects of web programming,\r\nincluding HTML, CSS, JavaScript, XML, SQL, PHP, ASP, etc.\r\n&lt;/p&gt;</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n<table class="lamp">\r\n<tbody>\r\n<tr>\r\n<th><img src="http://www.w3schools.com/images/lamp.jpg" alt="Note" /></th>\r\n<td>When you move the mouse over the element, the title will be displayed as a tooltip.</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n\r\n<hr />\r\n\r\n<h2>The href Attribute</h2>\r\nHTML links are defined with the <strong>&lt;a&gt;</strong> tag. The link address is specified in the <b>href</b> attribute:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate htmlHigh">&lt;a href="http://www.w3schools.com"&gt;This is a link&lt;/a&gt;</div>\r\n</div>\r\n<div class="w3-example"></div>\r\nYou will learn more about links and the &lt;a&gt; tag later in this tutorial.\r\n\r\n<hr />\r\n\r\n<h2>Size Attributes</h2>\r\nHTML images are defined with the <strong>&lt;img&gt;</strong> tag.\r\n\r\nThe filename of the source (<strong>src</strong>), and the size of the image (<strong>width</strong> and <strong>height</strong>) are all provided as <strong>attributes</strong>:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate htmlHigh">&lt;img src="w3schools.jpg" width="104" height="142"&gt;</div>\r\n</div>\r\n<div class="w3-example"></div>\r\nThe image size is specified in pixels: width="104" means 104 screen pixels wide.\r\n\r\nYou will learn more about images and the &lt;img&gt; tag later in this tutorial.\r\n\r\n<hr />\r\n\r\n<h2>The alt Attribute</h2>\r\nThe <strong>alt</strong> attribute specifies an alternative text to be used, when an image cannot be displayed.\r\n\r\nThe value of the attribute can be read by screen readers. This way, someone "listening" to the webpage, e.g. a blind person, can "hear" the element.\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate htmlHigh">&lt;img src="w3schools.jpg" alt="W3Schools.com" width="104" height="142"&gt;</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n\r\n<hr />\r\n\r\n<h2>We Suggest: Always Use Lowercase Attributes</h2>\r\nThe HTML5 standard does not require lower case attribute names.\r\n\r\nThe title attribute can be written with upper or lower case like <strong>Title</strong> and/or <strong>TITLE</strong>.\r\n\r\nW3C <strong>recommends</strong> lowercase in HTML4, and <strong>demands</strong> lowercase for stricter document types like XHTML.\r\n<table class="lamp">\r\n<tbody>\r\n<tr>\r\n<th><img src="http://www.w3schools.com/images/lamp.jpg" alt="Note" /></th>\r\n<td>Lower case is the most common. Lower case is easier to type.\r\nAt W3Schools we always use lower case attribute names.</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n\r\n<hr />\r\n\r\n<h2>We Suggest: Always Quote Attribute Values</h2>\r\nThe HTML5 standard does not require quotes around attribute values.\r\n\r\nThe <strong>href</strong> attribute, demonstrated above, can be written as:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate htmlHigh">&lt;a href=http://www.w3schools.com&gt;</div>\r\n</div>\r\n<div class="w3-example"></div>\r\nW3C <b>recommends</b> quotes in HTML4, and <strong>demands</strong> quotes for stricter document types like XHTML.\r\n\r\nSometimes it is <strong>necessary</strong> to use quotes. This will not display correctly, because it contains a space:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate htmlHigh">&lt;p title=About W3Schools&gt;</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n<table class="lamp">\r\n<tbody>\r\n<tr>\r\n<th><img src="http://www.w3schools.com/images/lamp.jpg" alt="Note" /></th>\r\n<td>Using quotes are the most common. Omitting quotes can produce errors.\r\nAt W3Schools we always use quotes around attribute values.</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n\r\n<hr />\r\n\r\n<h2>Single or Double Quotes?</h2>\r\nDouble style quotes are the most common in HTML, but single style can also be used.\r\n\r\nIn some situations, when the attribute value itself contains double quotes, it is necessary to use single quotes:\r\n<div class="w3-example">\r\n<div class="w3-code notranslate htmlHigh">&lt;p title=''John "ShotGun" Nelson''&gt;</div>\r\n</div>\r\nOr vice versa:\r\n<div class="w3-example">\r\n<div class="w3-code notranslate htmlHigh">&lt;p title="John ''ShotGun'' Nelson"&gt;</div>\r\n</div>\r\n\r\n<hr />\r\n\r\n<h2>Chapter Summary</h2>\r\n<ul>\r\n 	<li>All HTML elements can have <strong>attributes</strong></li>\r\n 	<li>The HTML <strong>title</strong> attribute provides additional "tool-tip" information</li>\r\n 	<li>The HTML <strong>href</strong> attribute provides address information for links</li>\r\n 	<li>The HTML <strong>width</strong> and <strong>height</strong> attributes provide size information for images</li>\r\n 	<li>The HTML <strong>alt</strong> attribute provides text for screen readers</li>\r\n 	<li>At W3Schools we always use <strong>lowercase</strong> HTML attribute names</li>\r\n 	<li>At W3Schools we always <strong>quote</strong> attributes with double quotes</li>\r\n</ul>', 'HTML Attributes', '', 'publish', 'closed', 'closed', '', 'html-attributes-3', '', '', '2016-05-20 20:37:30', '2016-05-20 20:37:30', '', 0, 'http://localhost/invatacel/lessons/html-attributes-3/', 0, 'lp_lesson', '', 0),
(82, 1, '2016-05-20 20:37:23', '2016-05-20 20:37:23', '<p class="intro">Attributes provide additional information about HTML elements.</p>\r\n\r\n\r\n<hr />\r\n\r\n<h2>HTML Attributes</h2>\r\n<ul>\r\n 	<li>HTML elements can have <b>attributes</b></li>\r\n 	<li>Attributes provide <b>additional information</b> about an element</li>\r\n 	<li>Attributes are always specified in <b>the start tag</b></li>\r\n 	<li>Attributes come in name/value pairs like: <b>name="value"</b></li>\r\n</ul>\r\n\r\n<hr />\r\n\r\n<h2>The lang Attribute</h2>\r\nThe document language can be declared in the <strong>&lt;html&gt;</strong> tag.\r\n\r\nThe language is declared in the <strong>lang</strong> attribute.\r\n\r\nDeclaring a language is important for accessibility applications (screen readers) and search engines:\r\n<div class="w3-example">\r\n<div class="w3-code notranslate htmlHigh">&lt;!DOCTYPE html&gt;\r\n&lt;html lang="en-US"&gt;\r\n&lt;body&gt;\r\n\r\n&lt;h1&gt;My First Heading&lt;/h1&gt;\r\n&lt;p&gt;My first paragraph.&lt;/p&gt;\r\n\r\n&lt;/body&gt;\r\n&lt;/html&gt;</div>\r\n</div>\r\nThe first two letters specify the language (en). If there is a dialect, use two more letters (US).\r\n\r\n<hr />\r\n\r\n<h2>The title Attribute</h2>\r\nHTML paragraphs are defined with the <strong>&lt;p&gt;</strong> tag.\r\n\r\nIn this example, the <strong>&lt;p&gt;</strong> element has a <strong>title</strong> attribute. The value of the attribute is "<strong>About W3Schools</strong>":\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate htmlHigh">&lt;p title="About W3Schools"&gt;\r\nW3Schools is a web developer''s site.\r\nIt provides tutorials and references covering\r\nmany aspects of web programming,\r\nincluding HTML, CSS, JavaScript, XML, SQL, PHP, ASP, etc.\r\n&lt;/p&gt;</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n<table class="lamp">\r\n<tbody>\r\n<tr>\r\n<th><img src="http://www.w3schools.com/images/lamp.jpg" alt="Note" /></th>\r\n<td>When you move the mouse over the element, the title will be displayed as a tooltip.</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n\r\n<hr />\r\n\r\n<h2>The href Attribute</h2>\r\nHTML links are defined with the <strong>&lt;a&gt;</strong> tag. The link address is specified in the <b>href</b> attribute:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate htmlHigh">&lt;a href="http://www.w3schools.com"&gt;This is a link&lt;/a&gt;</div>\r\n</div>\r\n<div class="w3-example"></div>\r\nYou will learn more about links and the &lt;a&gt; tag later in this tutorial.\r\n\r\n<hr />\r\n\r\n<h2>Size Attributes</h2>\r\nHTML images are defined with the <strong>&lt;img&gt;</strong> tag.\r\n\r\nThe filename of the source (<strong>src</strong>), and the size of the image (<strong>width</strong> and <strong>height</strong>) are all provided as <strong>attributes</strong>:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate htmlHigh">&lt;img src="w3schools.jpg" width="104" height="142"&gt;</div>\r\n</div>\r\n<div class="w3-example"></div>\r\nThe image size is specified in pixels: width="104" means 104 screen pixels wide.\r\n\r\nYou will learn more about images and the &lt;img&gt; tag later in this tutorial.\r\n\r\n<hr />\r\n\r\n<h2>The alt Attribute</h2>\r\nThe <strong>alt</strong> attribute specifies an alternative text to be used, when an image cannot be displayed.\r\n\r\nThe value of the attribute can be read by screen readers. This way, someone "listening" to the webpage, e.g. a blind person, can "hear" the element.\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate htmlHigh">&lt;img src="w3schools.jpg" alt="W3Schools.com" width="104" height="142"&gt;</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n\r\n<hr />\r\n\r\n<h2>We Suggest: Always Use Lowercase Attributes</h2>\r\nThe HTML5 standard does not require lower case attribute names.\r\n\r\nThe title attribute can be written with upper or lower case like <strong>Title</strong> and/or <strong>TITLE</strong>.\r\n\r\nW3C <strong>recommends</strong> lowercase in HTML4, and <strong>demands</strong> lowercase for stricter document types like XHTML.\r\n<table class="lamp">\r\n<tbody>\r\n<tr>\r\n<th><img src="http://www.w3schools.com/images/lamp.jpg" alt="Note" /></th>\r\n<td>Lower case is the most common. Lower case is easier to type.\r\nAt W3Schools we always use lower case attribute names.</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n\r\n<hr />\r\n\r\n<h2>We Suggest: Always Quote Attribute Values</h2>\r\nThe HTML5 standard does not require quotes around attribute values.\r\n\r\nThe <strong>href</strong> attribute, demonstrated above, can be written as:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate htmlHigh">&lt;a href=http://www.w3schools.com&gt;</div>\r\n</div>\r\n<div class="w3-example"></div>\r\nW3C <b>recommends</b> quotes in HTML4, and <strong>demands</strong> quotes for stricter document types like XHTML.\r\n\r\nSometimes it is <strong>necessary</strong> to use quotes. This will not display correctly, because it contains a space:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate htmlHigh">&lt;p title=About W3Schools&gt;</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n<table class="lamp">\r\n<tbody>\r\n<tr>\r\n<th><img src="http://www.w3schools.com/images/lamp.jpg" alt="Note" /></th>\r\n<td>Using quotes are the most common. Omitting quotes can produce errors.\r\nAt W3Schools we always use quotes around attribute values.</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n\r\n<hr />\r\n\r\n<h2>Single or Double Quotes?</h2>\r\nDouble style quotes are the most common in HTML, but single style can also be used.\r\n\r\nIn some situations, when the attribute value itself contains double quotes, it is necessary to use single quotes:\r\n<div class="w3-example">\r\n<div class="w3-code notranslate htmlHigh">&lt;p title=''John "ShotGun" Nelson''&gt;</div>\r\n</div>\r\nOr vice versa:\r\n<div class="w3-example">\r\n<div class="w3-code notranslate htmlHigh">&lt;p title="John ''ShotGun'' Nelson"&gt;</div>\r\n</div>\r\n\r\n<hr />\r\n\r\n<h2>Chapter Summary</h2>\r\n<ul>\r\n 	<li>All HTML elements can have <strong>attributes</strong></li>\r\n 	<li>The HTML <strong>title</strong> attribute provides additional "tool-tip" information</li>\r\n 	<li>The HTML <strong>href</strong> attribute provides address information for links</li>\r\n 	<li>The HTML <strong>width</strong> and <strong>height</strong> attributes provide size information for images</li>\r\n 	<li>The HTML <strong>alt</strong> attribute provides text for screen readers</li>\r\n 	<li>At W3Schools we always use <strong>lowercase</strong> HTML attribute names</li>\r\n 	<li>At W3Schools we always <strong>quote</strong> attributes with double quotes</li>\r\n</ul>', 'HTML Attributes', '', 'inherit', 'closed', 'closed', '', '81-revision-v1', '', '', '2016-05-20 20:37:23', '2016-05-20 20:37:23', '', 81, 'http://localhost/invatacel/2016/05/20/81-revision-v1/', 0, 'revision', '', 0),
(83, 1, '2016-05-20 20:37:30', '2016-05-20 20:37:30', '<p class="intro">Attributes provide additional information about HTML elements.</p>\r\n\r\n\r\n<hr />\r\n\r\n<h2>HTML Attributes</h2>\r\n<ul>\r\n 	<li>HTML elements can have <b>attributes</b></li>\r\n 	<li>Attributes provide <b>additional information</b> about an element</li>\r\n 	<li>Attributes are always specified in <b>the start tag</b></li>\r\n 	<li>Attributes come in name/value pairs like: <b>name="value"</b></li>\r\n</ul>\r\n\r\n<hr />\r\n\r\n<h2>The lang Attribute</h2>\r\nThe document language can be declared in the <strong>&lt;html&gt;</strong> tag.\r\n\r\nThe language is declared in the <strong>lang</strong> attribute.\r\n\r\nDeclaring a language is important for accessibility applications (screen readers) and search engines:\r\n<div class="w3-example">\r\n<div class="w3-code notranslate htmlHigh">&lt;!DOCTYPE html&gt;\r\n&lt;html lang="en-US"&gt;\r\n&lt;body&gt;&lt;h1&gt;My First Heading&lt;/h1&gt;\r\n&lt;p&gt;My first paragraph.&lt;/p&gt;\r\n\r\n&lt;/body&gt;\r\n&lt;/html&gt;\r\n\r\n</div>\r\n</div>\r\nThe first two letters specify the language (en). If there is a dialect, use two more letters (US).\r\n\r\n<hr />\r\n\r\n<h2>The title Attribute</h2>\r\nHTML paragraphs are defined with the <strong>&lt;p&gt;</strong> tag.\r\n\r\nIn this example, the <strong>&lt;p&gt;</strong> element has a <strong>title</strong> attribute. The value of the attribute is "<strong>About W3Schools</strong>":\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate htmlHigh">&lt;p title="About W3Schools"&gt;\r\nW3Schools is a web developer''s site.\r\nIt provides tutorials and references covering\r\nmany aspects of web programming,\r\nincluding HTML, CSS, JavaScript, XML, SQL, PHP, ASP, etc.\r\n&lt;/p&gt;</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n<table class="lamp">\r\n<tbody>\r\n<tr>\r\n<th><img src="http://www.w3schools.com/images/lamp.jpg" alt="Note" /></th>\r\n<td>When you move the mouse over the element, the title will be displayed as a tooltip.</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n\r\n<hr />\r\n\r\n<h2>The href Attribute</h2>\r\nHTML links are defined with the <strong>&lt;a&gt;</strong> tag. The link address is specified in the <b>href</b> attribute:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate htmlHigh">&lt;a href="http://www.w3schools.com"&gt;This is a link&lt;/a&gt;</div>\r\n</div>\r\n<div class="w3-example"></div>\r\nYou will learn more about links and the &lt;a&gt; tag later in this tutorial.\r\n\r\n<hr />\r\n\r\n<h2>Size Attributes</h2>\r\nHTML images are defined with the <strong>&lt;img&gt;</strong> tag.\r\n\r\nThe filename of the source (<strong>src</strong>), and the size of the image (<strong>width</strong> and <strong>height</strong>) are all provided as <strong>attributes</strong>:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate htmlHigh">&lt;img src="w3schools.jpg" width="104" height="142"&gt;</div>\r\n</div>\r\n<div class="w3-example"></div>\r\nThe image size is specified in pixels: width="104" means 104 screen pixels wide.\r\n\r\nYou will learn more about images and the &lt;img&gt; tag later in this tutorial.\r\n\r\n<hr />\r\n\r\n<h2>The alt Attribute</h2>\r\nThe <strong>alt</strong> attribute specifies an alternative text to be used, when an image cannot be displayed.\r\n\r\nThe value of the attribute can be read by screen readers. This way, someone "listening" to the webpage, e.g. a blind person, can "hear" the element.\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate htmlHigh">&lt;img src="w3schools.jpg" alt="W3Schools.com" width="104" height="142"&gt;</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n\r\n<hr />\r\n\r\n<h2>We Suggest: Always Use Lowercase Attributes</h2>\r\nThe HTML5 standard does not require lower case attribute names.\r\n\r\nThe title attribute can be written with upper or lower case like <strong>Title</strong> and/or <strong>TITLE</strong>.\r\n\r\nW3C <strong>recommends</strong> lowercase in HTML4, and <strong>demands</strong> lowercase for stricter document types like XHTML.\r\n<table class="lamp">\r\n<tbody>\r\n<tr>\r\n<th><img src="http://www.w3schools.com/images/lamp.jpg" alt="Note" /></th>\r\n<td>Lower case is the most common. Lower case is easier to type.\r\nAt W3Schools we always use lower case attribute names.</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n\r\n<hr />\r\n\r\n<h2>We Suggest: Always Quote Attribute Values</h2>\r\nThe HTML5 standard does not require quotes around attribute values.\r\n\r\nThe <strong>href</strong> attribute, demonstrated above, can be written as:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate htmlHigh">&lt;a href=http://www.w3schools.com&gt;</div>\r\n</div>\r\n<div class="w3-example"></div>\r\nW3C <b>recommends</b> quotes in HTML4, and <strong>demands</strong> quotes for stricter document types like XHTML.\r\n\r\nSometimes it is <strong>necessary</strong> to use quotes. This will not display correctly, because it contains a space:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate htmlHigh">&lt;p title=About W3Schools&gt;</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n<table class="lamp">\r\n<tbody>\r\n<tr>\r\n<th><img src="http://www.w3schools.com/images/lamp.jpg" alt="Note" /></th>\r\n<td>Using quotes are the most common. Omitting quotes can produce errors.\r\nAt W3Schools we always use quotes around attribute values.</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n\r\n<hr />\r\n\r\n<h2>Single or Double Quotes?</h2>\r\nDouble style quotes are the most common in HTML, but single style can also be used.\r\n\r\nIn some situations, when the attribute value itself contains double quotes, it is necessary to use single quotes:\r\n<div class="w3-example">\r\n<div class="w3-code notranslate htmlHigh">&lt;p title=''John "ShotGun" Nelson''&gt;</div>\r\n</div>\r\nOr vice versa:\r\n<div class="w3-example">\r\n<div class="w3-code notranslate htmlHigh">&lt;p title="John ''ShotGun'' Nelson"&gt;</div>\r\n</div>\r\n\r\n<hr />\r\n\r\n<h2>Chapter Summary</h2>\r\n<ul>\r\n 	<li>All HTML elements can have <strong>attributes</strong></li>\r\n 	<li>The HTML <strong>title</strong> attribute provides additional "tool-tip" information</li>\r\n 	<li>The HTML <strong>href</strong> attribute provides address information for links</li>\r\n 	<li>The HTML <strong>width</strong> and <strong>height</strong> attributes provide size information for images</li>\r\n 	<li>The HTML <strong>alt</strong> attribute provides text for screen readers</li>\r\n 	<li>At W3Schools we always use <strong>lowercase</strong> HTML attribute names</li>\r\n 	<li>At W3Schools we always <strong>quote</strong> attributes with double quotes</li>\r\n</ul>', 'HTML Attributes', '', 'inherit', 'closed', 'closed', '', '81-revision-v1', '', '', '2016-05-20 20:37:30', '2016-05-20 20:37:30', '', 81, 'http://localhost/invatacel/2016/05/20/81-revision-v1/', 0, 'revision', '', 0),
(87, 1, '2016-05-20 20:40:20', '2016-05-20 20:40:20', '<p class="intro">Headings are important in HTML documents.</p>\r\n\r\n\r\n<hr />\r\n\r\n<h2>HTML Headings</h2>\r\nHeadings are defined with the &lt;h1&gt; to &lt;h6&gt; tags.\r\n\r\n&lt;h1&gt; defines the most important heading. &lt;h6&gt; defines the least important heading.\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate htmlHigh">&lt;h1&gt;This is a heading&lt;/h1&gt;\r\n&lt;h2&gt;This is a heading&lt;/h2&gt;\r\n&lt;h3&gt;This is a heading&lt;/h3&gt;</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n<b>Note:</b> Browsers automatically add some empty space (a margin) before and after each heading.\r\n\r\n<hr />\r\n\r\n<h2>Headings Are Important</h2>\r\nUse HTML headings for headings only. Don''t use headings to make text <b>BIG</b> or <b>bold</b>.\r\n\r\nSearch engines use your headings to index the structure and content of your web pages.\r\n\r\nUsers skim your pages by its headings. It is important to use headings to show the document structure.\r\n\r\nh1 headings should be main headings, followed by h2 headings, then the less important h3, and so on.\r\n\r\n<hr />\r\n\r\n<h2>HTML Horizontal Rules</h2>\r\nThe <strong>&lt;hr&gt;</strong> tag creates a horizontal line in an HTML page.\r\n\r\nThe hr element can be used to separate content:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate htmlHigh">&lt;p&gt;This is a paragraph.&lt;/p&gt;\r\n&lt;hr&gt;\r\n&lt;p&gt;This is a paragraph.&lt;/p&gt;\r\n&lt;hr&gt;\r\n&lt;p&gt;This is a paragraph.&lt;/p&gt;</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n\r\n<hr />\r\n\r\n<h2>The HTML &lt;head&gt; Element</h2>\r\nThe HTML <strong>&lt;head&gt;</strong> element has nothing to do with HTML headings.\r\n\r\nThe HTML &lt;head&gt; element contains <strong>meta data</strong>. Meta data are not displayed.\r\n\r\nThe HTML &lt;head&gt; element is placed between the &lt;html&gt; tag and the &lt;body&gt; tag:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate htmlHigh">&lt;!DOCTYPE html&gt;\r\n&lt;html&gt;&lt;head&gt;\r\n&lt;title&gt;My First HTML&lt;/title&gt;\r\n&lt;meta charset="UTF-8"&gt;\r\n&lt;/head&gt;\r\n\r\n&lt;body&gt;\r\n.\r\n.\r\n.\r\n\r\n</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n<table class="lamp">\r\n<tbody>\r\n<tr>\r\n<th><img src="http://www.w3schools.com/images/lamp.jpg" alt="Note" /></th>\r\n<td>Meta data means data <strong>about</strong> data. HTML meta data is data <strong>about</strong> the HTML document.</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n\r\n<hr />\r\n\r\n<h2>The HTML &lt;title&gt; Element</h2>\r\nThe HTML <strong>&lt;title&gt;</strong> element is meta data. It defines the HTML document''s title.\r\n\r\nThe title will not be displayed in the document, but might be displayed in the browser tab.\r\n\r\n<hr />\r\n\r\n<h2>The HTML &lt;meta&gt; Element</h2>\r\nThe HTML <strong>&lt;meta&gt;</strong> element is also meta data.\r\n\r\nIt can be used to define the character set, and other information about the HTML document.\r\n\r\n<hr />\r\n\r\n<h2>More Meta Elements</h2>\r\nIn the chapter about HTML styles you discover more meta elements:\r\n\r\nThe HTML <strong>&lt;style&gt;</strong> element is used to define internal CSS style sheets.\r\n\r\nThe HTML <strong>&lt;link&gt;</strong> element is used to define external CSS style sheets.\r\n\r\n<hr />\r\n\r\n<h2>HTML Tip - How to View HTML Source</h2>\r\nHave you ever seen a Web page and wondered "Hey! How did they do that?"\r\n\r\nTo find out, right-click in the page and select "View Page Source" (in Chrome) or "View Source" (in IE), or similar in another browser. This will open a window containing the HTML code of the page.', 'HTML Headings', '', 'publish', 'closed', 'closed', '', 'html-headings-2', '', '', '2016-05-20 20:41:05', '2016-05-20 20:41:05', '', 0, 'http://localhost/invatacel/lessons/html-headings-2/', 0, 'lp_lesson', '', 0),
(88, 1, '2016-05-20 20:40:31', '2016-05-20 20:40:31', '<p class="intro">Headings are important in HTML documents.</p>\r\n\r\n\r\n<hr />\r\n\r\n<h2>HTML Headings</h2>\r\nHeadings are defined with the &lt;h1&gt; to &lt;h6&gt; tags.\r\n\r\n&lt;h1&gt; defines the most important heading. &lt;h6&gt; defines the least important heading.\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate htmlHigh">&lt;h1&gt;This is a heading&lt;/h1&gt;\r\n&lt;h2&gt;This is a heading&lt;/h2&gt;\r\n&lt;h3&gt;This is a heading&lt;/h3&gt;</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n<b>Note:</b> Browsers automatically add some empty space (a margin) before and after each heading.\r\n\r\n<hr />\r\n\r\n<h2>Headings Are Important</h2>\r\nUse HTML headings for headings only. Don''t use headings to make text <b>BIG</b> or <b>bold</b>.\r\n\r\nSearch engines use your headings to index the structure and content of your web pages.\r\n\r\nUsers skim your pages by its headings. It is important to use headings to show the document structure.\r\n\r\nh1 headings should be main headings, followed by h2 headings, then the less important h3, and so on.\r\n\r\n<hr />\r\n\r\n<h2>HTML Horizontal Rules</h2>\r\nThe <strong>&lt;hr&gt;</strong> tag creates a horizontal line in an HTML page.\r\n\r\nThe hr element can be used to separate content:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate htmlHigh">&lt;p&gt;This is a paragraph.&lt;/p&gt;\r\n&lt;hr&gt;\r\n&lt;p&gt;This is a paragraph.&lt;/p&gt;\r\n&lt;hr&gt;\r\n&lt;p&gt;This is a paragraph.&lt;/p&gt;</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n\r\n<hr />\r\n\r\n<h2>The HTML &lt;head&gt; Element</h2>\r\nThe HTML <strong>&lt;head&gt;</strong> element has nothing to do with HTML headings.\r\n\r\nThe HTML &lt;head&gt; element contains <strong>meta data</strong>. Meta data are not displayed.\r\n\r\nThe HTML &lt;head&gt; element is placed between the &lt;html&gt; tag and the &lt;body&gt; tag:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate htmlHigh">&lt;!DOCTYPE html&gt;\r\n&lt;html&gt;\r\n\r\n&lt;head&gt;\r\n&lt;title&gt;My First HTML&lt;/title&gt;\r\n&lt;meta charset="UTF-8"&gt;\r\n&lt;/head&gt;\r\n\r\n&lt;body&gt;\r\n.\r\n.\r\n.</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n<table class="lamp">\r\n<tbody>\r\n<tr>\r\n<th><img src="http://www.w3schools.com/images/lamp.jpg" alt="Note" /></th>\r\n<td>Meta data means data <strong>about</strong> data. HTML meta data is data <strong>about</strong> the HTML document.</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n\r\n<hr />\r\n\r\n<h2>The HTML &lt;title&gt; Element</h2>\r\nThe HTML <strong>&lt;title&gt;</strong> element is meta data. It defines the HTML document''s title.\r\n\r\nThe title will not be displayed in the document, but might be displayed in the browser tab.\r\n\r\n<hr />\r\n\r\n<h2>The HTML &lt;meta&gt; Element</h2>\r\nThe HTML <strong>&lt;meta&gt;</strong> element is also meta data.\r\n\r\nIt can be used to define the character set, and other information about the HTML document.\r\n\r\n<hr />\r\n\r\n<h2>More Meta Elements</h2>\r\nIn the chapter about HTML styles you discover more meta elements:\r\n\r\nThe HTML <strong>&lt;style&gt;</strong> element is used to define internal CSS style sheets.\r\n\r\nThe HTML <strong>&lt;link&gt;</strong> element is used to define external CSS style sheets.\r\n\r\n<hr />\r\n\r\n<h2>HTML Tip - How to View HTML Source</h2>\r\nHave you ever seen a Web page and wondered "Hey! How did they do that?"\r\n\r\nTo find out, right-click in the page and select "View Page Source" (in Chrome) or "View Source" (in IE), or similar in another browser. This will open a window containing the HTML code of the page.', 'HTML Headings', '', 'inherit', 'closed', 'closed', '', '87-revision-v1', '', '', '2016-05-20 20:40:31', '2016-05-20 20:40:31', '', 87, 'http://localhost/invatacel/2016/05/20/87-revision-v1/', 0, 'revision', '', 0),
(89, 1, '2016-05-20 20:41:05', '2016-05-20 20:41:05', '<p class="intro">Headings are important in HTML documents.</p>\r\n\r\n\r\n<hr />\r\n\r\n<h2>HTML Headings</h2>\r\nHeadings are defined with the &lt;h1&gt; to &lt;h6&gt; tags.\r\n\r\n&lt;h1&gt; defines the most important heading. &lt;h6&gt; defines the least important heading.\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate htmlHigh">&lt;h1&gt;This is a heading&lt;/h1&gt;\r\n&lt;h2&gt;This is a heading&lt;/h2&gt;\r\n&lt;h3&gt;This is a heading&lt;/h3&gt;</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n<b>Note:</b> Browsers automatically add some empty space (a margin) before and after each heading.\r\n\r\n<hr />\r\n\r\n<h2>Headings Are Important</h2>\r\nUse HTML headings for headings only. Don''t use headings to make text <b>BIG</b> or <b>bold</b>.\r\n\r\nSearch engines use your headings to index the structure and content of your web pages.\r\n\r\nUsers skim your pages by its headings. It is important to use headings to show the document structure.\r\n\r\nh1 headings should be main headings, followed by h2 headings, then the less important h3, and so on.\r\n\r\n<hr />\r\n\r\n<h2>HTML Horizontal Rules</h2>\r\nThe <strong>&lt;hr&gt;</strong> tag creates a horizontal line in an HTML page.\r\n\r\nThe hr element can be used to separate content:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate htmlHigh">&lt;p&gt;This is a paragraph.&lt;/p&gt;\r\n&lt;hr&gt;\r\n&lt;p&gt;This is a paragraph.&lt;/p&gt;\r\n&lt;hr&gt;\r\n&lt;p&gt;This is a paragraph.&lt;/p&gt;</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n\r\n<hr />\r\n\r\n<h2>The HTML &lt;head&gt; Element</h2>\r\nThe HTML <strong>&lt;head&gt;</strong> element has nothing to do with HTML headings.\r\n\r\nThe HTML &lt;head&gt; element contains <strong>meta data</strong>. Meta data are not displayed.\r\n\r\nThe HTML &lt;head&gt; element is placed between the &lt;html&gt; tag and the &lt;body&gt; tag:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate htmlHigh">&lt;!DOCTYPE html&gt;\r\n&lt;html&gt;&lt;head&gt;\r\n&lt;title&gt;My First HTML&lt;/title&gt;\r\n&lt;meta charset="UTF-8"&gt;\r\n&lt;/head&gt;\r\n\r\n&lt;body&gt;\r\n.\r\n.\r\n.\r\n\r\n</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n<table class="lamp">\r\n<tbody>\r\n<tr>\r\n<th><img src="http://www.w3schools.com/images/lamp.jpg" alt="Note" /></th>\r\n<td>Meta data means data <strong>about</strong> data. HTML meta data is data <strong>about</strong> the HTML document.</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n\r\n<hr />\r\n\r\n<h2>The HTML &lt;title&gt; Element</h2>\r\nThe HTML <strong>&lt;title&gt;</strong> element is meta data. It defines the HTML document''s title.\r\n\r\nThe title will not be displayed in the document, but might be displayed in the browser tab.\r\n\r\n<hr />\r\n\r\n<h2>The HTML &lt;meta&gt; Element</h2>\r\nThe HTML <strong>&lt;meta&gt;</strong> element is also meta data.\r\n\r\nIt can be used to define the character set, and other information about the HTML document.\r\n\r\n<hr />\r\n\r\n<h2>More Meta Elements</h2>\r\nIn the chapter about HTML styles you discover more meta elements:\r\n\r\nThe HTML <strong>&lt;style&gt;</strong> element is used to define internal CSS style sheets.\r\n\r\nThe HTML <strong>&lt;link&gt;</strong> element is used to define external CSS style sheets.\r\n\r\n<hr />\r\n\r\n<h2>HTML Tip - How to View HTML Source</h2>\r\nHave you ever seen a Web page and wondered "Hey! How did they do that?"\r\n\r\nTo find out, right-click in the page and select "View Page Source" (in Chrome) or "View Source" (in IE), or similar in another browser. This will open a window containing the HTML code of the page.', 'HTML Headings', '', 'inherit', 'closed', 'closed', '', '87-revision-v1', '', '', '2016-05-20 20:41:05', '2016-05-20 20:41:05', '', 87, 'http://localhost/invatacel/2016/05/20/87-revision-v1/', 0, 'revision', '', 0),
(90, 1, '2016-05-20 20:41:30', '2016-05-20 20:41:30', '<p class="intro">HTML documents are divided into paragraphs.</p>\r\n\r\n\r\n<hr />\r\n\r\n<h2>HTML Paragraphs</h2>\r\nThe HTML <strong>&lt;p&gt;</strong> element defines a <strong>paragraph</strong>.\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate htmlHigh">&lt;p&gt;This is a paragraph&lt;/p&gt;\r\n&lt;p&gt;This is another paragraph&lt;/p&gt;</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n<table class="lamp">\r\n<tbody>\r\n<tr>\r\n<th><img src="http://www.w3schools.com/images/lamp.jpg" alt="Note" /></th>\r\n<td>Browsers automatically add some white space before and after a paragraph.</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n\r\n<hr />\r\n\r\n<h2>HTML Display</h2>\r\nYou cannot be sure how HTML will be displayed.\r\n\r\nLarge or small screens, and resized windows will create different results.\r\n\r\nWith HTML, you cannot change the output by adding extra spaces or extra lines in your HTML code.\r\n\r\nThe browser will remove extra spaces and extra lines when the page is displayed.\r\n\r\nAny number of spaces, and any number of new lines, count as <strong>only one space</strong>.\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate htmlHigh">&lt;p&gt;\r\nThis paragraph\r\ncontains a lot of lines\r\nin the source code,\r\nbut the browser\r\nignores it.\r\n&lt;/p&gt;&lt;p&gt;\r\nThis paragraph\r\ncontains         a lot of spaces\r\nin the source         code,\r\nbut the        browser\r\nignores it.\r\n&lt;/p&gt;\r\n\r\n</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n\r\n<hr />\r\n\r\n<h2>Don''t Forget the End Tag</h2>\r\nMost browsers will display HTML correctly even if you forget the end tag:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate htmlHigh">&lt;p&gt;This is a paragraph\r\n&lt;p&gt;This is another paragraph</div>\r\n</div>\r\n<div class="w3-example"></div>\r\nThe example above will work in most browsers, but do not rely on it.\r\n\r\nForgetting the end tag can produce unexpected results or errors.\r\n<table class="lamp">\r\n<tbody>\r\n<tr>\r\n<th><img src="http://www.w3schools.com/images/lamp.jpg" alt="Note" /></th>\r\n<td>Stricter versions of HTML, like XHTML, do not allow you to skip the end tag.</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n\r\n<hr />\r\n\r\n<h2>HTML Line Breaks</h2>\r\nThe HTML <strong>&lt;br&gt;</strong> element defines a <strong>line break</strong>.\r\n\r\nUse &lt;br&gt; if you want a line break (a new line) without starting a new paragraph:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate htmlHigh">&lt;p&gt;This is&lt;br&gt;a para&lt;br&gt;graph with line breaks&lt;/p&gt;</div>\r\n</div>\r\n<div class="w3-example"></div>\r\nThe &lt;br&gt; element is an empty HTML element. It has no end tag.\r\n\r\n<hr />\r\n\r\n<h2>The Poem Problem</h2>\r\nThis poem will display as one line:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate htmlHigh">&lt;p&gt;\r\nMy Bonnie lies over the ocean.My Bonnie lies over the sea.\r\n\r\nMy Bonnie lies over the ocean.\r\n\r\nOh, bring back my Bonnie to me.\r\n&lt;/p&gt;\r\n\r\n</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n\r\n<hr />\r\n\r\n<h2>The HTML &lt;pre&gt; Element</h2>\r\nThe HTML &lt;pre&gt; element defines preformatted text.\r\n\r\nThe text inside a &lt;pre&gt; element is displayed in a fixed-width font (usually Courier), and it preserves both spaces and line breaks:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate htmlHigh">&lt;pre&gt;\r\nMy Bonnie lies over the ocean.My Bonnie lies over the sea.\r\n\r\nMy Bonnie lies over the ocean.\r\n\r\nOh, bring back my Bonnie to me.\r\n&lt;/pre&gt;\r\n\r\n</div>\r\n</div>', 'HTML Paragraphs', '', 'publish', 'closed', 'closed', '', 'html-paragraphs', '', '', '2016-05-20 20:42:01', '2016-05-20 20:42:01', '', 0, 'http://localhost/invatacel/lessons/html-paragraphs/', 0, 'lp_lesson', '', 0),
(91, 1, '2016-05-20 20:41:56', '2016-05-20 20:41:56', '<p class="intro">HTML documents are divided into paragraphs.</p>\r\n\r\n\r\n<hr />\r\n\r\n<h2>HTML Paragraphs</h2>\r\nThe HTML <strong>&lt;p&gt;</strong> element defines a <strong>paragraph</strong>.\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate htmlHigh">&lt;p&gt;This is a paragraph&lt;/p&gt;\r\n&lt;p&gt;This is another paragraph&lt;/p&gt;</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n<table class="lamp">\r\n<tbody>\r\n<tr>\r\n<th><img src="http://www.w3schools.com/images/lamp.jpg" alt="Note" /></th>\r\n<td>Browsers automatically add some white space before and after a paragraph.</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n\r\n<hr />\r\n\r\n<h2>HTML Display</h2>\r\nYou cannot be sure how HTML will be displayed.\r\n\r\nLarge or small screens, and resized windows will create different results.\r\n\r\nWith HTML, you cannot change the output by adding extra spaces or extra lines in your HTML code.\r\n\r\nThe browser will remove extra spaces and extra lines when the page is displayed.\r\n\r\nAny number of spaces, and any number of new lines, count as <strong>only one space</strong>.\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate htmlHigh">&lt;p&gt;\r\nThis paragraph\r\ncontains a lot of lines\r\nin the source code,\r\nbut the browser\r\nignores it.\r\n&lt;/p&gt;\r\n\r\n&lt;p&gt;\r\nThis paragraph\r\ncontains         a lot of spaces\r\nin the source         code,\r\nbut the        browser\r\nignores it.\r\n&lt;/p&gt;</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n\r\n<hr />\r\n\r\n<h2>Don''t Forget the End Tag</h2>\r\nMost browsers will display HTML correctly even if you forget the end tag:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate htmlHigh">&lt;p&gt;This is a paragraph\r\n&lt;p&gt;This is another paragraph</div>\r\n</div>\r\n<div class="w3-example"></div>\r\nThe example above will work in most browsers, but do not rely on it.\r\n\r\nForgetting the end tag can produce unexpected results or errors.\r\n<table class="lamp">\r\n<tbody>\r\n<tr>\r\n<th><img src="http://www.w3schools.com/images/lamp.jpg" alt="Note" /></th>\r\n<td>Stricter versions of HTML, like XHTML, do not allow you to skip the end tag.</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n\r\n<hr />\r\n\r\n<h2>HTML Line Breaks</h2>\r\nThe HTML <strong>&lt;br&gt;</strong> element defines a <strong>line break</strong>.\r\n\r\nUse &lt;br&gt; if you want a line break (a new line) without starting a new paragraph:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate htmlHigh">&lt;p&gt;This is&lt;br&gt;a para&lt;br&gt;graph with line breaks&lt;/p&gt;</div>\r\n</div>\r\n<div class="w3-example"></div>\r\nThe &lt;br&gt; element is an empty HTML element. It has no end tag.\r\n\r\n<hr />\r\n\r\n<h2>The Poem Problem</h2>\r\nThis poem will display as one line:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate htmlHigh">&lt;p&gt;\r\nMy Bonnie lies over the ocean.\r\n\r\nMy Bonnie lies over the sea.\r\n\r\nMy Bonnie lies over the ocean.\r\n\r\nOh, bring back my Bonnie to me.\r\n&lt;/p&gt;</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n\r\n<hr />\r\n\r\n<h2>The HTML &lt;pre&gt; Element</h2>\r\nThe HTML &lt;pre&gt; element defines preformatted text.\r\n\r\nThe text inside a &lt;pre&gt; element is displayed in a fixed-width font (usually Courier), and it preserves both spaces and line breaks:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate htmlHigh">&lt;pre&gt;\r\nMy Bonnie lies over the ocean.\r\n\r\nMy Bonnie lies over the sea.\r\n\r\nMy Bonnie lies over the ocean.\r\n\r\nOh, bring back my Bonnie to me.\r\n&lt;/pre&gt;</div>\r\n</div>', 'HTML Paragraphs', '', 'inherit', 'closed', 'closed', '', '90-revision-v1', '', '', '2016-05-20 20:41:56', '2016-05-20 20:41:56', '', 90, 'http://localhost/invatacel/2016/05/20/90-revision-v1/', 0, 'revision', '', 0),
(92, 1, '2016-05-20 20:42:01', '2016-05-20 20:42:01', '<p class="intro">HTML documents are divided into paragraphs.</p>\r\n\r\n\r\n<hr />\r\n\r\n<h2>HTML Paragraphs</h2>\r\nThe HTML <strong>&lt;p&gt;</strong> element defines a <strong>paragraph</strong>.\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate htmlHigh">&lt;p&gt;This is a paragraph&lt;/p&gt;\r\n&lt;p&gt;This is another paragraph&lt;/p&gt;</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n<table class="lamp">\r\n<tbody>\r\n<tr>\r\n<th><img src="http://www.w3schools.com/images/lamp.jpg" alt="Note" /></th>\r\n<td>Browsers automatically add some white space before and after a paragraph.</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n\r\n<hr />\r\n\r\n<h2>HTML Display</h2>\r\nYou cannot be sure how HTML will be displayed.\r\n\r\nLarge or small screens, and resized windows will create different results.\r\n\r\nWith HTML, you cannot change the output by adding extra spaces or extra lines in your HTML code.\r\n\r\nThe browser will remove extra spaces and extra lines when the page is displayed.\r\n\r\nAny number of spaces, and any number of new lines, count as <strong>only one space</strong>.\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate htmlHigh">&lt;p&gt;\r\nThis paragraph\r\ncontains a lot of lines\r\nin the source code,\r\nbut the browser\r\nignores it.\r\n&lt;/p&gt;&lt;p&gt;\r\nThis paragraph\r\ncontains         a lot of spaces\r\nin the source         code,\r\nbut the        browser\r\nignores it.\r\n&lt;/p&gt;\r\n\r\n</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n\r\n<hr />\r\n\r\n<h2>Don''t Forget the End Tag</h2>\r\nMost browsers will display HTML correctly even if you forget the end tag:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate htmlHigh">&lt;p&gt;This is a paragraph\r\n&lt;p&gt;This is another paragraph</div>\r\n</div>\r\n<div class="w3-example"></div>\r\nThe example above will work in most browsers, but do not rely on it.\r\n\r\nForgetting the end tag can produce unexpected results or errors.\r\n<table class="lamp">\r\n<tbody>\r\n<tr>\r\n<th><img src="http://www.w3schools.com/images/lamp.jpg" alt="Note" /></th>\r\n<td>Stricter versions of HTML, like XHTML, do not allow you to skip the end tag.</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n\r\n<hr />\r\n\r\n<h2>HTML Line Breaks</h2>\r\nThe HTML <strong>&lt;br&gt;</strong> element defines a <strong>line break</strong>.\r\n\r\nUse &lt;br&gt; if you want a line break (a new line) without starting a new paragraph:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate htmlHigh">&lt;p&gt;This is&lt;br&gt;a para&lt;br&gt;graph with line breaks&lt;/p&gt;</div>\r\n</div>\r\n<div class="w3-example"></div>\r\nThe &lt;br&gt; element is an empty HTML element. It has no end tag.\r\n\r\n<hr />\r\n\r\n<h2>The Poem Problem</h2>\r\nThis poem will display as one line:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate htmlHigh">&lt;p&gt;\r\nMy Bonnie lies over the ocean.My Bonnie lies over the sea.\r\n\r\nMy Bonnie lies over the ocean.\r\n\r\nOh, bring back my Bonnie to me.\r\n&lt;/p&gt;\r\n\r\n</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n\r\n<hr />\r\n\r\n<h2>The HTML &lt;pre&gt; Element</h2>\r\nThe HTML &lt;pre&gt; element defines preformatted text.\r\n\r\nThe text inside a &lt;pre&gt; element is displayed in a fixed-width font (usually Courier), and it preserves both spaces and line breaks:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate htmlHigh">&lt;pre&gt;\r\nMy Bonnie lies over the ocean.My Bonnie lies over the sea.\r\n\r\nMy Bonnie lies over the ocean.\r\n\r\nOh, bring back my Bonnie to me.\r\n&lt;/pre&gt;\r\n\r\n</div>\r\n</div>', 'HTML Paragraphs', '', 'inherit', 'closed', 'closed', '', '90-revision-v1', '', '', '2016-05-20 20:42:01', '2016-05-20 20:42:01', '', 90, 'http://localhost/invatacel/2016/05/20/90-revision-v1/', 0, 'revision', '', 0),
(93, 1, '2016-05-21 12:56:02', '2016-05-21 12:56:02', '<h3>HTML Styles</h3>\r\n<div class="w3-code notranslate">\r\n<h2><span style="color: #ff0000;">I am red</span></h2>\r\n<h2><span style="color: #0000ff;">I am blue</span></h2>\r\n</div>\r\n<div class="w3-example"></div>\r\n\r\n<hr />\r\n\r\n<h2>The HTML Style Attribute</h2>\r\nSetting the style of an HTML element, can be done with the <strong>style attribute</strong>.\r\n\r\nThe HTML style attribute has the following <strong>syntax</strong>:\r\n<div class="w3-example">\r\n<div class="w3-code notranslate">style="<em>property</em>:<em>value;</em>"</div>\r\n</div>\r\nThe <em><strong>property</strong></em> is a CSS property. The <em><strong>value</strong></em> is a CSS value.\r\n<table class="lamp">\r\n<tbody>\r\n<tr>\r\n<th><img src="http://www.w3schools.com/images/lamp.jpg" alt="Note" /></th>\r\n<td>You will learn more about CSS later in this tutorial.</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n\r\n<hr />\r\n\r\n<h2>HTML Background Color</h2>\r\nThe <strong>background-color</strong> property defines the background color for an HTML element:\r\n\r\nThis example sets the background for a page to lightgrey:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate htmlHigh">\r\n\r\n&lt;body style="background-color:lightgrey;"&gt;\r\n\r\n&lt;h1&gt;This is a heading&lt;/h1&gt;\r\n&lt;p&gt;This is a paragraph.&lt;/p&gt;\r\n\r\n&lt;/body&gt;\r\n\r\n</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n\r\n<hr />\r\n\r\n<h2>HTML Text Color</h2>\r\nThe <strong>color</strong> property defines the text color for an HTML element:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate htmlHigh">&lt;h1 style="color:blue;"&gt;This is a heading&lt;/h1&gt;\r\n&lt;p style="color:red;"&gt;This is a paragraph.&lt;/p&gt;</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n\r\n<hr />\r\n\r\n<h2>HTML Fonts</h2>\r\nThe <strong>font-family</strong> property defines the font to be used for an HTML element:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate htmlHigh">&lt;h1 style="font-family:verdana;"&gt;This is a heading&lt;/h1&gt;\r\n&lt;p style="font-family:courier;"&gt;This is a paragraph.&lt;/p&gt;</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n\r\n<hr />\r\n\r\n<h2>HTML Text Size</h2>\r\nThe <strong>font-size</strong> property defines the text size for an HTML element:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate htmlHigh">&lt;h1 style="font-size:300%;"&gt;This is a heading&lt;/h1&gt;\r\n&lt;p style="font-size:160%;"&gt;This is a paragraph.&lt;/p&gt;</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n\r\n<hr />\r\n\r\n<h2>HTML Text Alignment</h2>\r\nThe <strong>text-align</strong> property defines the horizontal text alignment for an HTML element:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate htmlHigh">&lt;h1 style="text-align:center;"&gt;Centered Heading&lt;/h1&gt;\r\n&lt;p&gt;This is a paragraph.&lt;/p&gt;</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n\r\n<hr />\r\n\r\n<h2>Chapter Summary</h2>\r\n<ul>\r\n 	<li>Use the <strong>style</strong> attribute for styling HTML elements</li>\r\n 	<li>Use <strong>background-color</strong> for background color</li>\r\n 	<li>Use <strong>color</strong> for text colors</li>\r\n 	<li>Use <strong>font-family</strong> for text fonts</li>\r\n 	<li>Use <strong>font-size</strong> for text sizes</li>\r\n 	<li>Use <strong>text-align</strong> for text alignment</li>\r\n</ul>', 'HTML Styles', '', 'publish', 'closed', 'closed', '', 'html-styles', '', '', '2016-05-21 12:57:25', '2016-05-21 12:57:25', '', 0, 'http://localhost/invatacel/lessons/html-styles/', 0, 'lp_lesson', '', 0);
INSERT INTO `wp_posts` (`ID`, `post_author`, `post_date`, `post_date_gmt`, `post_content`, `post_title`, `post_excerpt`, `post_status`, `comment_status`, `ping_status`, `post_password`, `post_name`, `to_ping`, `pinged`, `post_modified`, `post_modified_gmt`, `post_content_filtered`, `post_parent`, `guid`, `menu_order`, `post_type`, `post_mime_type`, `comment_count`) VALUES
(94, 1, '2016-05-21 12:56:57', '2016-05-21 12:56:57', '<h3>HTML Styles</h3>\r\n<div class="w3-code notranslate">\r\n<h2><span style="color: #ff0000;">I am red</span></h2>\r\n<h2><span style="color: #0000ff;">I am blue</span></h2>\r\n</div>\r\n<div class="w3-example"></div>\r\n\r\n<hr />\r\n\r\n<h2>The HTML Style Attribute</h2>\r\nSetting the style of an HTML element, can be done with the <strong>style attribute</strong>.\r\n\r\nThe HTML style attribute has the following <strong>syntax</strong>:\r\n<div class="w3-example">\r\n<div class="w3-code notranslate">style="<em>property</em>:<em>value;</em>"</div>\r\n</div>\r\nThe <em><strong>property</strong></em> is a CSS property. The <em><strong>value</strong></em> is a CSS value.\r\n<table class="lamp">\r\n<tbody>\r\n<tr>\r\n<th><img src="http://www.w3schools.com/images/lamp.jpg" alt="Note" /></th>\r\n<td>You will learn more about CSS later in this tutorial.</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n\r\n<hr />\r\n\r\n<h2>HTML Background Color</h2>\r\nThe <strong>background-color</strong> property defines the background color for an HTML element:\r\n\r\nThis example sets the background for a page to lightgrey:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate htmlHigh">&lt;body style="background-color:lightgrey;"&gt;\r\n\r\n&lt;h1&gt;This is a heading&lt;/h1&gt;\r\n&lt;p&gt;This is a paragraph.&lt;/p&gt;\r\n\r\n&lt;/body&gt;</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n\r\n<hr />\r\n\r\n<h2>HTML Text Color</h2>\r\nThe <strong>color</strong> property defines the text color for an HTML element:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate htmlHigh">&lt;h1 style="color:blue;"&gt;This is a heading&lt;/h1&gt;\r\n&lt;p style="color:red;"&gt;This is a paragraph.&lt;/p&gt;</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n\r\n<hr />\r\n\r\n<h2>HTML Fonts</h2>\r\nThe <strong>font-family</strong> property defines the font to be used for an HTML element:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate htmlHigh">&lt;h1 style="font-family:verdana;"&gt;This is a heading&lt;/h1&gt;\r\n&lt;p style="font-family:courier;"&gt;This is a paragraph.&lt;/p&gt;</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n\r\n<hr />\r\n\r\n<h2>HTML Text Size</h2>\r\nThe <strong>font-size</strong> property defines the text size for an HTML element:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate htmlHigh">&lt;h1 style="font-size:300%;"&gt;This is a heading&lt;/h1&gt;\r\n&lt;p style="font-size:160%;"&gt;This is a paragraph.&lt;/p&gt;</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n\r\n<hr />\r\n\r\n<h2>HTML Text Alignment</h2>\r\nThe <strong>text-align</strong> property defines the horizontal text alignment for an HTML element:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate htmlHigh">&lt;h1 style="text-align:center;"&gt;Centered Heading&lt;/h1&gt;\r\n&lt;p&gt;This is a paragraph.&lt;/p&gt;</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n\r\n<hr />\r\n\r\n<h2>Chapter Summary</h2>\r\n<ul>\r\n 	<li>Use the <strong>style</strong> attribute for styling HTML elements</li>\r\n 	<li>Use <strong>background-color</strong> for background color</li>\r\n 	<li>Use <strong>color</strong> for text colors</li>\r\n 	<li>Use <strong>font-family</strong> for text fonts</li>\r\n 	<li>Use <strong>font-size</strong> for text sizes</li>\r\n 	<li>Use <strong>text-align</strong> for text alignment</li>\r\n</ul>', 'HTML Styles', '', 'inherit', 'closed', 'closed', '', '93-revision-v1', '', '', '2016-05-21 12:56:57', '2016-05-21 12:56:57', '', 93, 'http://localhost/invatacel/2016/05/21/93-revision-v1/', 0, 'revision', '', 0),
(95, 1, '2016-05-21 12:57:25', '2016-05-21 12:57:25', '<h3>HTML Styles</h3>\r\n<div class="w3-code notranslate">\r\n<h2><span style="color: #ff0000;">I am red</span></h2>\r\n<h2><span style="color: #0000ff;">I am blue</span></h2>\r\n</div>\r\n<div class="w3-example"></div>\r\n\r\n<hr />\r\n\r\n<h2>The HTML Style Attribute</h2>\r\nSetting the style of an HTML element, can be done with the <strong>style attribute</strong>.\r\n\r\nThe HTML style attribute has the following <strong>syntax</strong>:\r\n<div class="w3-example">\r\n<div class="w3-code notranslate">style="<em>property</em>:<em>value;</em>"</div>\r\n</div>\r\nThe <em><strong>property</strong></em> is a CSS property. The <em><strong>value</strong></em> is a CSS value.\r\n<table class="lamp">\r\n<tbody>\r\n<tr>\r\n<th><img src="http://www.w3schools.com/images/lamp.jpg" alt="Note" /></th>\r\n<td>You will learn more about CSS later in this tutorial.</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n\r\n<hr />\r\n\r\n<h2>HTML Background Color</h2>\r\nThe <strong>background-color</strong> property defines the background color for an HTML element:\r\n\r\nThis example sets the background for a page to lightgrey:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate htmlHigh">\r\n\r\n&lt;body style="background-color:lightgrey;"&gt;\r\n\r\n&lt;h1&gt;This is a heading&lt;/h1&gt;\r\n&lt;p&gt;This is a paragraph.&lt;/p&gt;\r\n\r\n&lt;/body&gt;\r\n\r\n</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n\r\n<hr />\r\n\r\n<h2>HTML Text Color</h2>\r\nThe <strong>color</strong> property defines the text color for an HTML element:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate htmlHigh">&lt;h1 style="color:blue;"&gt;This is a heading&lt;/h1&gt;\r\n&lt;p style="color:red;"&gt;This is a paragraph.&lt;/p&gt;</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n\r\n<hr />\r\n\r\n<h2>HTML Fonts</h2>\r\nThe <strong>font-family</strong> property defines the font to be used for an HTML element:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate htmlHigh">&lt;h1 style="font-family:verdana;"&gt;This is a heading&lt;/h1&gt;\r\n&lt;p style="font-family:courier;"&gt;This is a paragraph.&lt;/p&gt;</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n\r\n<hr />\r\n\r\n<h2>HTML Text Size</h2>\r\nThe <strong>font-size</strong> property defines the text size for an HTML element:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate htmlHigh">&lt;h1 style="font-size:300%;"&gt;This is a heading&lt;/h1&gt;\r\n&lt;p style="font-size:160%;"&gt;This is a paragraph.&lt;/p&gt;</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n\r\n<hr />\r\n\r\n<h2>HTML Text Alignment</h2>\r\nThe <strong>text-align</strong> property defines the horizontal text alignment for an HTML element:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate htmlHigh">&lt;h1 style="text-align:center;"&gt;Centered Heading&lt;/h1&gt;\r\n&lt;p&gt;This is a paragraph.&lt;/p&gt;</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n\r\n<hr />\r\n\r\n<h2>Chapter Summary</h2>\r\n<ul>\r\n 	<li>Use the <strong>style</strong> attribute for styling HTML elements</li>\r\n 	<li>Use <strong>background-color</strong> for background color</li>\r\n 	<li>Use <strong>color</strong> for text colors</li>\r\n 	<li>Use <strong>font-family</strong> for text fonts</li>\r\n 	<li>Use <strong>font-size</strong> for text sizes</li>\r\n 	<li>Use <strong>text-align</strong> for text alignment</li>\r\n</ul>', 'HTML Styles', '', 'inherit', 'closed', 'closed', '', '93-revision-v1', '', '', '2016-05-21 12:57:25', '2016-05-21 12:57:25', '', 93, 'http://localhost/invatacel/2016/05/21/93-revision-v1/', 0, 'revision', '', 0),
(96, 1, '2016-05-21 12:58:39', '2016-05-21 12:58:39', '<div class="w3-example">\r\n<h3>Text Formatting</h3>\r\n<div class="w3-code notranslate"><b>This text is bold</b>\r\n\r\n<i>This text is italic</i>\r\n\r\nThis is <sup> superscript</sup></div>\r\n</div>\r\n\r\n<hr />\r\n\r\n<h2>HTML Formatting Elements</h2>\r\nIn the previous chapter, you learned about HTML <strong>styling</strong>, using the HTML <strong>style attribute</strong>.\r\n\r\nHTML also defines special <strong>elements</strong> for defining text with a special <strong>meaning</strong>.\r\n\r\nHTML uses elements like &lt;b&gt; and &lt;i&gt; for formatting output, like <b>bold</b> or <i>italic</i> text.\r\n\r\nFormatting elements were designed to display special <strong>types of text</strong>:\r\n<ul>\r\n 	<li>Bold text</li>\r\n 	<li>Important text</li>\r\n 	<li>Italic text</li>\r\n 	<li>Emphasized text</li>\r\n 	<li>Marked text</li>\r\n 	<li>Small text</li>\r\n 	<li>Deleted text</li>\r\n 	<li>Inserted text</li>\r\n 	<li>Subscripts</li>\r\n 	<li>Superscripts</li>\r\n</ul>\r\n\r\n<hr />\r\n\r\n<h2>HTML <b>Bold</b> and <strong>Strong</strong> Formatting</h2>\r\nThe HTML <strong>&lt;b&gt;</strong> element defines <strong>bold</strong> text, without any extra importance.\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate htmlHigh">&lt;p&gt;This text is normal.&lt;/p&gt;\r\n\r\n&lt;p&gt;&lt;b&gt;This text is bold&lt;/b&gt;.&lt;/p&gt;</div>\r\n</div>\r\n<div class="w3-example"></div>\r\nThe HTML <strong>&lt;strong&gt;</strong> element defines <strong>strong</strong> text, with added semantic "strong" importance.\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate htmlHigh">&lt;p&gt;This text is normal.&lt;/p&gt;\r\n\r\n&lt;p&gt;&lt;strong&gt;This text is strong&lt;/strong&gt;.&lt;/p&gt;</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n\r\n<hr />\r\n\r\n<h2>HTML <i>Italic</i> and <em>Emphasized</em> Formatting</h2>\r\nThe HTML <strong>&lt;i&gt;</strong> element defines <em>italic</em> text, without any extra importance.\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate htmlHigh">&lt;p&gt;This text is normal.&lt;/p&gt;\r\n\r\n&lt;p&gt;&lt;i&gt;This text is italic&lt;/i&gt;.&lt;/p&gt;</div>\r\n</div>\r\n<div class="w3-example"></div>\r\nThe HTML <strong>&lt;em&gt;</strong> element defines <em>emphasized</em> text, with added semantic importance.\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate htmlHigh">&lt;p&gt;This text is normal.&lt;/p&gt;\r\n\r\n&lt;p&gt;&lt;em&gt;This text is emphasized&lt;/em&gt;.&lt;/p&gt;</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n<table class="lamp">\r\n<tbody>\r\n<tr>\r\n<th><img src="http://www.w3schools.com/images/lamp.jpg" alt="Note" /></th>\r\n<td>Browsers display &lt;strong&gt; as &lt;b&gt;, and &lt;em&gt; as &lt;i&gt;.\r\n\r\nHowever, there is a difference in the meaning of these tags: &lt;b&gt; and &lt;i&gt; defines bold and italic text,\r\nbut &lt;strong&gt; and &lt;em&gt; means that the text is "important".</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n\r\n<hr />\r\n\r\n<h2>HTML <small>Small</small> Formatting</h2>\r\nThe HTML <strong>&lt;small&gt;</strong> element defines <strong>small</strong> text:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate htmlHigh">&lt;h2&gt;HTML &lt;small&gt;Small&lt;/small&gt; Formatting&lt;/h2&gt;</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n\r\n<hr />\r\n\r\n<h2>HTML <mark>Marked</mark> Formatting</h2>\r\nThe HTML <strong>&lt;mark&gt;</strong> element defines <strong>marked</strong> or highlighted text:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate htmlHigh">&lt;h2&gt;HTML &lt;mark&gt;Marked&lt;/mark&gt; Formatting&lt;/h2&gt;</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n\r\n<hr />\r\n\r\n<h2>HTML <del>Deleted</del> Formatting</h2>\r\nThe HTML <strong>&lt;del&gt;</strong> element defines <strong>deleted</strong> (removed) text.\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate htmlHigh">&lt;p&gt;My favorite color is &lt;del&gt;blue&lt;/del&gt; red.&lt;/p&gt;</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n\r\n<hr />\r\n\r\n<h2>HTML <ins>Inserted</ins> Formatting</h2>\r\nThe HTML <strong>&lt;ins&gt;</strong> element defines <strong>inserted</strong> (added) text.\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate htmlHigh">&lt;p&gt;My favorite &lt;ins&gt;color&lt;/ins&gt; is red.&lt;/p&gt;</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n\r\n<hr />\r\n\r\n<h2>HTML <sub>Subscript</sub> Formatting</h2>\r\nThe HTML <strong>&lt;sub&gt;</strong> element defines <strong>subscripted </strong>text.\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate htmlHigh">&lt;p&gt;This is &lt;sub&gt;subscripted&lt;/sub&gt; text.&lt;/p&gt;</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n\r\n<hr />\r\n\r\n<h2>HTML <sup>Superscript</sup> Formatting</h2>\r\nThe HTML <strong>&lt;sup&gt;</strong> element defines <strong>superscripted</strong> text.\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate htmlHigh">&lt;p&gt;This is &lt;sup&gt;superscripted&lt;/sup&gt; text.&lt;/p&gt;</div>\r\n</div>', 'HTML Formatting', '', 'publish', 'closed', 'closed', '', 'html-formatting', '', '', '2016-05-21 12:59:23', '2016-05-21 12:59:23', '', 0, 'http://localhost/invatacel/lessons/html-formatting/', 0, 'lp_lesson', '', 0),
(97, 1, '2016-05-21 12:59:23', '2016-05-21 12:59:23', '<div class="w3-example">\r\n<h3>Text Formatting</h3>\r\n<div class="w3-code notranslate"><b>This text is bold</b>\r\n\r\n<i>This text is italic</i>\r\n\r\nThis is <sup> superscript</sup></div>\r\n</div>\r\n\r\n<hr />\r\n\r\n<h2>HTML Formatting Elements</h2>\r\nIn the previous chapter, you learned about HTML <strong>styling</strong>, using the HTML <strong>style attribute</strong>.\r\n\r\nHTML also defines special <strong>elements</strong> for defining text with a special <strong>meaning</strong>.\r\n\r\nHTML uses elements like &lt;b&gt; and &lt;i&gt; for formatting output, like <b>bold</b> or <i>italic</i> text.\r\n\r\nFormatting elements were designed to display special <strong>types of text</strong>:\r\n<ul>\r\n 	<li>Bold text</li>\r\n 	<li>Important text</li>\r\n 	<li>Italic text</li>\r\n 	<li>Emphasized text</li>\r\n 	<li>Marked text</li>\r\n 	<li>Small text</li>\r\n 	<li>Deleted text</li>\r\n 	<li>Inserted text</li>\r\n 	<li>Subscripts</li>\r\n 	<li>Superscripts</li>\r\n</ul>\r\n\r\n<hr />\r\n\r\n<h2>HTML <b>Bold</b> and <strong>Strong</strong> Formatting</h2>\r\nThe HTML <strong>&lt;b&gt;</strong> element defines <strong>bold</strong> text, without any extra importance.\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate htmlHigh">&lt;p&gt;This text is normal.&lt;/p&gt;\r\n\r\n&lt;p&gt;&lt;b&gt;This text is bold&lt;/b&gt;.&lt;/p&gt;</div>\r\n</div>\r\n<div class="w3-example"></div>\r\nThe HTML <strong>&lt;strong&gt;</strong> element defines <strong>strong</strong> text, with added semantic "strong" importance.\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate htmlHigh">&lt;p&gt;This text is normal.&lt;/p&gt;\r\n\r\n&lt;p&gt;&lt;strong&gt;This text is strong&lt;/strong&gt;.&lt;/p&gt;</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n\r\n<hr />\r\n\r\n<h2>HTML <i>Italic</i> and <em>Emphasized</em> Formatting</h2>\r\nThe HTML <strong>&lt;i&gt;</strong> element defines <em>italic</em> text, without any extra importance.\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate htmlHigh">&lt;p&gt;This text is normal.&lt;/p&gt;\r\n\r\n&lt;p&gt;&lt;i&gt;This text is italic&lt;/i&gt;.&lt;/p&gt;</div>\r\n</div>\r\n<div class="w3-example"></div>\r\nThe HTML <strong>&lt;em&gt;</strong> element defines <em>emphasized</em> text, with added semantic importance.\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate htmlHigh">&lt;p&gt;This text is normal.&lt;/p&gt;\r\n\r\n&lt;p&gt;&lt;em&gt;This text is emphasized&lt;/em&gt;.&lt;/p&gt;</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n<table class="lamp">\r\n<tbody>\r\n<tr>\r\n<th><img src="http://www.w3schools.com/images/lamp.jpg" alt="Note" /></th>\r\n<td>Browsers display &lt;strong&gt; as &lt;b&gt;, and &lt;em&gt; as &lt;i&gt;.\r\n\r\nHowever, there is a difference in the meaning of these tags: &lt;b&gt; and &lt;i&gt; defines bold and italic text,\r\nbut &lt;strong&gt; and &lt;em&gt; means that the text is "important".</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n\r\n<hr />\r\n\r\n<h2>HTML <small>Small</small> Formatting</h2>\r\nThe HTML <strong>&lt;small&gt;</strong> element defines <strong>small</strong> text:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate htmlHigh">&lt;h2&gt;HTML &lt;small&gt;Small&lt;/small&gt; Formatting&lt;/h2&gt;</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n\r\n<hr />\r\n\r\n<h2>HTML <mark>Marked</mark> Formatting</h2>\r\nThe HTML <strong>&lt;mark&gt;</strong> element defines <strong>marked</strong> or highlighted text:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate htmlHigh">&lt;h2&gt;HTML &lt;mark&gt;Marked&lt;/mark&gt; Formatting&lt;/h2&gt;</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n\r\n<hr />\r\n\r\n<h2>HTML <del>Deleted</del> Formatting</h2>\r\nThe HTML <strong>&lt;del&gt;</strong> element defines <strong>deleted</strong> (removed) text.\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate htmlHigh">&lt;p&gt;My favorite color is &lt;del&gt;blue&lt;/del&gt; red.&lt;/p&gt;</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n\r\n<hr />\r\n\r\n<h2>HTML <ins>Inserted</ins> Formatting</h2>\r\nThe HTML <strong>&lt;ins&gt;</strong> element defines <strong>inserted</strong> (added) text.\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate htmlHigh">&lt;p&gt;My favorite &lt;ins&gt;color&lt;/ins&gt; is red.&lt;/p&gt;</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n\r\n<hr />\r\n\r\n<h2>HTML <sub>Subscript</sub> Formatting</h2>\r\nThe HTML <strong>&lt;sub&gt;</strong> element defines <strong>subscripted </strong>text.\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate htmlHigh">&lt;p&gt;This is &lt;sub&gt;subscripted&lt;/sub&gt; text.&lt;/p&gt;</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n\r\n<hr />\r\n\r\n<h2>HTML <sup>Superscript</sup> Formatting</h2>\r\nThe HTML <strong>&lt;sup&gt;</strong> element defines <strong>superscripted</strong> text.\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate htmlHigh">&lt;p&gt;This is &lt;sup&gt;superscripted&lt;/sup&gt; text.&lt;/p&gt;</div>\r\n</div>', 'HTML Formatting', '', 'inherit', 'closed', 'closed', '', '96-revision-v1', '', '', '2016-05-21 12:59:23', '2016-05-21 12:59:23', '', 96, 'http://localhost/invatacel/2016/05/21/96-revision-v1/', 0, 'revision', '', 0),
(98, 1, '2016-05-21 13:05:51', '2016-05-21 13:05:51', '<p class="intro">Comment tags &lt;!-- and --&gt; are used to insert comments in HTML.</p>\r\n\r\n\r\n<hr />\r\n\r\n<h2>HTML Comment Tags</h2>\r\nYou can add comments to your HTML source by using the following syntax:\r\n<div class="w3-example">\r\n<div class="w3-code notranslate htmlHigh">&lt;!-- Write your comments here --&gt;</div>\r\n</div>\r\n<table class="lamp">\r\n<tbody>\r\n<tr>\r\n<th><img src="http://www.w3schools.com/images/lamp.jpg" alt="Note" /></th>\r\n<td><b>Note:</b> There is an exclamation point (!) in the opening tag, but not in the closing tag.</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\nComments are not displayed by the browser, but they can help document your HTML.\r\n\r\nWith comments you can place notifications and reminders in your HTML:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate htmlHigh">&lt;!-- This is a comment --&gt;\r\n\r\n&lt;p&gt;This is a paragraph.&lt;/p&gt;\r\n\r\n&lt;!-- Remember to add more information here --&gt;</div>\r\n</div>\r\n<div class="w3-example"></div>\r\nComments are also great for debugging HTML, because you can comment out HTML lines of code, one at a time, to search for errors:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate htmlHigh">&lt;!-- Do not display this at the moment\r\n&lt;img border="0" src="pic_mountain.jpg" alt="Mountain"&gt;\r\n--&gt;</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n\r\n<hr />\r\n\r\n<h2>Conditional Comments</h2>\r\nYou might stumble upon conditional comments in HTML:\r\n<div class="w3-example">\r\n<div class="w3-code notranslate htmlHigh">&lt;!--[if IE 8]&gt;\r\n.... some HTML here ....\r\n&lt;![endif]--&gt;</div>\r\n</div>\r\nConditional comments defines HTML tags to be executed by Internet Explorer only.\r\n\r\n<hr />\r\n\r\n<h2>Software Program Tags</h2>\r\nHTML comments tags can also be generated by various HTML software programs.\r\n\r\nFor example &lt;!--webbot bot--&gt; tags wrapped inside HTML comments by FrontPage and Expression Web.\r\n\r\nAs a rule, let these tags stay, to help support the software that created them.', 'HTML Comments', '', 'publish', 'closed', 'closed', '', 'html-comments', '', '', '2016-05-21 13:07:52', '2016-05-21 13:07:52', '', 0, 'http://localhost/invatacel/lessons/html-comments/', 0, 'lp_lesson', '', 0),
(99, 1, '2016-05-21 13:06:02', '2016-05-21 13:06:02', '<p class="intro">TVs and computer screens display colors by combining Red, Green, and Blue light.</p>\r\n\r\n\r\n<hr />\r\n\r\n<h2>Color Names</h2>\r\nWith CSS, colors can be set by using color names:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="notranslate">\r\n<div class="table-responsive">\r\n<table class="w3-table-all notranslate">\r\n<tbody>\r\n<tr>\r\n<th>Color</th>\r\n<th>Name</th>\r\n</tr>\r\n<tr>\r\n<td> <span style="color: #ff0000;">Red</span></td>\r\n<td>Red</td>\r\n</tr>\r\n<tr>\r\n<td> <span style="color: #ff9900;">Orange</span></td>\r\n<td>Orange</td>\r\n</tr>\r\n<tr>\r\n<td> <span style="color: #ffff00;">Yellow</span></td>\r\n<td>Yellow</td>\r\n</tr>\r\n<tr>\r\n<td> <span style="color: #ccffff;">Cyan</span></td>\r\n<td>Cyan</td>\r\n</tr>\r\n<tr>\r\n<td> <span style="color: #0000ff;">Blue</span></td>\r\n<td>Blue</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n</div>\r\n</div>\r\n</div>\r\n<div class="w3-example"></div>\r\nCSS supports <a href="http://www.w3schools.com/colors/colors_names.asp">140 standard color names</a>.\r\n\r\n<hr />\r\n\r\n<h2>RGB (Red, Green, Blue)</h2>\r\nWith HTML, RGB color values can be specified using this formula: rgb(red, green, blue)\r\n\r\nEach parameter (red, green, and blue) defines the intensity of the color between 0 and 255.\r\n\r\nFor example, rgb(255,0,0) is displayed as red, because red is set to its highest value (255) and the others are set to 0. Experiment by mixing the RGB values below:\r\n<h3>Example</h3>\r\n<div class="notranslate">\r\n<div class="table-responsive">\r\n<table class="w3-table-all notranslate">\r\n<tbody>\r\n<tr>\r\n<th>Color</th>\r\n<th>RGB</th>\r\n</tr>\r\n<tr>\r\n<td> <span style="color: #ff0000;">Red</span></td>\r\n<td>rgb(255,0,0)</td>\r\n</tr>\r\n<tr>\r\n<td> <span style="color: #ffff00;">Yellow</span></td>\r\n<td>rgb(255,255,0)</td>\r\n</tr>\r\n<tr>\r\n<td> <span style="color: #00ff00;">Green</span></td>\r\n<td>rgb(0,255,0)</td>\r\n</tr>\r\n<tr>\r\n<td> <span style="color: #ccffff;">Cyan</span></td>\r\n<td>rgb(0,255,255)</td>\r\n</tr>\r\n<tr>\r\n<td> <span style="color: #0000ff;">Blue</span></td>\r\n<td>rgb(0,0,255)</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n</div>\r\n</div>\r\n<div class="w3-example"></div>\r\nShades of gray are often defined using equal values for all the 3 light sources:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="notranslate">\r\n<div class="table-responsive">\r\n<table class="w3-table-all notranslate">\r\n<tbody>\r\n<tr>\r\n<th>Color</th>\r\n<th>RGB</th>\r\n</tr>\r\n<tr>\r\n<td> Black</td>\r\n<td>rgb(0,0,0)</td>\r\n</tr>\r\n<tr>\r\n<td> <span style="color: #808080;">Gray</span></td>\r\n<td>rgb(128,128,128)</td>\r\n</tr>\r\n<tr>\r\n<td> <span style="color: #ffffff;">White</span></td>\r\n<td>rgb(255,255,255)</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n</div>\r\n</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n\r\n<hr />\r\n\r\n<h2>Hexadecimal Colors</h2>\r\nWith HTML, RGB values can also be specified using hexadecimal color values in the form: #RRGGBB, where RR (red), GG (green) and BB (blue) are hexadecimal values between 00 and FF (same as decimal 0-255).\r\n\r\nFor example, #FF0000 is displayed as red, because red is set to its highest value (FF) and the others are set to the lowest value (00).\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="notranslate">\r\n<div class="table-responsive">\r\n<table class="w3-table-all notranslate">\r\n<tbody>\r\n<tr>\r\n<th>Color</th>\r\n<th>HEX</th>\r\n</tr>\r\n<tr>\r\n<td> <span style="color: #ff0000;">Red</span></td>\r\n<td>#FF0000</td>\r\n</tr>\r\n<tr>\r\n<td> <span style="color: #ffff00;">Yellow</span></td>\r\n<td>#FFFF00</td>\r\n</tr>\r\n<tr>\r\n<td> <span style="color: #00ff00;">Green</span></td>\r\n<td>#00FF00</td>\r\n</tr>\r\n<tr>\r\n<td> <span style="color: #ccffff;">Cyan</span></td>\r\n<td>#00FFFF</td>\r\n</tr>\r\n<tr>\r\n<td> <span style="color: #0000ff;">Blue</span></td>\r\n<td>#0000FF</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n</div>\r\n</div>\r\n</div>\r\n<div class="w3-example"></div>\r\nShades of gray are often defined using equal values for all the 3 light sources:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="notranslate">\r\n<div class="table-responsive">\r\n<table class="w3-table-all notranslate">\r\n<tbody>\r\n<tr>\r\n<th>Color</th>\r\n<th>HEX</th>\r\n</tr>\r\n<tr>\r\n<td> Black</td>\r\n<td>#000000</td>\r\n</tr>\r\n<tr>\r\n<td> <span style="color: #808080;">Gray</span></td>\r\n<td>#808080</td>\r\n</tr>\r\n<tr>\r\n<td> <span style="color: #ffffff;">White</span></td>\r\n<td>#FFFFFF</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n</div>\r\n</div>\r\n</div>', 'HTML Colors', '', 'publish', 'closed', 'closed', '', 'html-colors', '', '', '2016-05-21 13:29:54', '2016-05-21 13:29:54', '', 0, 'http://localhost/invatacel/lessons/html-colors/', 0, 'lp_lesson', '', 0),
(100, 1, '2016-05-21 13:06:11', '2016-05-21 13:06:11', '<h2>Styling HTML with CSS</h2>\r\nCSS stands for <strong>C</strong>ascading <strong>S</strong>tyle <strong>S</strong>heets\r\n\r\nStyling can be added to HTML elements in 3 ways:\r\n<ul>\r\n 	<li>Inline - using a <strong>style attribute</strong> in HTML elements</li>\r\n 	<li>Internal - using a <strong>&lt;style&gt; element</strong> in the HTML &lt;head&gt; section</li>\r\n 	<li>External - using one or more <strong>external CSS files</strong></li>\r\n</ul>\r\nThe most common way to add styling, is to keep the styles in separate CSS files. But, in this tutorial, we use internal styling, because it is easier to demonstrate, and easier for you to try it yourself.\r\n<table class="lamp">\r\n<tbody>\r\n<tr>\r\n<th><img src="http://www.w3schools.com/images/lamp.jpg" alt="Note" /></th>\r\n<td>You can learn much more about CSS in our <a href="http://www.w3schools.com/css/default.asp">CSS Tutorial</a>.</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n\r\n<hr />\r\n\r\n<h2>Inline Styling (Inline CSS)</h2>\r\n<strong>Inline styling</strong> is used to apply a unique style to a single HTML element:\r\n\r\nInline styling uses the <strong>style</strong> attribute.\r\n\r\nThis example changes the text color of the &lt;h1&gt; element to blue:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate htmlHigh">&lt;h1 style="color:blue;"&gt;This is a Blue Heading&lt;/h1&gt;</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n\r\n<hr />\r\n\r\n<h2>Internal Styling (Internal CSS)</h2>\r\nInternal styling is used to define a style for one HTML page.\r\n\r\n<strong>Internal styling</strong> is defined in the <strong>&lt;head&gt;</strong> section of an HTML page, within a <strong>&lt;style&gt;</strong> element:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate htmlHigh">&lt;!DOCTYPE html&gt;\r\n&lt;html&gt;\r\n&lt;head&gt;\r\n&lt;style&gt;\r\nbody {background-color:lightgrey;}\r\nh1   {color:blue;}\r\np    {color:green;}\r\n&lt;/style&gt;\r\n&lt;/head&gt;\r\n&lt;body&gt;\r\n\r\n&lt;h1&gt;This is a heading&lt;/h1&gt;\r\n&lt;p&gt;This is a paragraph.&lt;/p&gt;\r\n\r\n&lt;/body&gt;\r\n&lt;/html&gt;</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n\r\n<hr />\r\n\r\n<h2>External Styling (External CSS)</h2>\r\nAn external style sheet is used to define the style for many pages.\r\n\r\nWith an <strong>external style sheet</strong>, you can change the look of an entire web site by changing one file!\r\n\r\nTo use an external style sheet, add a link to it in the <strong>&lt;head&gt;</strong> section of the HTML page:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate htmlHigh">&lt;!DOCTYPE html&gt;\r\n&lt;html&gt;\r\n&lt;head&gt;\r\n&lt;link rel="stylesheet" href="styles.css"&gt;\r\n&lt;/head&gt;\r\n&lt;body&gt;\r\n\r\n&lt;h1&gt;This is a heading&lt;/h1&gt;\r\n&lt;p&gt;This is a paragraph.&lt;/p&gt;\r\n\r\n&lt;/body&gt;\r\n&lt;/html&gt;</div>\r\n</div>\r\n<div class="w3-example"></div>\r\nAn external style sheet can be written in any text editor. The file should not contain any html tags. The style sheet file must be saved with a .css extension.\r\n\r\nHere is how the "styles.css" looks:\r\n<div class="w3-example">\r\n<div class="w3-code notranslate cssHigh">body {\r\nbackground-color: lightgrey;\r\n}\r\n\r\nh1 {\r\ncolor: blue;\r\n}\r\n\r\np {\r\ncolor:green;\r\n}</div>\r\n</div>\r\n\r\n<hr />\r\n\r\n<h2>CSS Fonts</h2>\r\nThe CSS <strong>color</strong> property defines the text color to be used for the HTML element.\r\n\r\nThe CSS <strong>font-family</strong> property defines the font to be used for the HTML element.\r\n\r\nThe CSS <strong>font-size </strong> property defines the text size to be used for the HTML element.\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate htmlHigh">&lt;!DOCTYPE html&gt;\r\n&lt;html&gt;\r\n&lt;head&gt;\r\n&lt;style&gt;\r\nh1 {\r\ncolor: blue;\r\nfont-family: verdana;\r\nfont-size: 300%;\r\n}\r\np  {\r\ncolor: red;\r\nfont-family: courier;\r\nfont-size: 160%;\r\n}\r\n&lt;/style&gt;\r\n&lt;/head&gt;\r\n&lt;body&gt;\r\n\r\n&lt;h1&gt;This is a heading&lt;/h1&gt;\r\n&lt;p&gt;This is a paragraph.&lt;/p&gt;\r\n\r\n&lt;/body&gt;\r\n&lt;/html&gt;</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n\r\n<hr />\r\n\r\n<h2>The CSS Box Model</h2>\r\nEvery HTML element has a box around it, even if you cannot see it.\r\n\r\nThe CSS <strong>border</strong> property defines a visible border around an HTML element:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate cssHigh">p {\r\nborder: 1px solid black;\r\n}</div>\r\n</div>\r\n<div class="w3-example"></div>\r\nThe CSS <strong>padding</strong> property defines a padding (space) inside the border:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate cssHigh">p {\r\nborder: 1px solid black;\r\npadding: 10px;\r\n}</div>\r\n</div>\r\n<div class="w3-example"></div>\r\nThe CSS <strong>margin</strong> property defines a margin (space) outside the border:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate cssHigh">p {\r\nborder: 1px solid black;\r\npadding: 10px;\r\nmargin: 30px;\r\n}</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n<table class="lamp">\r\n<tbody>\r\n<tr>\r\n<th><img src="http://www.w3schools.com/images/lamp.jpg" alt="Note" /></th>\r\n<td>The CSS examples above use px to define sizes in pixels.</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n\r\n<hr />\r\n\r\n<h2>The id Attribute</h2>\r\nAll the examples above use CSS to style HTML elements in a general way.\r\n\r\nTo define a special style for one special element, first add an id attribute to the element:\r\n<div class="w3-example">\r\n<div class="w3-code notranslate htmlHigh">&lt;p id="p01"&gt;I am different&lt;/p&gt;</div>\r\n</div>\r\nthen define a style for the element with the specific id:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate cssHigh">#p01 {\r\ncolor: blue;\r\n}</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n\r\n<hr />\r\n\r\n<h2>The class Attribute</h2>\r\nTo define a style for a special type (class) of elements, add a class attribute to the element:\r\n<div class="w3-example">\r\n<div class="w3-code notranslate htmlHigh">&lt;p class="error"&gt;I am different&lt;/p&gt;</div>\r\n</div>\r\nNow you can define a different style for elements with the specific class:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate cssHigh">p.error {\r\ncolor: red;\r\n}</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n<table class="lamp">\r\n<tbody>\r\n<tr>\r\n<th><img src="http://www.w3schools.com/images/lamp.jpg" alt="Note" /></th>\r\n<td>Use <strong>id</strong> to address a <strong>single</strong> element. Use <strong> class</strong> to address <strong>groups</strong> of elements.</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n\r\n<hr />\r\n\r\n<h2>Chapter Summary</h2>\r\n<ul>\r\n 	<li>Use the HTML <strong>style</strong> attribute for inline styling</li>\r\n 	<li>Use the HTML <strong>&lt;style&gt;</strong> element to define internal CSS</li>\r\n 	<li>Use the HTML <strong>&lt;link&gt;</strong> element to refer to an external CSS file</li>\r\n 	<li>Use the HTML <strong>&lt;head&gt;</strong> element to store &lt;style&gt; and &lt;link&gt; elements</li>\r\n 	<li>Use the CSS <strong>color</strong> property for text colors</li>\r\n 	<li>Use the CSS <strong>font-family</strong> property for text fonts</li>\r\n 	<li>Use the CSS <strong>font-size</strong> property for text sizes</li>\r\n 	<li>Use the CSS <strong>border</strong> property for visible element borders</li>\r\n 	<li>Use the CSS <strong>padding</strong> property for space inside the border</li>\r\n 	<li>Use the CSS <strong>margin</strong> property for space outside the border</li>\r\n</ul>\r\n\r\n<hr />', 'HTML CSS', '', 'publish', 'closed', 'closed', '', 'html-css', '', '', '2016-05-21 13:30:55', '2016-05-21 13:30:55', '', 0, 'http://localhost/invatacel/lessons/html-css/', 0, 'lp_lesson', '', 0),
(101, 1, '2016-05-21 13:06:19', '2016-05-21 13:06:19', '<p class="intro">Links are found in nearly all web pages. Links allow users to click their way from page to page.</p>\r\n\r\n\r\n<hr />\r\n\r\n<h2>HTML Links - Hyperlinks</h2>\r\nHTML links are hyperlinks.\r\n\r\nA hyperlink is a text or an image you can click on, and jump to another document.\r\n\r\n<hr />\r\n\r\n<h2>HTML Links - Syntax</h2>\r\nIn HTML, links are defined with the <strong>&lt;a&gt;</strong> tag:\r\n<div class="w3-example">\r\n<div class="w3-code notranslate htmlHigh">&lt;a href="<i>url</i>"&gt;<i>link text</i>&lt;/a&gt;</div>\r\n</div>\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate htmlHigh">&lt;a href="http://www.w3schools.com/html/"&gt;Visit our HTML tutorial&lt;/a&gt;</div>\r\n</div>\r\n<div class="w3-example"></div>\r\nThe <strong>href</strong> attribute specifies the destination address (http://www.w3schools.com/html/)\r\n\r\nThe <strong>link text</strong> is the visible part (Visit our HTML tutorial).\r\n\r\nClicking on the link text, will send you to the specified address.\r\n<table class="lamp">\r\n<tbody>\r\n<tr>\r\n<th><img src="http://www.w3schools.com/images/lamp.jpg" alt="Note" /></th>\r\n<td>The link text does not have to be text. It can be an HTML image or any other HTML element.</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n<table class="lamp">\r\n<tbody>\r\n<tr>\r\n<th><img src="http://www.w3schools.com/images/lamp.jpg" alt="Note" /></th>\r\n<td>Without a trailing slash on subfolder addresses, you might generate two requests to the server. Many servers will automatically add a trailing slash to the address, and then create a new request.</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n\r\n<hr />\r\n\r\n<h2>Local Links</h2>\r\nThe example above used an absolute URL (A full web address).\r\n\r\nA local link (link to the same web site) is specified with a relative URL (without http://www....).\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate htmlHigh">&lt;a href="html_images.asp"&gt;HTML Images&lt;/a&gt;</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n\r\n<hr />\r\n\r\n<h2>HTML Links - Colors</h2>\r\nWhen you move the mouse over a link, two things will normally happen:\r\n<ul>\r\n 	<li>The mouse arrow will turn into a little hand</li>\r\n 	<li>The color of the link element will change</li>\r\n</ul>\r\nBy default, a link will appear like this (in all browsers):\r\n<ul>\r\n 	<li>An unvisited link is underlined and blue</li>\r\n 	<li>A visited link is underlined and purple</li>\r\n 	<li>An active link is underlined and red</li>\r\n</ul>\r\nYou can change the default colors, by using styles:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate cssHigh">&lt;style&gt;\r\na:link    {color:green; background-color:transparent; text-decoration:none}\r\na:visited {color:pink; background-color:transparent; text-decoration:none}\r\na:hover   {color:red; background-color:transparent; text-decoration:underline}\r\na:active  {color:yellow; background-color:transparent; text-decoration:underline}\r\n&lt;/style&gt;</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n\r\n<hr />\r\n\r\n<h2>HTML Links - The target Attribute</h2>\r\nThe <strong>target</strong> attribute specifies where to open the linked document.\r\n\r\nThis example will open the linked document in a new browser window or in a new tab:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate htmlHigh">&lt;a href="http://www.w3schools.com/" target="_blank"&gt;Visit W3Schools!&lt;/a&gt;</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n<table class="w3-table-all notranslate">\r\n<tbody>\r\n<tr>\r\n<th>Target Value</th>\r\n<th>Description</th>\r\n</tr>\r\n<tr>\r\n<td>_blank</td>\r\n<td>Opens the linked document in a new window or tab</td>\r\n</tr>\r\n<tr>\r\n<td>_self</td>\r\n<td>Opens the linked document in the same frame as it was clicked (this is default)</td>\r\n</tr>\r\n<tr>\r\n<td>_parent</td>\r\n<td>Opens the linked document in the parent frame</td>\r\n</tr>\r\n<tr>\r\n<td>_top</td>\r\n<td>Opens the linked document in the full body of the window</td>\r\n</tr>\r\n<tr>\r\n<td><i>framename</i></td>\r\n<td>Opens the linked document in a named frame</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\nIf your webpage is locked in a frame, you can use target="_top" to break out of the frame:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate htmlHigh">&lt;a href="http://www.w3schools.com/html/" target="_top"&gt;HTML5 tutorial!&lt;/a&gt;</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n\r\n<hr />\r\n\r\n<h2>HTML Links - Image as Link</h2>\r\nIt is common to use images as links:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate htmlHigh">&lt;a href="default.asp"&gt;\r\n&lt;img src="smiley.gif" alt="HTML tutorial" style="width:42px;height:42px;border:0"&gt;\r\n&lt;/a&gt;</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n<table class="lamp">\r\n<tbody>\r\n<tr>\r\n<th><img src="http://www.w3schools.com/images/lamp.jpg" alt="Note" /></th>\r\n<td>border:0 is added to prevent IE9 (and earlier) from displaying a border around the image.</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n\r\n<hr />\r\n\r\n<h2>HTML Links - Create a Bookmark</h2>\r\nHTML bookmarks are used to allow readers to jump to specific parts of a Web page.\r\n\r\nBookmarks are practical if your website has long pages.\r\n\r\nTo make a bookmark, you must first create the bookmark, and then add a link to it.\r\n\r\nWhen the link is clicked, the page will scroll to the location with the bookmark.\r\n<h2>Example</h2>\r\nFirst, create a bookmark with the id attribute:\r\n<div class="w3-example">\r\n<div class="w3-code notranslate htmlHigh">&lt;h2 id="tips"&gt;Useful Tips Section&lt;/h2&gt;</div>\r\n</div>\r\nThen, add a link to the bookmark ("Useful Tips Section"), from within the same page:\r\n<div class="w3-example">\r\n<div class="w3-code notranslate htmlHigh">&lt;a href="#tips"&gt;Visit the Useful Tips Section&lt;/a&gt;</div>\r\n</div>\r\nOr, add a link to the bookmark ("Useful Tips Section"), from another page:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate htmlHigh">&lt;a href="html_tips.html#tips"&gt;Visit the Useful Tips Section&lt;/a&gt;</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n\r\n<hr />\r\n\r\n<h2>Chapter Summary</h2>\r\n<ul>\r\n 	<li>Use the HTML <strong>&lt;a&gt;</strong> element to define a link</li>\r\n 	<li>Use the HTML <strong>href</strong> attribute to define the link address</li>\r\n 	<li>Use the HTML <strong>target</strong> attribute to define where to open the linked document</li>\r\n 	<li>Use the HTML <strong>&lt;img&gt;</strong> element (inside &lt;a&gt;) to use an image as a link</li>\r\n 	<li>Use the HTML <strong>id</strong> attribute (id="<em>value</em>") to define bookmarks in a page</li>\r\n 	<li>Use the HTML <strong>href </strong>attribute (href="#<em>value</em>") to link to the bookmark</li>\r\n</ul>', 'HTML Links', '', 'publish', 'closed', 'closed', '', 'html-links', '', '', '2016-05-21 13:31:40', '2016-05-21 13:31:40', '', 0, 'http://localhost/invatacel/lessons/html-links/', 0, 'lp_lesson', '', 0);
INSERT INTO `wp_posts` (`ID`, `post_author`, `post_date`, `post_date_gmt`, `post_content`, `post_title`, `post_excerpt`, `post_status`, `comment_status`, `ping_status`, `post_password`, `post_name`, `to_ping`, `pinged`, `post_modified`, `post_modified_gmt`, `post_content_filtered`, `post_parent`, `guid`, `menu_order`, `post_type`, `post_mime_type`, `comment_count`) VALUES
(102, 1, '2016-05-21 13:06:32', '2016-05-21 13:06:32', '<h3>Example</h3>\r\n<div class="w3-code notranslate htmlHigh">&lt;!DOCTYPE html&gt;\r\n&lt;html&gt;\r\n&lt;body&gt;\r\n\r\n&lt;h2&gt;Spectacular Mountain&lt;/h2&gt;\r\n&lt;img src="pic_mountain.jpg" alt="Mountain View" style="width:304px;height:228px;"&gt;\r\n\r\n&lt;/body&gt;\r\n&lt;/html&gt;</div>\r\n<div class="w3-example"></div>\r\n<table class="lamp">\r\n<tbody>\r\n<tr>\r\n<th><img src="http://www.w3schools.com/images/lamp.jpg" alt="Note" /></th>\r\n<td>Always specify the width and height of an image. If width and height are not specified, the page will flicker while the image loads.</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n\r\n<hr />\r\n\r\n<h2>HTML Images Syntax</h2>\r\nIn HTML, images are defined with the <strong>&lt;img&gt;</strong> tag.\r\n\r\nThe &lt;img&gt; tag is empty, it contains attributes only, and does not have a closing tag.\r\n\r\nThe src attribute specifies the URL (web address) of the image:\r\n<div class="w3-example">\r\n<div class="w3-code notranslate htmlHigh">&lt;img src="<i>url</i>" alt="<i>some_text</i>"&gt;</div>\r\n</div>\r\n\r\n<hr />\r\n\r\n<h2>The alt Attribute</h2>\r\nThe alt attribute specifies an alternate text for an image, if the image cannot be displayed.\r\n\r\nThe alt attribute provides alternative information for an image if a user for some reason cannot view it (because of slow connection, an error in the src attribute, or if the user uses a screen reader).\r\n\r\nIf a browser cannot find an image, it will display the alt text:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate htmlHigh">&lt;img src="wrongname.gif" alt="HTML5 Icon" style="width:128px;height:128px;"&gt;</div>\r\n</div>\r\n<div class="w3-example"></div>\r\nThe alt attribute is required. A web page will not validate correctly without it.\r\n\r\n<hr />\r\n\r\n<h2>HTML Screen Readers</h2>\r\nA screen reader is a software program that can read what is displayed on a screen.\r\n\r\nScreen readers are useful to people who are blind, visually impaired, or learning disabled.\r\n<table class="lamp">\r\n<tbody>\r\n<tr>\r\n<th><img src="http://www.w3schools.com/images/lamp.jpg" alt="Note" /></th>\r\n<td>Screen readers can read the <strong>alt</strong> attribute.</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n\r\n<hr />\r\n\r\n<h2>Image Size - Width and Height</h2>\r\nYou can use the <strong>style</strong> attribute to specify the width and height of an image.\r\n\r\nThe values are specified in pixels (use px after the value):\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate htmlHigh">&lt;img src="html5.gif" alt="HTML5 Icon" style="width:128px;height:128px;"&gt;</div>\r\n</div>\r\n<div class="w3-example"></div>\r\nAlternatively, you can use <strong>width</strong> and <strong>height</strong> attributes. Here, the values are specified in pixels by default:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate htmlHigh">&lt;img src="html5.gif" alt="HTML5 Icon" width="128" height="128"&gt;</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n\r\n<hr />\r\n\r\n<h2>Width and Height or Style?</h2>\r\nBoth the width, height, and style attributes are valid in the latest HTML5 standard.\r\n\r\nWe suggest you use the style attribute. It prevents styles sheets from changing the original size of images:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate htmlHigh">&lt;!DOCTYPE html&gt;\r\n&lt;html&gt;\r\n&lt;head&gt;\r\n&lt;style&gt;\r\nimg {\r\nwidth:100%;\r\n}\r\n&lt;/style&gt;\r\n&lt;/head&gt;\r\n&lt;body&gt;\r\n\r\n&lt;img src="html5.gif" alt="HTML5 Icon" style="width:128px;height:128px;"&gt;\r\n&lt;img src="html5.gif" alt="HTML5 Icon" width="128" height="128"&gt;\r\n\r\n&lt;/body&gt;\r\n&lt;/html&gt;</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n\r\n<hr />\r\n\r\n<h2>Images in Another Folder</h2>\r\nIf not specified, the browser expects to find the image in the same folder as the web page.\r\n\r\nHowever, it is common to store images in a sub-folder. You must then include the folder name in the src attribute:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate htmlHigh">&lt;img src="/images/html5.gif" alt="HTML5 Icon" style="width:128px;height:128px;"&gt;</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n\r\n<hr />\r\n\r\n<h2>Images on Another Server</h2>\r\nSome web sites store their images on image servers.\r\n\r\nActually, you can access images from any web address in the world:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate htmlHigh">&lt;img src="http://www.w3schools.com/images/w3schools_green.jpg" alt="W3Schools.com"&gt;</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n\r\n<hr />\r\n\r\n<h2>Animated Images</h2>\r\nThe GIF standard allows animated images:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate htmlHigh">&lt;img src="programming.gif" alt="Computer Man" style="width:48px;height:48px;"&gt;</div>\r\n</div>\r\n<div class="w3-example"></div>\r\nNote that the syntax of inserting animated images is no different from non-animated images.\r\n\r\n<hr />\r\n\r\n<h2>Using an Image as a Link</h2>\r\nTo use an image as a link, simply nest the &lt;img&gt; tag inside the &lt;a&gt; tag:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate htmlHigh">&lt;a href="default.asp"&gt;\r\n&lt;img src="smiley.gif" alt="HTML tutorial" style="width:42px;height:42px;border:0;"&gt;\r\n&lt;/a&gt;</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n<table class="lamp">\r\n<tbody>\r\n<tr>\r\n<th><img src="http://www.w3schools.com/images/lamp.jpg" alt="Note" /></th>\r\n<td>Add "border:0;" to prevent IE9 (and earlier) from displaying a border around the image.</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n\r\n<hr />\r\n\r\n<h2>Image Floating</h2>\r\nUse the CSS float property to let the image float.\r\n\r\nThe image can float to the right or to the left of a text:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate htmlHigh">&lt;p&gt;\r\n&lt;img src="smiley.gif" alt="Smiley face" style="float:right;width:42px;height:42px;"&gt;\r\nThe image will float to the right of the text.\r\n&lt;/p&gt;\r\n\r\n&lt;p&gt;\r\n&lt;img src="smiley.gif" alt="Smiley face" style="float:left;width:42px;height:42px;"&gt;\r\nThe image will float to the left of the text.\r\n&lt;/p&gt;</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n\r\n<hr />\r\n\r\n<h2>Image Maps</h2>\r\nUse the &lt;map&gt; tag to define an image-map. An image-map is an image with clickable areas.\r\n\r\nThe name attribute of the &lt;map&gt; tag is associated with the &lt;img&gt;''s usemap attribute and creates a relationship between the image and the map.\r\n\r\nThe &lt;map&gt; tag contains a number of &lt;area&gt; tags, that defines the clickable areas in the image-map:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate htmlHigh">&lt;img src="planets.gif" alt="Planets" usemap="#planetmap" style="width:145px;height:126px;"&gt;\r\n\r\n&lt;map name="planetmap"&gt;\r\n&lt;area shape="rect" coords="0,0,82,126" alt="Sun" href="sun.htm"&gt;\r\n&lt;area shape="circle" coords="90,58,3" alt="Mercury" href="mercur.htm"&gt;\r\n&lt;area shape="circle" coords="124,58,8" alt="Venus" href="venus.htm"&gt;\r\n&lt;/map&gt;</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n\r\n<hr />\r\n\r\n<h2>Chapter Summary</h2>\r\n<ul>\r\n 	<li>Use the HTML <strong>&lt;img&gt;</strong> element to define an image</li>\r\n 	<li>Use the HTML <strong>src</strong> attribute to define the URL of the image</li>\r\n 	<li>Use the HTML <strong>alt</strong> attribute to define an alternate text for an image, if it cannot be displayed</li>\r\n 	<li>Use the HTML <strong>width</strong> and <strong>height</strong> attributes to define the size of the image</li>\r\n 	<li>Use the CSS <strong>width</strong> and <strong>height</strong> properties to define the size of the image (alternatively)</li>\r\n 	<li>Use the CSS <strong>float</strong> property to let the image float</li>\r\n 	<li>Use the HTML <strong>&lt;map&gt;</strong> element to define an image-map</li>\r\n 	<li>Use the HTML <strong>&lt;area&gt;</strong> element to define the clickable areas in the image-map</li>\r\n 	<li>Use the HTML &lt;img&gt;''s element <strong>usemap</strong> attribute to point to an image-map</li>\r\n</ul>\r\n<table class="lamp">\r\n<tbody>\r\n<tr>\r\n<th><img src="http://www.w3schools.com/images/lamp.jpg" alt="Note" /></th>\r\n<td>Loading images takes time. Large images can slow down your page. Use images carefully.</td>\r\n</tr>\r\n</tbody>\r\n</table>', 'HTML Images', '', 'publish', 'closed', 'closed', '', 'html-images', '', '', '2016-05-21 13:32:58', '2016-05-21 13:32:58', '', 0, 'http://localhost/invatacel/lessons/html-images/', 0, 'lp_lesson', '', 0),
(103, 1, '2016-05-21 13:06:38', '2016-05-21 13:06:38', '<h2>HTML Table Example</h2>\r\n<table class="w3-table-all">\r\n<tbody>\r\n<tr>\r\n<th>Number</th>\r\n<th>First Name</th>\r\n<th>Last Name</th>\r\n<th>Points</th>\r\n</tr>\r\n<tr>\r\n<td>1</td>\r\n<td>Eve</td>\r\n<td>Jackson</td>\r\n<td>94</td>\r\n</tr>\r\n<tr>\r\n<td>2</td>\r\n<td>John</td>\r\n<td>Doe</td>\r\n<td>80</td>\r\n</tr>\r\n<tr>\r\n<td>3</td>\r\n<td>Adam</td>\r\n<td>Johnson</td>\r\n<td>67</td>\r\n</tr>\r\n<tr>\r\n<td>4</td>\r\n<td>Jill</td>\r\n<td>Smith</td>\r\n<td>50</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n\r\n<hr />\r\n\r\n<h2>Defining HTML Tables</h2>\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate htmlHigh">&lt;table style="width:100%"&gt;\r\n&lt;tr&gt;\r\n&lt;td&gt;Jill&lt;/td&gt;\r\n&lt;td&gt;Smith&lt;/td&gt;\r\n&lt;td&gt;50&lt;/td&gt;\r\n&lt;/tr&gt;\r\n&lt;tr&gt;\r\n&lt;td&gt;Eve&lt;/td&gt;\r\n&lt;td&gt;Jackson&lt;/td&gt;\r\n&lt;td&gt;94&lt;/td&gt;\r\n&lt;/tr&gt;\r\n&lt;/table&gt;</div>\r\n</div>\r\n<div class="w3-example"></div>\r\nExample explained:\r\n\r\nTables are defined with the <strong>&lt;table&gt;</strong> tag.\r\n\r\nTables are divided into <strong>table rows</strong> with the <strong>&lt;tr&gt;</strong> tag.\r\n\r\nTable rows are divided into <strong>table data</strong> with the <strong>&lt;td&gt;</strong> tag.\r\n\r\nA table row can also be divided into <strong>table headings</strong> with the <strong>&lt;th&gt;</strong> tag.\r\n<table class="lamp">\r\n<tbody>\r\n<tr>\r\n<th><img src="http://www.w3schools.com/images/lamp.jpg" alt="Note" /></th>\r\n<td>Table data &lt;td&gt; are the data containers of the table.\r\nThey can contain all sorts of HTML elements like text, images, lists, other tables, etc.</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n\r\n<hr />\r\n\r\n<h2>An HTML Table with a Border Attribute</h2>\r\nIf you do not specify a border for the table, it will be displayed without borders.\r\n\r\nA border can be added using the border attribute:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate htmlHigh">&lt;table border="1" style="width:100%"&gt;\r\n&lt;tr&gt;\r\n&lt;td&gt;Jill&lt;/td&gt;\r\n&lt;td&gt;Smith&lt;/td&gt;\r\n&lt;td&gt;50&lt;/td&gt;\r\n&lt;/tr&gt;\r\n&lt;tr&gt;\r\n&lt;td&gt;Eve&lt;/td&gt;\r\n&lt;td&gt;Jackson&lt;/td&gt;\r\n&lt;td&gt;94&lt;/td&gt;\r\n&lt;/tr&gt;\r\n&lt;/table&gt;</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n<table class="lamp">\r\n<tbody>\r\n<tr>\r\n<th><img src="http://www.w3schools.com/images/lamp.jpg" alt="Note" /></th>\r\n<td>The border attribute is on its way out of the HTML standard! It is better to use CSS.</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\nTo add borders, use the <strong>CSS border</strong> property:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate cssHigh">table, th, td {\r\nborder: 1px solid black;\r\n}</div>\r\n</div>\r\n<div class="w3-example"></div>\r\nRemember to define borders for both the table and the table cells.\r\n\r\n<hr />\r\n\r\n<h2>An HTML Table with Collapsed Borders</h2>\r\nIf you want the borders to collapse into one border, add <strong>CSS border-collapse</strong>:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate cssHigh">table, th, td {\r\nborder: 1px solid black;\r\nborder-collapse: collapse;\r\n}</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n\r\n<hr />\r\n\r\n<h2>An HTML Table with Cell Padding</h2>\r\nCell padding specifies the space between the cell content and its borders.\r\n\r\nIf you do not specify a padding, the table cells will be displayed without padding.\r\n\r\nTo set the padding, use the <strong>CSS padding</strong> property:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate cssHigh">table, th, td {\r\nborder: 1px solid black;\r\nborder-collapse: collapse;\r\n}\r\nth, td {\r\npadding: 15px;\r\n}</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n\r\n<hr />\r\n\r\n<h2>HTML Table Headings</h2>\r\nTable headings are defined with the <strong>&lt;th&gt;</strong> tag.\r\n\r\nBy default, all major browsers display table headings as bold and centered:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate htmlHigh">&lt;table style="width:100%"&gt;\r\n&lt;tr&gt;\r\n&lt;th&gt;Firstname&lt;/th&gt;\r\n&lt;th&gt;Lastname&lt;/th&gt;\r\n&lt;th&gt;Points&lt;/th&gt;\r\n&lt;/tr&gt;\r\n&lt;tr&gt;\r\n&lt;td&gt;Eve&lt;/td&gt;\r\n&lt;td&gt;Jackson&lt;/td&gt;\r\n&lt;td&gt;94&lt;/td&gt;\r\n&lt;/tr&gt;\r\n&lt;/table&gt;</div>\r\n</div>\r\n<div class="w3-example"></div>\r\nTo left-align the table headings, use the <strong>CSS text-align</strong> property:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate cssHigh">th {\r\ntext-align: left;\r\n}</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n\r\n<hr />\r\n\r\n<h2>An HTML Table with Border Spacing</h2>\r\nBorder spacing specifies the space between the cells.\r\n\r\nTo set the border spacing for a table, use the <strong>CSS border-spacing</strong> property:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate cssHigh">table {\r\nborder-spacing: 5px;\r\n}</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n<table class="lamp">\r\n<tbody>\r\n<tr>\r\n<th><img src="http://www.w3schools.com/images/lamp.jpg" alt="Note" /></th>\r\n<td>If the table has collapsed borders, border-spacing has no effect.</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n\r\n<hr />\r\n\r\n<h2>Table Cells that Span Many Columns</h2>\r\nTo make a cell span more than one column, use the <strong>colspan</strong> attribute:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate htmlHigh">&lt;table style="width:100%"&gt;\r\n&lt;tr&gt;\r\n&lt;th&gt;Name&lt;/th&gt;\r\n&lt;th colspan="2"&gt;Telephone&lt;/th&gt;\r\n&lt;/tr&gt;\r\n&lt;tr&gt;\r\n&lt;td&gt;Bill Gates&lt;/td&gt;\r\n&lt;td&gt;555 77 854&lt;/td&gt;\r\n&lt;td&gt;555 77 855&lt;/td&gt;\r\n&lt;/tr&gt;\r\n&lt;/table&gt;</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n\r\n<hr />\r\n\r\n<h2>Table Cells that Span Many Rows</h2>\r\nTo make a cell span more than one row, use the <strong>rowspan</strong> attribute:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate htmlHigh">&lt;table style="width:100%"&gt;\r\n&lt;tr&gt;\r\n&lt;th&gt;Name:&lt;/th&gt;\r\n&lt;td&gt;Bill Gates&lt;/td&gt;\r\n&lt;/tr&gt;\r\n&lt;tr&gt;\r\n&lt;th rowspan="2"&gt;Telephone:&lt;/th&gt;\r\n&lt;td&gt;555 77 854&lt;/td&gt;\r\n&lt;/tr&gt;\r\n&lt;tr&gt;\r\n&lt;td&gt;555 77 855&lt;/td&gt;\r\n&lt;/tr&gt;\r\n&lt;/table&gt;</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n\r\n<hr />\r\n\r\n<h2>An HTML Table With a Caption</h2>\r\nTo add a caption to a table, use the <strong>&lt;caption&gt;</strong> tag:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate htmlHigh">&lt;table style="width:100%"&gt;\r\n&lt;caption&gt;Monthly savings&lt;/caption&gt;\r\n&lt;tr&gt;\r\n&lt;th&gt;Month&lt;/th&gt;\r\n&lt;th&gt;Savings&lt;/th&gt;\r\n&lt;/tr&gt;\r\n&lt;tr&gt;\r\n&lt;td&gt;January&lt;/td&gt;\r\n&lt;td&gt;$100&lt;/td&gt;\r\n&lt;/tr&gt;\r\n&lt;tr&gt;\r\n&lt;td&gt;February&lt;/td&gt;\r\n&lt;td&gt;$50&lt;/td&gt;\r\n&lt;/tr&gt;\r\n&lt;/table&gt;</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n<table class="lamp">\r\n<tbody>\r\n<tr>\r\n<th><img src="http://www.w3schools.com/images/lamp.jpg" alt="Note" /></th>\r\n<td>The &lt;caption&gt; tag must be inserted immediately after the &lt;table&gt; tag.</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n\r\n<hr />\r\n\r\n<h2>A Special Style for One Table</h2>\r\nTo define a special style for a special table, add an <strong>id attribute</strong> to the table:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate htmlHigh">&lt;table id="t01"&gt;\r\n&lt;tr&gt;\r\n&lt;th&gt;Firstname&lt;/th&gt;\r\n&lt;th&gt;Lastname&lt;/th&gt;\r\n&lt;th&gt;Points&lt;/th&gt;\r\n&lt;/tr&gt;\r\n&lt;tr&gt;\r\n&lt;td&gt;Eve&lt;/td&gt;\r\n&lt;td&gt;Jackson&lt;/td&gt;\r\n&lt;td&gt;94&lt;/td&gt;\r\n&lt;/tr&gt;\r\n&lt;/table&gt;</div>\r\n</div>\r\n<div class="w3-example">\r\n<h3>Now you can define a special style for this table:</h3>\r\n<div class="w3-code notranslate cssHigh">table#t01 {\r\nwidth: 100%;\r\nbackground-color: #f1f1c1;\r\n}</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n<div class="w3-example">\r\n<h3>And add more styles:</h3>\r\n<div class="w3-code notranslate cssHigh">table#t01 tr:nth-child(even) {\r\nbackground-color: #eee;\r\n}\r\ntable#t01 tr:nth-child(odd) {\r\nbackground-color: #fff;\r\n}\r\ntable#t01 th {\r\ncolor: white;\r\nbackground-color: black;\r\n}</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n\r\n<hr />\r\n\r\n<h2>Chapter Summary</h2>\r\n<ul>\r\n 	<li>Use the HTML <strong>&lt;table&gt;</strong> element to define a table</li>\r\n 	<li>Use the HTML <strong>&lt;tr&gt;</strong> element to define a table row</li>\r\n 	<li>Use the HTML <strong>&lt;td&gt;</strong> element to define a table data</li>\r\n 	<li>Use the HTML <strong>&lt;th&gt;</strong> element to define a table heading</li>\r\n 	<li>Use the HTML <strong>&lt;caption&gt;</strong> element to define a table caption</li>\r\n 	<li>Use the CSS <strong>border</strong> property to define a border</li>\r\n 	<li>Use the CSS <strong>border-collapse</strong> property to collapse cell borders</li>\r\n 	<li>Use the CSS <strong>padding</strong> property to add padding to cells</li>\r\n 	<li>Use the CSS <strong>text-align</strong> property to align cell text</li>\r\n 	<li>Use the CSS <strong>border-spacing</strong> property to set the spacing between cells</li>\r\n 	<li>Use the <strong>colspan</strong> attribute to make a cell span many columns</li>\r\n 	<li>Use the <strong>rowspan</strong> attribute to make a cell span many rows</li>\r\n 	<li>Use the <strong>id</strong> attribute to uniquely define one table</li>\r\n</ul>', 'HTML Tables', '', 'publish', 'closed', 'closed', '', 'html-tables', '', '', '2016-05-21 13:33:50', '2016-05-21 13:33:50', '', 0, 'http://localhost/invatacel/lessons/html-tables/', 0, 'lp_lesson', '', 0),
(104, 1, '2016-05-21 13:06:46', '2016-05-21 13:06:46', '<div class="w3-example">\r\n<h3>xample of an unordered list and an ordered list in HTML:</h3>\r\n<div class="w3-padding w3-white">\r\n<div class="w3-row">\r\n<div class="w3col w3-half">\r\n<h3>Unordered List:</h3>\r\n<ul>\r\n 	<li>Item</li>\r\n 	<li>Item</li>\r\n 	<li>Item</li>\r\n 	<li>Item</li>\r\n</ul>\r\n</div>\r\n<div class="w3col w3-half">\r\n<h3>Ordered List:</h3>\r\n<ol>\r\n 	<li>First item</li>\r\n 	<li>Second item</li>\r\n 	<li>Third item</li>\r\n 	<li>Fourth item</li>\r\n</ol>\r\n</div>\r\n</div>\r\n</div>\r\n</div>\r\n\r\n<hr />\r\n\r\n<h2>Unordered HTML Lists</h2>\r\nAn unordered list starts with the <strong>&lt;ul&gt;</strong> tag. Each list item starts with the <strong>&lt;li&gt;</strong> tag.\r\n\r\nThe list items will be marked with bullets (small black circles):\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate htmlHigh">&lt;ul&gt;\r\n&lt;li&gt;Coffee&lt;/li&gt;\r\n&lt;li&gt;Tea&lt;/li&gt;\r\n&lt;li&gt;Milk&lt;/li&gt;\r\n&lt;/ul&gt;</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n\r\n<hr />\r\n\r\n<h2>Unordered HTML Lists - The Style Attribute</h2>\r\nA <strong>style</strong> attribute can be added to an <strong>unordered list</strong>, to define the style of the marker:\r\n<table class="w3-table-all notranslate">\r\n<tbody>\r\n<tr>\r\n<th>Style</th>\r\n<th>Description</th>\r\n</tr>\r\n<tr>\r\n<td>list-style-type:disc</td>\r\n<td>The list items will be marked with bullets (default)</td>\r\n</tr>\r\n<tr>\r\n<td>list-style-type:circle</td>\r\n<td>The list items will be marked with circles</td>\r\n</tr>\r\n<tr>\r\n<td>list-style-type:square</td>\r\n<td>The list items will be marked with squares</td>\r\n</tr>\r\n<tr>\r\n<td>list-style-type:none</td>\r\n<td>The list items will not be marked</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n<div class="w3-example">\r\n<h3>Disc:</h3>\r\n<div class="w3-code notranslate htmlHigh">&lt;ul style="list-style-type:disc"&gt;\r\n&lt;li&gt;Coffee&lt;/li&gt;\r\n&lt;li&gt;Tea&lt;/li&gt;\r\n&lt;li&gt;Milk&lt;/li&gt;\r\n&lt;/ul&gt;</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n<div class="w3-example">\r\n<h3>Circle:</h3>\r\n<div class="w3-code notranslate htmlHigh">&lt;ul style="list-style-type:circle"&gt;\r\n&lt;li&gt;Coffee&lt;/li&gt;\r\n&lt;li&gt;Tea&lt;/li&gt;\r\n&lt;li&gt;Milk&lt;/li&gt;\r\n&lt;/ul&gt;</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n<div class="w3-example">\r\n<h3>Square:</h3>\r\n<div class="w3-code notranslate htmlHigh">&lt;ul style="list-style-type:square"&gt;\r\n&lt;li&gt;Coffee&lt;/li&gt;\r\n&lt;li&gt;Tea&lt;/li&gt;\r\n&lt;li&gt;Milk&lt;/li&gt;\r\n&lt;/ul&gt;</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n<div class="w3-example">\r\n<h3>None:</h3>\r\n<div class="w3-code notranslate htmlHigh">&lt;ul style="list-style-type:none"&gt;\r\n&lt;li&gt;Coffee&lt;/li&gt;\r\n&lt;li&gt;Tea&lt;/li&gt;\r\n&lt;li&gt;Milk&lt;/li&gt;\r\n&lt;/ul&gt;</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n\r\n<hr />\r\n\r\n<h2>Ordered HTML Lists</h2>\r\nAn ordered list starts with the <strong>&lt;ol&gt;</strong> tag. Each list item starts with the <strong>&lt;li&gt;</strong> tag.\r\n\r\nThe list items will be marked with numbers:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate htmlHigh">&lt;ol&gt;\r\n&lt;li&gt;Coffee&lt;/li&gt;\r\n&lt;li&gt;Tea&lt;/li&gt;\r\n&lt;li&gt;Milk&lt;/li&gt;\r\n&lt;/ol&gt;</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n\r\n<hr />\r\n\r\n<h2>Ordered HTML Lists - The Type Attribute</h2>\r\nA <strong>type</strong> attribute can be added to an <strong>ordered list</strong>, to define the type of the marker:\r\n<table class="w3-table-all notranslate">\r\n<tbody>\r\n<tr>\r\n<th>Type</th>\r\n<th>Description</th>\r\n</tr>\r\n<tr>\r\n<td>type="1"</td>\r\n<td>The list items will be numbered with numbers (default)</td>\r\n</tr>\r\n<tr>\r\n<td>type="A"</td>\r\n<td>The list items will be numbered with uppercase letters</td>\r\n</tr>\r\n<tr>\r\n<td>type="a"</td>\r\n<td>The list items will be numbered with lowercase letters</td>\r\n</tr>\r\n<tr>\r\n<td>type="I"</td>\r\n<td>The list items will be numbered with uppercase roman numbers</td>\r\n</tr>\r\n<tr>\r\n<td>type="i"</td>\r\n<td>The list items will be numbered with lowercase roman numbers</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n<div class="w3-example">\r\n<h3>Numbers:</h3>\r\n<div class="w3-code notranslate htmlHigh">&lt;ol type="1"&gt;\r\n&lt;li&gt;Coffee&lt;/li&gt;\r\n&lt;li&gt;Tea&lt;/li&gt;\r\n&lt;li&gt;Milk&lt;/li&gt;\r\n&lt;/ol&gt;</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n<div class="w3-example">\r\n<h3>Uppercase Letters:</h3>\r\n<div class="w3-code notranslate htmlHigh">&lt;ol type="A"&gt;\r\n&lt;li&gt;Coffee&lt;/li&gt;\r\n&lt;li&gt;Tea&lt;/li&gt;\r\n&lt;li&gt;Milk&lt;/li&gt;\r\n&lt;/ol&gt;</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n<div class="w3-example">\r\n<h3>Lowercase Letters:</h3>\r\n<div class="w3-code notranslate htmlHigh">&lt;ol type="a"&gt;\r\n&lt;li&gt;Coffee&lt;/li&gt;\r\n&lt;li&gt;Tea&lt;/li&gt;\r\n&lt;li&gt;Milk&lt;/li&gt;\r\n&lt;/ol&gt;</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n<div class="w3-example">\r\n<h3>Uppercase Roman Numbers:</h3>\r\n<div class="w3-code notranslate htmlHigh">&lt;ol type="I"&gt;\r\n&lt;li&gt;Coffee&lt;/li&gt;\r\n&lt;li&gt;Tea&lt;/li&gt;\r\n&lt;li&gt;Milk&lt;/li&gt;\r\n&lt;/ol&gt;</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n<div class="w3-example">\r\n<h3>Lowercase Roman Numbers:</h3>\r\n<div class="w3-code notranslate htmlHigh">&lt;ol type="i"&gt;\r\n&lt;li&gt;Coffee&lt;/li&gt;\r\n&lt;li&gt;Tea&lt;/li&gt;\r\n&lt;li&gt;Milk&lt;/li&gt;\r\n&lt;/ol&gt;</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n\r\n<hr />\r\n\r\n<h2>HTML Description Lists</h2>\r\nHTML also supports description lists.\r\n\r\nA description list is a list of terms, with a description of each term.\r\n\r\nThe <strong>&lt;dl&gt;</strong> tag defines the description list, the <strong>&lt;dt&gt;</strong> tag defines the term (name), and the <strong>&lt;dd&gt;</strong> tag describes each term:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate htmlHigh">&lt;dl&gt;\r\n&lt;dt&gt;Coffee&lt;/dt&gt;\r\n&lt;dd&gt;- black hot drink&lt;/dd&gt;\r\n&lt;dt&gt;Milk&lt;/dt&gt;\r\n&lt;dd&gt;- white cold drink&lt;/dd&gt;\r\n&lt;/dl&gt;</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n\r\n<hr />\r\n\r\n<h2>Nested HTML Lists</h2>\r\nList can be nested (lists inside lists):\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate htmlHigh">&lt;ul&gt;\r\n&lt;li&gt;Coffee&lt;/li&gt;\r\n&lt;li&gt;Tea\r\n&lt;ul&gt;\r\n&lt;li&gt;Black tea&lt;/li&gt;\r\n&lt;li&gt;Green tea&lt;/li&gt;\r\n&lt;/ul&gt;\r\n&lt;/li&gt;\r\n&lt;li&gt;Milk&lt;/li&gt;\r\n&lt;/ul&gt;</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n<table class="lamp">\r\n<tbody>\r\n<tr>\r\n<th><img src="http://www.w3schools.com/images/lamp.jpg" alt="Note" /></th>\r\n<td>List items can contain new list, and other HTML elements, like images and links, etc.</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n\r\n<hr />\r\n\r\n<h2>Horizontal Lists</h2>\r\nHTML lists can be styled in many different ways with CSS.\r\n\r\nOne popular way, is to style a list to be displayed horizontally:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate htmlHigh">&lt;!DOCTYPE html&gt;\r\n&lt;html&gt;\r\n\r\n&lt;head&gt;\r\n&lt;style&gt;\r\nul#menu li {\r\ndisplay:inline;\r\n}\r\n&lt;/style&gt;\r\n&lt;/head&gt;\r\n\r\n&lt;body&gt;\r\n\r\n&lt;h2&gt;Horizontal List&lt;/h2&gt;\r\n\r\n&lt;ul id="menu"&gt;\r\n&lt;li&gt;HTML&lt;/li&gt;\r\n&lt;li&gt;CSS&lt;/li&gt;\r\n&lt;li&gt;JavaScript&lt;/li&gt;\r\n&lt;li&gt;PHP&lt;/li&gt;\r\n&lt;/ul&gt;\r\n\r\n&lt;/body&gt;\r\n&lt;/html&gt;</div>\r\n</div>\r\n<div class="w3-example"></div>\r\nWith a little extra style, you can make it look like a menu:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate cssHigh">ul#menu {\r\npadding: 0;\r\n}\r\n\r\nul#menu li {\r\ndisplay: inline;\r\n}\r\n\r\nul#menu li a {\r\nbackground-color: black;\r\ncolor: white;\r\npadding: 10px 20px;\r\ntext-decoration: none;\r\nborder-radius: 4px 4px 0 0;\r\n}\r\n\r\nul#menu li a:hover {\r\nbackground-color: orange;\r\n}</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n\r\n<hr />\r\n\r\n<h2>Chapter Summary</h2>\r\n<ul>\r\n 	<li>Use the HTML <strong>&lt;ul&gt;</strong> element to define an unordered list</li>\r\n 	<li>Use the HTML <strong>style</strong> attribute to define the bullet style</li>\r\n 	<li>Use the HTML <strong>&lt;ol&gt;</strong> element to define an ordered list</li>\r\n 	<li>Use the HTML <strong>type</strong> attribute to define the numbering type</li>\r\n 	<li>Use the HTML <strong>&lt;li&gt;</strong> element to define a list item</li>\r\n 	<li>Use the HTML <strong>&lt;dl&gt;</strong> element to define a description list</li>\r\n 	<li>Use the HTML <strong>&lt;dt&gt;</strong> element to define the description term</li>\r\n 	<li>Use the HTML <strong>&lt;dd&gt;</strong> element to define the description data</li>\r\n 	<li>Lists can be nested inside lists</li>\r\n 	<li>List items can contain other HTML elements</li>\r\n 	<li>Use the CSS property <strong>display:inline</strong> to display a list horizontally</li>\r\n</ul>', 'HTML Lists', '', 'publish', 'closed', 'closed', '', 'html-lists', '', '', '2016-05-21 13:34:50', '2016-05-21 13:34:50', '', 0, 'http://localhost/invatacel/lessons/html-lists/', 0, 'lp_lesson', '', 0),
(105, 1, '2016-05-21 13:06:59', '2016-05-21 13:06:59', '<h2>Classing Block Elements</h2>\r\nThe HTML class attribute makes it possible to define equal styles for "equal" &lt;div&gt; elements:\r\n<div>\r\n<h2>London</h2>\r\nLondon is the capital city of England. It is the most populous city in the United Kingdom, with a metropolitan area of over 13 million inhabitants.\r\n\r\nStanding on the River Thames, London has been a major settlement for two millennia, its history going back to its founding by the Romans, who named it Londinium.\r\n\r\n</div>\r\n<div>\r\n<h2>Paris</h2>\r\nParis is the capital and most populous city of France.\r\n\r\nSituated on the Seine River, it is at the heart of the Île-de-France region, also known as the région parisienne.\r\n\r\nWithin its metropolitan area is one of the largest population centers in Europe, with over 12 million inhabitants.\r\n\r\n</div>\r\n<div>\r\n<h2>Tokyo</h2>\r\nTokyo is the capital of Japan, the center of the Greater Tokyo Area, and the most populous metropolitan area in the world.\r\n\r\nIt is the seat of the Japanese government and the Imperial Palace, and the home of the Japanese Imperial Family.\r\n\r\nThe Tokyo prefecture is part of the world''s most populous metropolitan area with 38 million people and the world''s largest urban economy.\r\n\r\n</div>\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate htmlHigh">&lt;!DOCTYPE html&gt;\r\n&lt;html&gt;\r\n&lt;head&gt;\r\n&lt;style&gt;\r\ndiv.cities {\r\nbackground-color:black;\r\ncolor:white;\r\nmargin:20px;\r\npadding:20px;\r\n}\r\n&lt;/style&gt;\r\n&lt;/head&gt;\r\n&lt;body&gt;\r\n\r\n&lt;div class="cities"&gt;\r\n&lt;h2&gt;London&lt;/h2&gt;\r\n&lt;p&gt;London is the capital city of England. It is the most populous city in the United Kingdom, with a metropolitan area of over 13 million inhabitants.&lt;/p&gt;\r\n&lt;/div&gt;\r\n\r\n&lt;div class="cities"&gt;\r\n&lt;h2&gt;Paris&lt;/h2&gt;\r\n&lt;p&gt;Paris is the capital and most populous city of France.&lt;/p&gt;\r\n&lt;/div&gt;\r\n\r\n&lt;div class="cities"&gt;\r\n&lt;h2&gt;Tokyo&lt;/h2&gt;\r\n&lt;p&gt;Tokyo is the capital of Japan, the center of the Greater Tokyo Area,\r\nand the most populous metropolitan area in the world.&lt;/p&gt;\r\n&lt;/div&gt;\r\n\r\n&lt;/body&gt;\r\n&lt;/html&gt;</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n\r\n<hr />\r\n\r\n<h2>Classing Inline Elements</h2>\r\nThe HTML class attribute also makes it possible to define equal styles for "equal" &lt;span&gt; elements:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate htmlHigh">&lt;!DOCTYPE html&gt;\r\n&lt;html&gt;\r\n&lt;head&gt;\r\n&lt;style&gt;\r\nspan.note {font-size:120%;color:red;}\r\n&lt;/style&gt;\r\n&lt;/head&gt;\r\n&lt;body&gt;\r\n\r\n&lt;h1&gt;My &lt;span class="note"&gt;Important&lt;/span&gt; Heading&lt;/h1&gt;\r\n&lt;p&gt;This is some &lt;span class="note"&gt;important&lt;/span&gt; text.&lt;/p&gt;\r\n\r\n&lt;/body&gt;\r\n&lt;/html&gt;</div>\r\n</div>', 'HTML Classes', '', 'publish', 'closed', 'closed', '', 'html-classes', '', '', '2016-05-21 13:35:15', '2016-05-21 13:35:15', '', 0, 'http://localhost/invatacel/lessons/html-classes/', 0, 'lp_lesson', '', 0),
(106, 1, '2016-05-21 13:07:10', '2016-05-21 13:07:10', '<h2>The HTML &lt;script&gt; Tag</h2>\r\nThe &lt;script&gt; tag is used to define a script (JavaScript).\r\n\r\nThe &lt;script&gt; element either contains scripting statements or it points to an external script file through the src attribute.\r\n\r\nCommon uses for JavaScript are image manipulation, form validation, and dynamic changes of content.\r\n\r\nThe script below writes Hello JavaScript! into an HTML element with id="demo":\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate htmlHigh">&lt;script&gt;\r\ndocument.getElementById("demo").innerHTML = "Hello JavaScript!";\r\n&lt;/script&gt;</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n<table class="lamp">\r\n<tbody>\r\n<tr>\r\n<th><img src="http://www.w3schools.com/images/lamp.jpg" alt="Note" /></th>\r\n<td>To learn all about JavaScript, visit our <a href="http://www.w3schools.com/js/default.asp">JavaScript Tutorial</a>!</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n\r\n<hr />\r\n\r\n<h2>The HTML &lt;noscript&gt; Tag</h2>\r\nThe &lt;noscript&gt; tag is used to provide an alternate content for users that have disabled scripts in their browser or have a browser that doesn''t support client-side scripting.\r\n\r\nThe &lt;noscript&gt; element can contain all the elements that you can find inside the &lt;body&gt; element of a normal HTML page.\r\n\r\nThe content inside the &lt;noscript&gt; element will only be displayed if scripts are not supported, or are disabled in the user''s browser:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate htmlHigh">&lt;script&gt;\r\ndocument.getElementById("demo").innerHTML = "Hello JavaScript!";\r\n&lt;/script&gt;\r\n\r\n&lt;noscript&gt;Sorry, your browser does not support JavaScript!&lt;/noscript&gt;</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n\r\n<hr />\r\n\r\n<h2>A Taste of JavaScript (From Our JavaScript Tutorial)</h2>\r\nHere are some examples of what JavaScript can do:\r\n<div class="w3-example">\r\n<h3>JavaScript can change HTML content:</h3>\r\n<div class="w3-code notranslate jsHigh">document.getElementById("demo").innerHTML = "Hello JavaScript!";</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n<div class="w3-example">\r\n<h3>JavaScript can change HTML styles:</h3>\r\n<div class="w3-code notranslate jsHigh">document.getElementById("demo").style.fontSize = "25px";</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n<div class="w3-example">\r\n<h3>JavaScript can change HTML attributes:</h3>\r\n<div class="w3-code notranslate jsHigh">document.getElementById("image").src = "picture.gif";</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n\r\n<hr />\r\n\r\n<h2>HTML Script Tags</h2>\r\n<table class="w3-table-all notranslate">\r\n<tbody>\r\n<tr>\r\n<th>Tag</th>\r\n<th>Description</th>\r\n</tr>\r\n<tr>\r\n<td><a href="http://www.w3schools.com/tags/tag_script.asp">&lt;script&gt;</a></td>\r\n<td>Defines a client-side script</td>\r\n</tr>\r\n<tr>\r\n<td><a href="http://www.w3schools.com/tags/tag_noscript.asp">&lt;noscript&gt;</a></td>\r\n<td>Defines an alternate content for users that do not support client-side scripts</td>\r\n</tr>\r\n</tbody>\r\n</table>', 'HTML Javascript', '', 'publish', 'closed', 'closed', '', 'html-javascript', '', '', '2016-05-21 13:35:44', '2016-05-21 13:35:44', '', 0, 'http://localhost/invatacel/lessons/html-javascript/', 0, 'lp_lesson', '', 0),
(107, 1, '2016-05-21 13:07:52', '2016-05-21 13:07:52', '<p class="intro">Comment tags &lt;!-- and --&gt; are used to insert comments in HTML.</p>\r\n\r\n\r\n<hr />\r\n\r\n<h2>HTML Comment Tags</h2>\r\nYou can add comments to your HTML source by using the following syntax:\r\n<div class="w3-example">\r\n<div class="w3-code notranslate htmlHigh">&lt;!-- Write your comments here --&gt;</div>\r\n</div>\r\n<table class="lamp">\r\n<tbody>\r\n<tr>\r\n<th><img src="http://www.w3schools.com/images/lamp.jpg" alt="Note" /></th>\r\n<td><b>Note:</b> There is an exclamation point (!) in the opening tag, but not in the closing tag.</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\nComments are not displayed by the browser, but they can help document your HTML.\r\n\r\nWith comments you can place notifications and reminders in your HTML:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate htmlHigh">&lt;!-- This is a comment --&gt;\r\n\r\n&lt;p&gt;This is a paragraph.&lt;/p&gt;\r\n\r\n&lt;!-- Remember to add more information here --&gt;</div>\r\n</div>\r\n<div class="w3-example"></div>\r\nComments are also great for debugging HTML, because you can comment out HTML lines of code, one at a time, to search for errors:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate htmlHigh">&lt;!-- Do not display this at the moment\r\n&lt;img border="0" src="pic_mountain.jpg" alt="Mountain"&gt;\r\n--&gt;</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n\r\n<hr />\r\n\r\n<h2>Conditional Comments</h2>\r\nYou might stumble upon conditional comments in HTML:\r\n<div class="w3-example">\r\n<div class="w3-code notranslate htmlHigh">&lt;!--[if IE 8]&gt;\r\n.... some HTML here ....\r\n&lt;![endif]--&gt;</div>\r\n</div>\r\nConditional comments defines HTML tags to be executed by Internet Explorer only.\r\n\r\n<hr />\r\n\r\n<h2>Software Program Tags</h2>\r\nHTML comments tags can also be generated by various HTML software programs.\r\n\r\nFor example &lt;!--webbot bot--&gt; tags wrapped inside HTML comments by FrontPage and Expression Web.\r\n\r\nAs a rule, let these tags stay, to help support the software that created them.', 'HTML Comments', '', 'inherit', 'closed', 'closed', '', '98-revision-v1', '', '', '2016-05-21 13:07:52', '2016-05-21 13:07:52', '', 98, 'http://localhost/invatacel/2016/05/21/98-revision-v1/', 0, 'revision', '', 0),
(108, 1, '2016-05-21 13:08:39', '2016-05-21 13:08:39', '<p class="intro">TVs and computer screens display colors by combining Red, Green, and Blue light.</p>\r\n\r\n\r\n<hr />\r\n\r\n<h2>Color Names</h2>\r\nWith CSS, colors can be set by using color names:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="notranslate">\r\n<div class="table-responsive">\r\n<table class="w3-table-all notranslate">\r\n<tbody>\r\n<tr>\r\n<th>Color</th>\r\n<th>Name</th>\r\n</tr>\r\n<tr>\r\n<td></td>\r\n<td>Red</td>\r\n</tr>\r\n<tr>\r\n<td></td>\r\n<td>Orange</td>\r\n</tr>\r\n<tr>\r\n<td></td>\r\n<td>Yellow</td>\r\n</tr>\r\n<tr>\r\n<td></td>\r\n<td>Cyan</td>\r\n</tr>\r\n<tr>\r\n<td></td>\r\n<td>Blue</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n</div>\r\n</div>\r\n</div>\r\n<div class="w3-example"></div>\r\nCSS supports <a href="http://www.w3schools.com/colors/colors_names.asp">140 standard color names</a>.\r\n\r\n<hr />\r\n\r\n<h2>RGB (Red, Green, Blue)</h2>\r\nWith HTML, RGB color values can be specified using this formula: rgb(red, green, blue)\r\n\r\nEach parameter (red, green, and blue) defines the intensity of the color between 0 and 255.\r\n\r\nFor example, rgb(255,0,0) is displayed as red, because red is set to its highest value (255) and the others are set to 0. Experiment by mixing the RGB values below:\r\n<div class="w3-responsive">\r\n<table class="w3-table w3-border">\r\n<tbody>\r\n<tr>\r\n<th>Red</th>\r\n<th>Green</th>\r\n<th>Blue</th>\r\n</tr>\r\n<tr>\r\n<td id="valRed">255</td>\r\n<td id="valGreen">0</td>\r\n<td id="valBlue">0</td>\r\n</tr>\r\n<tr>\r\n<td id="red"></td>\r\n<td id="green"></td>\r\n<td id="blue"></td>\r\n</tr>\r\n<tr>\r\n<td></td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n</div>\r\n<table class="w3-table w3-border">\r\n<tbody>\r\n<tr>\r\n<td></td>\r\n<td></td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n<table class="w3-table w3-border">\r\n<tbody>\r\n<tr>\r\n<td></td>\r\n<td></td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n<div class="w3-responsive">\r\n<table class="w3-table w3-border">\r\n<tbody>\r\n<tr>\r\n<td></td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n</div>\r\n<div id="change"></div>\r\n<div id="changetxt" class="w3-large w3-padding-large w3-center">rgb(255, 0, 0)</div>\r\n<div class="w3-center"></div>\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="notranslate">\r\n<div class="table-responsive">\r\n<table class="w3-table-all notranslate">\r\n<tbody>\r\n<tr>\r\n<th>Color</th>\r\n<th>RGB</th>\r\n</tr>\r\n<tr>\r\n<td></td>\r\n<td>rgb(255,0,0)</td>\r\n</tr>\r\n<tr>\r\n<td></td>\r\n<td>rgb(255,255,0)</td>\r\n</tr>\r\n<tr>\r\n<td></td>\r\n<td>rgb(0,255,0)</td>\r\n</tr>\r\n<tr>\r\n<td></td>\r\n<td>rgb(0,255,255)</td>\r\n</tr>\r\n<tr>\r\n<td></td>\r\n<td>rgb(0,0,255)</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n</div>\r\n</div>\r\n</div>\r\n<div class="w3-example"></div>\r\nShades of gray are often defined using equal values for all the 3 light sources:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="notranslate">\r\n<div class="table-responsive">\r\n<table class="w3-table-all notranslate">\r\n<tbody>\r\n<tr>\r\n<th>Color</th>\r\n<th>RGB</th>\r\n</tr>\r\n<tr>\r\n<td></td>\r\n<td>rgb(0,0,0)</td>\r\n</tr>\r\n<tr>\r\n<td></td>\r\n<td>rgb(128,128,128)</td>\r\n</tr>\r\n<tr>\r\n<td></td>\r\n<td>rgb(255,255,255)</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n</div>\r\n</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n\r\n<hr />\r\n\r\n<h2>Hexadecimal Colors</h2>\r\nWith HTML, RGB values can also be specified using hexadecimal color values in the form: #RRGGBB, where RR (red), GG (green) and BB (blue) are hexadecimal values between 00 and FF (same as decimal 0-255).\r\n\r\nFor example, #FF0000 is displayed as red, because red is set to its highest value (FF) and the others are set to the lowest value (00).\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="notranslate">\r\n<div class="table-responsive">\r\n<table class="w3-table-all notranslate">\r\n<tbody>\r\n<tr>\r\n<th>Color</th>\r\n<th>HEX</th>\r\n</tr>\r\n<tr>\r\n<td></td>\r\n<td>#FF0000</td>\r\n</tr>\r\n<tr>\r\n<td></td>\r\n<td>#FFFF00</td>\r\n</tr>\r\n<tr>\r\n<td></td>\r\n<td>#00FF00</td>\r\n</tr>\r\n<tr>\r\n<td></td>\r\n<td>#00FFFF</td>\r\n</tr>\r\n<tr>\r\n<td></td>\r\n<td>#0000FF</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n</div>\r\n</div>\r\n</div>\r\n<div class="w3-example"></div>\r\nShades of gray are often defined using equal values for all the 3 light sources:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="notranslate">\r\n<div class="table-responsive">\r\n<table class="w3-table-all notranslate">\r\n<tbody>\r\n<tr>\r\n<th>Color</th>\r\n<th>HEX</th>\r\n</tr>\r\n<tr>\r\n<td></td>\r\n<td>#000000</td>\r\n</tr>\r\n<tr>\r\n<td></td>\r\n<td>#808080</td>\r\n</tr>\r\n<tr>\r\n<td></td>\r\n<td>#FFFFFF</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n</div>\r\n</div>\r\n</div>', 'HTML Colors', '', 'inherit', 'closed', 'closed', '', '99-revision-v1', '', '', '2016-05-21 13:08:39', '2016-05-21 13:08:39', '', 99, 'http://localhost/invatacel/2016/05/21/99-revision-v1/', 0, 'revision', '', 0),
(109, 1, '2016-05-21 13:28:52', '2016-05-21 13:28:52', '<p class="intro">TVs and computer screens display colors by combining Red, Green, and Blue light.</p>\n\n\n<hr />\n\n<h2>Color Names</h2>\nWith CSS, colors can be set by using color names:\n<div class="w3-example">\n<h3>Example</h3>\n<div class="notranslate">\n<div class="table-responsive">\n<table class="w3-table-all notranslate">\n<tbody>\n<tr>\n<th>Color</th>\n<th>Name</th>\n</tr>\n<tr>\n<td> <span style="color: #ff0000;">Red</span></td>\n<td>Red</td>\n</tr>\n<tr>\n<td> Orange</td>\n<td>Orange</td>\n</tr>\n<tr>\n<td> <span style="color: #ffff00;">Yellow</span></td>\n<td>Yellow</td>\n</tr>\n<tr>\n<td> Cyan</td>\n<td>Cyan</td>\n</tr>\n<tr>\n<td> Blue</td>\n<td>Blue</td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>\n</div>\n<div class="w3-example"></div>\nCSS supports <a href="http://www.w3schools.com/colors/colors_names.asp">140 standard color names</a>.\n\n<hr />\n\n<h2>RGB (Red, Green, Blue)</h2>\nWith HTML, RGB color values can be specified using this formula: rgb(red, green, blue)\n\nEach parameter (red, green, and blue) defines the intensity of the color between 0 and 255.\n\nFor example, rgb(255,0,0) is displayed as red, because red is set to its highest value (255) and the others are set to 0. Experiment by mixing the RGB values below:\n<h3>Example</h3>\n<div class="notranslate">\n<div class="table-responsive">\n<table class="w3-table-all notranslate">\n<tbody>\n<tr>\n<th>Color</th>\n<th>RGB</th>\n</tr>\n<tr>\n<td> <span style="color: #ff0000;">Red</span></td>\n<td>rgb(255,0,0)</td>\n</tr>\n<tr>\n<td> <span style="color: #ffff00;">Yellow</span></td>\n<td>rgb(255,255,0)</td>\n</tr>\n<tr>\n<td> Green</td>\n<td>rgb(0,255,0)</td>\n</tr>\n<tr>\n<td> Cyan</td>\n<td>rgb(0,255,255)</td>\n</tr>\n<tr>\n<td> Blue</td>\n<td>rgb(0,0,255)</td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>\n<div class="w3-example"></div>\nShades of gray are often defined using equal values for all the 3 light sources:\n<div class="w3-example">\n<h3>Example</h3>\n<div class="notranslate">\n<div class="table-responsive">\n<table class="w3-table-all notranslate">\n<tbody>\n<tr>\n<th>Color</th>\n<th>RGB</th>\n</tr>\n<tr>\n<td> Black</td>\n<td>rgb(0,0,0)</td>\n</tr>\n<tr>\n<td> Gray</td>\n<td>rgb(128,128,128)</td>\n</tr>\n<tr>\n<td> White</td>\n<td>rgb(255,255,255)</td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>\n</div>\n<div class="w3-example"></div>\n\n<hr />\n\n<h2>Hexadecimal Colors</h2>\nWith HTML, RGB values can also be specified using hexadecimal color values in the form: #RRGGBB, where RR (red), GG (green) and BB (blue) are hexadecimal values between 00 and FF (same as decimal 0-255).\n\nFor example, #FF0000 is displayed as red, because red is set to its highest value (FF) and the others are set to the lowest value (00).\n<div class="w3-example">\n<h3>Example</h3>\n<div class="notranslate">\n<div class="table-responsive">\n<table class="w3-table-all notranslate">\n<tbody>\n<tr>\n<th>Color</th>\n<th>HEX</th>\n</tr>\n<tr>\n<td> <span style="color: #ff0000;">Red</span></td>\n<td>#FF0000</td>\n</tr>\n<tr>\n<td> <span style="color: #ffff00;">Yellow</span></td>\n<td>#FFFF00</td>\n</tr>\n<tr>\n<td> Green</td>\n<td>#00FF00</td>\n</tr>\n<tr>\n<td> Cyan</td>\n<td>#00FFFF</td>\n</tr>\n<tr>\n<td> Blue</td>\n<td>#0000FF</td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>\n</div>\n<div class="w3-example"></div>\nShades of gray are often defined using equal values for all the 3 light sources:\n<div class="w3-example">\n<h3>Example</h3>\n<div class="notranslate">\n<div class="table-responsive">\n<table class="w3-table-all notranslate">\n<tbody>\n<tr>\n<th>Color</th>\n<th>HEX</th>\n</tr>\n<tr>\n<td> Black</td>\n<td>#000000</td>\n</tr>\n<tr>\n<td> Gray</td>\n<td>#808080</td>\n</tr>\n<tr>\n<td> White</td>\n<td>#FFFFFF</td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>\n</div>', 'HTML Colors', '', 'inherit', 'closed', 'closed', '', '99-autosave-v1', '', '', '2016-05-21 13:28:52', '2016-05-21 13:28:52', '', 99, 'http://localhost/invatacel/2016/05/21/99-autosave-v1/', 0, 'revision', '', 0);
INSERT INTO `wp_posts` (`ID`, `post_author`, `post_date`, `post_date_gmt`, `post_content`, `post_title`, `post_excerpt`, `post_status`, `comment_status`, `ping_status`, `post_password`, `post_name`, `to_ping`, `pinged`, `post_modified`, `post_modified_gmt`, `post_content_filtered`, `post_parent`, `guid`, `menu_order`, `post_type`, `post_mime_type`, `comment_count`) VALUES
(110, 1, '2016-05-21 13:29:54', '2016-05-21 13:29:54', '<p class="intro">TVs and computer screens display colors by combining Red, Green, and Blue light.</p>\r\n\r\n\r\n<hr />\r\n\r\n<h2>Color Names</h2>\r\nWith CSS, colors can be set by using color names:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="notranslate">\r\n<div class="table-responsive">\r\n<table class="w3-table-all notranslate">\r\n<tbody>\r\n<tr>\r\n<th>Color</th>\r\n<th>Name</th>\r\n</tr>\r\n<tr>\r\n<td> <span style="color: #ff0000;">Red</span></td>\r\n<td>Red</td>\r\n</tr>\r\n<tr>\r\n<td> <span style="color: #ff9900;">Orange</span></td>\r\n<td>Orange</td>\r\n</tr>\r\n<tr>\r\n<td> <span style="color: #ffff00;">Yellow</span></td>\r\n<td>Yellow</td>\r\n</tr>\r\n<tr>\r\n<td> <span style="color: #ccffff;">Cyan</span></td>\r\n<td>Cyan</td>\r\n</tr>\r\n<tr>\r\n<td> <span style="color: #0000ff;">Blue</span></td>\r\n<td>Blue</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n</div>\r\n</div>\r\n</div>\r\n<div class="w3-example"></div>\r\nCSS supports <a href="http://www.w3schools.com/colors/colors_names.asp">140 standard color names</a>.\r\n\r\n<hr />\r\n\r\n<h2>RGB (Red, Green, Blue)</h2>\r\nWith HTML, RGB color values can be specified using this formula: rgb(red, green, blue)\r\n\r\nEach parameter (red, green, and blue) defines the intensity of the color between 0 and 255.\r\n\r\nFor example, rgb(255,0,0) is displayed as red, because red is set to its highest value (255) and the others are set to 0. Experiment by mixing the RGB values below:\r\n<h3>Example</h3>\r\n<div class="notranslate">\r\n<div class="table-responsive">\r\n<table class="w3-table-all notranslate">\r\n<tbody>\r\n<tr>\r\n<th>Color</th>\r\n<th>RGB</th>\r\n</tr>\r\n<tr>\r\n<td> <span style="color: #ff0000;">Red</span></td>\r\n<td>rgb(255,0,0)</td>\r\n</tr>\r\n<tr>\r\n<td> <span style="color: #ffff00;">Yellow</span></td>\r\n<td>rgb(255,255,0)</td>\r\n</tr>\r\n<tr>\r\n<td> <span style="color: #00ff00;">Green</span></td>\r\n<td>rgb(0,255,0)</td>\r\n</tr>\r\n<tr>\r\n<td> <span style="color: #ccffff;">Cyan</span></td>\r\n<td>rgb(0,255,255)</td>\r\n</tr>\r\n<tr>\r\n<td> <span style="color: #0000ff;">Blue</span></td>\r\n<td>rgb(0,0,255)</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n</div>\r\n</div>\r\n<div class="w3-example"></div>\r\nShades of gray are often defined using equal values for all the 3 light sources:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="notranslate">\r\n<div class="table-responsive">\r\n<table class="w3-table-all notranslate">\r\n<tbody>\r\n<tr>\r\n<th>Color</th>\r\n<th>RGB</th>\r\n</tr>\r\n<tr>\r\n<td> Black</td>\r\n<td>rgb(0,0,0)</td>\r\n</tr>\r\n<tr>\r\n<td> <span style="color: #808080;">Gray</span></td>\r\n<td>rgb(128,128,128)</td>\r\n</tr>\r\n<tr>\r\n<td> <span style="color: #ffffff;">White</span></td>\r\n<td>rgb(255,255,255)</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n</div>\r\n</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n\r\n<hr />\r\n\r\n<h2>Hexadecimal Colors</h2>\r\nWith HTML, RGB values can also be specified using hexadecimal color values in the form: #RRGGBB, where RR (red), GG (green) and BB (blue) are hexadecimal values between 00 and FF (same as decimal 0-255).\r\n\r\nFor example, #FF0000 is displayed as red, because red is set to its highest value (FF) and the others are set to the lowest value (00).\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="notranslate">\r\n<div class="table-responsive">\r\n<table class="w3-table-all notranslate">\r\n<tbody>\r\n<tr>\r\n<th>Color</th>\r\n<th>HEX</th>\r\n</tr>\r\n<tr>\r\n<td> <span style="color: #ff0000;">Red</span></td>\r\n<td>#FF0000</td>\r\n</tr>\r\n<tr>\r\n<td> <span style="color: #ffff00;">Yellow</span></td>\r\n<td>#FFFF00</td>\r\n</tr>\r\n<tr>\r\n<td> <span style="color: #00ff00;">Green</span></td>\r\n<td>#00FF00</td>\r\n</tr>\r\n<tr>\r\n<td> <span style="color: #ccffff;">Cyan</span></td>\r\n<td>#00FFFF</td>\r\n</tr>\r\n<tr>\r\n<td> <span style="color: #0000ff;">Blue</span></td>\r\n<td>#0000FF</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n</div>\r\n</div>\r\n</div>\r\n<div class="w3-example"></div>\r\nShades of gray are often defined using equal values for all the 3 light sources:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="notranslate">\r\n<div class="table-responsive">\r\n<table class="w3-table-all notranslate">\r\n<tbody>\r\n<tr>\r\n<th>Color</th>\r\n<th>HEX</th>\r\n</tr>\r\n<tr>\r\n<td> Black</td>\r\n<td>#000000</td>\r\n</tr>\r\n<tr>\r\n<td> <span style="color: #808080;">Gray</span></td>\r\n<td>#808080</td>\r\n</tr>\r\n<tr>\r\n<td> <span style="color: #ffffff;">White</span></td>\r\n<td>#FFFFFF</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n</div>\r\n</div>\r\n</div>', 'HTML Colors', '', 'inherit', 'closed', 'closed', '', '99-revision-v1', '', '', '2016-05-21 13:29:54', '2016-05-21 13:29:54', '', 99, 'http://localhost/invatacel/2016/05/21/99-revision-v1/', 0, 'revision', '', 0),
(111, 1, '2016-05-21 13:30:55', '2016-05-21 13:30:55', '<h2>Styling HTML with CSS</h2>\r\nCSS stands for <strong>C</strong>ascading <strong>S</strong>tyle <strong>S</strong>heets\r\n\r\nStyling can be added to HTML elements in 3 ways:\r\n<ul>\r\n 	<li>Inline - using a <strong>style attribute</strong> in HTML elements</li>\r\n 	<li>Internal - using a <strong>&lt;style&gt; element</strong> in the HTML &lt;head&gt; section</li>\r\n 	<li>External - using one or more <strong>external CSS files</strong></li>\r\n</ul>\r\nThe most common way to add styling, is to keep the styles in separate CSS files. But, in this tutorial, we use internal styling, because it is easier to demonstrate, and easier for you to try it yourself.\r\n<table class="lamp">\r\n<tbody>\r\n<tr>\r\n<th><img src="http://www.w3schools.com/images/lamp.jpg" alt="Note" /></th>\r\n<td>You can learn much more about CSS in our <a href="http://www.w3schools.com/css/default.asp">CSS Tutorial</a>.</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n\r\n<hr />\r\n\r\n<h2>Inline Styling (Inline CSS)</h2>\r\n<strong>Inline styling</strong> is used to apply a unique style to a single HTML element:\r\n\r\nInline styling uses the <strong>style</strong> attribute.\r\n\r\nThis example changes the text color of the &lt;h1&gt; element to blue:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate htmlHigh">&lt;h1 style="color:blue;"&gt;This is a Blue Heading&lt;/h1&gt;</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n\r\n<hr />\r\n\r\n<h2>Internal Styling (Internal CSS)</h2>\r\nInternal styling is used to define a style for one HTML page.\r\n\r\n<strong>Internal styling</strong> is defined in the <strong>&lt;head&gt;</strong> section of an HTML page, within a <strong>&lt;style&gt;</strong> element:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate htmlHigh">&lt;!DOCTYPE html&gt;\r\n&lt;html&gt;\r\n&lt;head&gt;\r\n&lt;style&gt;\r\nbody {background-color:lightgrey;}\r\nh1   {color:blue;}\r\np    {color:green;}\r\n&lt;/style&gt;\r\n&lt;/head&gt;\r\n&lt;body&gt;\r\n\r\n&lt;h1&gt;This is a heading&lt;/h1&gt;\r\n&lt;p&gt;This is a paragraph.&lt;/p&gt;\r\n\r\n&lt;/body&gt;\r\n&lt;/html&gt;</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n\r\n<hr />\r\n\r\n<h2>External Styling (External CSS)</h2>\r\nAn external style sheet is used to define the style for many pages.\r\n\r\nWith an <strong>external style sheet</strong>, you can change the look of an entire web site by changing one file!\r\n\r\nTo use an external style sheet, add a link to it in the <strong>&lt;head&gt;</strong> section of the HTML page:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate htmlHigh">&lt;!DOCTYPE html&gt;\r\n&lt;html&gt;\r\n&lt;head&gt;\r\n&lt;link rel="stylesheet" href="styles.css"&gt;\r\n&lt;/head&gt;\r\n&lt;body&gt;\r\n\r\n&lt;h1&gt;This is a heading&lt;/h1&gt;\r\n&lt;p&gt;This is a paragraph.&lt;/p&gt;\r\n\r\n&lt;/body&gt;\r\n&lt;/html&gt;</div>\r\n</div>\r\n<div class="w3-example"></div>\r\nAn external style sheet can be written in any text editor. The file should not contain any html tags. The style sheet file must be saved with a .css extension.\r\n\r\nHere is how the "styles.css" looks:\r\n<div class="w3-example">\r\n<div class="w3-code notranslate cssHigh">body {\r\nbackground-color: lightgrey;\r\n}\r\n\r\nh1 {\r\ncolor: blue;\r\n}\r\n\r\np {\r\ncolor:green;\r\n}</div>\r\n</div>\r\n\r\n<hr />\r\n\r\n<h2>CSS Fonts</h2>\r\nThe CSS <strong>color</strong> property defines the text color to be used for the HTML element.\r\n\r\nThe CSS <strong>font-family</strong> property defines the font to be used for the HTML element.\r\n\r\nThe CSS <strong>font-size </strong> property defines the text size to be used for the HTML element.\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate htmlHigh">&lt;!DOCTYPE html&gt;\r\n&lt;html&gt;\r\n&lt;head&gt;\r\n&lt;style&gt;\r\nh1 {\r\ncolor: blue;\r\nfont-family: verdana;\r\nfont-size: 300%;\r\n}\r\np  {\r\ncolor: red;\r\nfont-family: courier;\r\nfont-size: 160%;\r\n}\r\n&lt;/style&gt;\r\n&lt;/head&gt;\r\n&lt;body&gt;\r\n\r\n&lt;h1&gt;This is a heading&lt;/h1&gt;\r\n&lt;p&gt;This is a paragraph.&lt;/p&gt;\r\n\r\n&lt;/body&gt;\r\n&lt;/html&gt;</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n\r\n<hr />\r\n\r\n<h2>The CSS Box Model</h2>\r\nEvery HTML element has a box around it, even if you cannot see it.\r\n\r\nThe CSS <strong>border</strong> property defines a visible border around an HTML element:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate cssHigh">p {\r\nborder: 1px solid black;\r\n}</div>\r\n</div>\r\n<div class="w3-example"></div>\r\nThe CSS <strong>padding</strong> property defines a padding (space) inside the border:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate cssHigh">p {\r\nborder: 1px solid black;\r\npadding: 10px;\r\n}</div>\r\n</div>\r\n<div class="w3-example"></div>\r\nThe CSS <strong>margin</strong> property defines a margin (space) outside the border:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate cssHigh">p {\r\nborder: 1px solid black;\r\npadding: 10px;\r\nmargin: 30px;\r\n}</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n<table class="lamp">\r\n<tbody>\r\n<tr>\r\n<th><img src="http://www.w3schools.com/images/lamp.jpg" alt="Note" /></th>\r\n<td>The CSS examples above use px to define sizes in pixels.</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n\r\n<hr />\r\n\r\n<h2>The id Attribute</h2>\r\nAll the examples above use CSS to style HTML elements in a general way.\r\n\r\nTo define a special style for one special element, first add an id attribute to the element:\r\n<div class="w3-example">\r\n<div class="w3-code notranslate htmlHigh">&lt;p id="p01"&gt;I am different&lt;/p&gt;</div>\r\n</div>\r\nthen define a style for the element with the specific id:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate cssHigh">#p01 {\r\ncolor: blue;\r\n}</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n\r\n<hr />\r\n\r\n<h2>The class Attribute</h2>\r\nTo define a style for a special type (class) of elements, add a class attribute to the element:\r\n<div class="w3-example">\r\n<div class="w3-code notranslate htmlHigh">&lt;p class="error"&gt;I am different&lt;/p&gt;</div>\r\n</div>\r\nNow you can define a different style for elements with the specific class:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate cssHigh">p.error {\r\ncolor: red;\r\n}</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n<table class="lamp">\r\n<tbody>\r\n<tr>\r\n<th><img src="http://www.w3schools.com/images/lamp.jpg" alt="Note" /></th>\r\n<td>Use <strong>id</strong> to address a <strong>single</strong> element. Use <strong> class</strong> to address <strong>groups</strong> of elements.</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n\r\n<hr />\r\n\r\n<h2>Chapter Summary</h2>\r\n<ul>\r\n 	<li>Use the HTML <strong>style</strong> attribute for inline styling</li>\r\n 	<li>Use the HTML <strong>&lt;style&gt;</strong> element to define internal CSS</li>\r\n 	<li>Use the HTML <strong>&lt;link&gt;</strong> element to refer to an external CSS file</li>\r\n 	<li>Use the HTML <strong>&lt;head&gt;</strong> element to store &lt;style&gt; and &lt;link&gt; elements</li>\r\n 	<li>Use the CSS <strong>color</strong> property for text colors</li>\r\n 	<li>Use the CSS <strong>font-family</strong> property for text fonts</li>\r\n 	<li>Use the CSS <strong>font-size</strong> property for text sizes</li>\r\n 	<li>Use the CSS <strong>border</strong> property for visible element borders</li>\r\n 	<li>Use the CSS <strong>padding</strong> property for space inside the border</li>\r\n 	<li>Use the CSS <strong>margin</strong> property for space outside the border</li>\r\n</ul>\r\n\r\n<hr />', 'HTML CSS', '', 'inherit', 'closed', 'closed', '', '100-revision-v1', '', '', '2016-05-21 13:30:55', '2016-05-21 13:30:55', '', 100, 'http://localhost/invatacel/2016/05/21/100-revision-v1/', 0, 'revision', '', 0),
(112, 1, '2016-05-21 13:31:40', '2016-05-21 13:31:40', '<p class="intro">Links are found in nearly all web pages. Links allow users to click their way from page to page.</p>\r\n\r\n\r\n<hr />\r\n\r\n<h2>HTML Links - Hyperlinks</h2>\r\nHTML links are hyperlinks.\r\n\r\nA hyperlink is a text or an image you can click on, and jump to another document.\r\n\r\n<hr />\r\n\r\n<h2>HTML Links - Syntax</h2>\r\nIn HTML, links are defined with the <strong>&lt;a&gt;</strong> tag:\r\n<div class="w3-example">\r\n<div class="w3-code notranslate htmlHigh">&lt;a href="<i>url</i>"&gt;<i>link text</i>&lt;/a&gt;</div>\r\n</div>\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate htmlHigh">&lt;a href="http://www.w3schools.com/html/"&gt;Visit our HTML tutorial&lt;/a&gt;</div>\r\n</div>\r\n<div class="w3-example"></div>\r\nThe <strong>href</strong> attribute specifies the destination address (http://www.w3schools.com/html/)\r\n\r\nThe <strong>link text</strong> is the visible part (Visit our HTML tutorial).\r\n\r\nClicking on the link text, will send you to the specified address.\r\n<table class="lamp">\r\n<tbody>\r\n<tr>\r\n<th><img src="http://www.w3schools.com/images/lamp.jpg" alt="Note" /></th>\r\n<td>The link text does not have to be text. It can be an HTML image or any other HTML element.</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n<table class="lamp">\r\n<tbody>\r\n<tr>\r\n<th><img src="http://www.w3schools.com/images/lamp.jpg" alt="Note" /></th>\r\n<td>Without a trailing slash on subfolder addresses, you might generate two requests to the server. Many servers will automatically add a trailing slash to the address, and then create a new request.</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n\r\n<hr />\r\n\r\n<h2>Local Links</h2>\r\nThe example above used an absolute URL (A full web address).\r\n\r\nA local link (link to the same web site) is specified with a relative URL (without http://www....).\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate htmlHigh">&lt;a href="html_images.asp"&gt;HTML Images&lt;/a&gt;</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n\r\n<hr />\r\n\r\n<h2>HTML Links - Colors</h2>\r\nWhen you move the mouse over a link, two things will normally happen:\r\n<ul>\r\n 	<li>The mouse arrow will turn into a little hand</li>\r\n 	<li>The color of the link element will change</li>\r\n</ul>\r\nBy default, a link will appear like this (in all browsers):\r\n<ul>\r\n 	<li>An unvisited link is underlined and blue</li>\r\n 	<li>A visited link is underlined and purple</li>\r\n 	<li>An active link is underlined and red</li>\r\n</ul>\r\nYou can change the default colors, by using styles:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate cssHigh">&lt;style&gt;\r\na:link    {color:green; background-color:transparent; text-decoration:none}\r\na:visited {color:pink; background-color:transparent; text-decoration:none}\r\na:hover   {color:red; background-color:transparent; text-decoration:underline}\r\na:active  {color:yellow; background-color:transparent; text-decoration:underline}\r\n&lt;/style&gt;</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n\r\n<hr />\r\n\r\n<h2>HTML Links - The target Attribute</h2>\r\nThe <strong>target</strong> attribute specifies where to open the linked document.\r\n\r\nThis example will open the linked document in a new browser window or in a new tab:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate htmlHigh">&lt;a href="http://www.w3schools.com/" target="_blank"&gt;Visit W3Schools!&lt;/a&gt;</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n<table class="w3-table-all notranslate">\r\n<tbody>\r\n<tr>\r\n<th>Target Value</th>\r\n<th>Description</th>\r\n</tr>\r\n<tr>\r\n<td>_blank</td>\r\n<td>Opens the linked document in a new window or tab</td>\r\n</tr>\r\n<tr>\r\n<td>_self</td>\r\n<td>Opens the linked document in the same frame as it was clicked (this is default)</td>\r\n</tr>\r\n<tr>\r\n<td>_parent</td>\r\n<td>Opens the linked document in the parent frame</td>\r\n</tr>\r\n<tr>\r\n<td>_top</td>\r\n<td>Opens the linked document in the full body of the window</td>\r\n</tr>\r\n<tr>\r\n<td><i>framename</i></td>\r\n<td>Opens the linked document in a named frame</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\nIf your webpage is locked in a frame, you can use target="_top" to break out of the frame:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate htmlHigh">&lt;a href="http://www.w3schools.com/html/" target="_top"&gt;HTML5 tutorial!&lt;/a&gt;</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n\r\n<hr />\r\n\r\n<h2>HTML Links - Image as Link</h2>\r\nIt is common to use images as links:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate htmlHigh">&lt;a href="default.asp"&gt;\r\n&lt;img src="smiley.gif" alt="HTML tutorial" style="width:42px;height:42px;border:0"&gt;\r\n&lt;/a&gt;</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n<table class="lamp">\r\n<tbody>\r\n<tr>\r\n<th><img src="http://www.w3schools.com/images/lamp.jpg" alt="Note" /></th>\r\n<td>border:0 is added to prevent IE9 (and earlier) from displaying a border around the image.</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n\r\n<hr />\r\n\r\n<h2>HTML Links - Create a Bookmark</h2>\r\nHTML bookmarks are used to allow readers to jump to specific parts of a Web page.\r\n\r\nBookmarks are practical if your website has long pages.\r\n\r\nTo make a bookmark, you must first create the bookmark, and then add a link to it.\r\n\r\nWhen the link is clicked, the page will scroll to the location with the bookmark.\r\n<h2>Example</h2>\r\nFirst, create a bookmark with the id attribute:\r\n<div class="w3-example">\r\n<div class="w3-code notranslate htmlHigh">&lt;h2 id="tips"&gt;Useful Tips Section&lt;/h2&gt;</div>\r\n</div>\r\nThen, add a link to the bookmark ("Useful Tips Section"), from within the same page:\r\n<div class="w3-example">\r\n<div class="w3-code notranslate htmlHigh">&lt;a href="#tips"&gt;Visit the Useful Tips Section&lt;/a&gt;</div>\r\n</div>\r\nOr, add a link to the bookmark ("Useful Tips Section"), from another page:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate htmlHigh">&lt;a href="html_tips.html#tips"&gt;Visit the Useful Tips Section&lt;/a&gt;</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n\r\n<hr />\r\n\r\n<h2>Chapter Summary</h2>\r\n<ul>\r\n 	<li>Use the HTML <strong>&lt;a&gt;</strong> element to define a link</li>\r\n 	<li>Use the HTML <strong>href</strong> attribute to define the link address</li>\r\n 	<li>Use the HTML <strong>target</strong> attribute to define where to open the linked document</li>\r\n 	<li>Use the HTML <strong>&lt;img&gt;</strong> element (inside &lt;a&gt;) to use an image as a link</li>\r\n 	<li>Use the HTML <strong>id</strong> attribute (id="<em>value</em>") to define bookmarks in a page</li>\r\n 	<li>Use the HTML <strong>href </strong>attribute (href="#<em>value</em>") to link to the bookmark</li>\r\n</ul>', 'HTML Links', '', 'inherit', 'closed', 'closed', '', '101-revision-v1', '', '', '2016-05-21 13:31:40', '2016-05-21 13:31:40', '', 101, 'http://localhost/invatacel/2016/05/21/101-revision-v1/', 0, 'revision', '', 0),
(113, 1, '2016-05-21 13:32:58', '2016-05-21 13:32:58', '<h3>Example</h3>\r\n<div class="w3-code notranslate htmlHigh">&lt;!DOCTYPE html&gt;\r\n&lt;html&gt;\r\n&lt;body&gt;\r\n\r\n&lt;h2&gt;Spectacular Mountain&lt;/h2&gt;\r\n&lt;img src="pic_mountain.jpg" alt="Mountain View" style="width:304px;height:228px;"&gt;\r\n\r\n&lt;/body&gt;\r\n&lt;/html&gt;</div>\r\n<div class="w3-example"></div>\r\n<table class="lamp">\r\n<tbody>\r\n<tr>\r\n<th><img src="http://www.w3schools.com/images/lamp.jpg" alt="Note" /></th>\r\n<td>Always specify the width and height of an image. If width and height are not specified, the page will flicker while the image loads.</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n\r\n<hr />\r\n\r\n<h2>HTML Images Syntax</h2>\r\nIn HTML, images are defined with the <strong>&lt;img&gt;</strong> tag.\r\n\r\nThe &lt;img&gt; tag is empty, it contains attributes only, and does not have a closing tag.\r\n\r\nThe src attribute specifies the URL (web address) of the image:\r\n<div class="w3-example">\r\n<div class="w3-code notranslate htmlHigh">&lt;img src="<i>url</i>" alt="<i>some_text</i>"&gt;</div>\r\n</div>\r\n\r\n<hr />\r\n\r\n<h2>The alt Attribute</h2>\r\nThe alt attribute specifies an alternate text for an image, if the image cannot be displayed.\r\n\r\nThe alt attribute provides alternative information for an image if a user for some reason cannot view it (because of slow connection, an error in the src attribute, or if the user uses a screen reader).\r\n\r\nIf a browser cannot find an image, it will display the alt text:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate htmlHigh">&lt;img src="wrongname.gif" alt="HTML5 Icon" style="width:128px;height:128px;"&gt;</div>\r\n</div>\r\n<div class="w3-example"></div>\r\nThe alt attribute is required. A web page will not validate correctly without it.\r\n\r\n<hr />\r\n\r\n<h2>HTML Screen Readers</h2>\r\nA screen reader is a software program that can read what is displayed on a screen.\r\n\r\nScreen readers are useful to people who are blind, visually impaired, or learning disabled.\r\n<table class="lamp">\r\n<tbody>\r\n<tr>\r\n<th><img src="http://www.w3schools.com/images/lamp.jpg" alt="Note" /></th>\r\n<td>Screen readers can read the <strong>alt</strong> attribute.</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n\r\n<hr />\r\n\r\n<h2>Image Size - Width and Height</h2>\r\nYou can use the <strong>style</strong> attribute to specify the width and height of an image.\r\n\r\nThe values are specified in pixels (use px after the value):\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate htmlHigh">&lt;img src="html5.gif" alt="HTML5 Icon" style="width:128px;height:128px;"&gt;</div>\r\n</div>\r\n<div class="w3-example"></div>\r\nAlternatively, you can use <strong>width</strong> and <strong>height</strong> attributes. Here, the values are specified in pixels by default:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate htmlHigh">&lt;img src="html5.gif" alt="HTML5 Icon" width="128" height="128"&gt;</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n\r\n<hr />\r\n\r\n<h2>Width and Height or Style?</h2>\r\nBoth the width, height, and style attributes are valid in the latest HTML5 standard.\r\n\r\nWe suggest you use the style attribute. It prevents styles sheets from changing the original size of images:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate htmlHigh">&lt;!DOCTYPE html&gt;\r\n&lt;html&gt;\r\n&lt;head&gt;\r\n&lt;style&gt;\r\nimg {\r\nwidth:100%;\r\n}\r\n&lt;/style&gt;\r\n&lt;/head&gt;\r\n&lt;body&gt;\r\n\r\n&lt;img src="html5.gif" alt="HTML5 Icon" style="width:128px;height:128px;"&gt;\r\n&lt;img src="html5.gif" alt="HTML5 Icon" width="128" height="128"&gt;\r\n\r\n&lt;/body&gt;\r\n&lt;/html&gt;</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n\r\n<hr />\r\n\r\n<h2>Images in Another Folder</h2>\r\nIf not specified, the browser expects to find the image in the same folder as the web page.\r\n\r\nHowever, it is common to store images in a sub-folder. You must then include the folder name in the src attribute:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate htmlHigh">&lt;img src="/images/html5.gif" alt="HTML5 Icon" style="width:128px;height:128px;"&gt;</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n\r\n<hr />\r\n\r\n<h2>Images on Another Server</h2>\r\nSome web sites store their images on image servers.\r\n\r\nActually, you can access images from any web address in the world:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate htmlHigh">&lt;img src="http://www.w3schools.com/images/w3schools_green.jpg" alt="W3Schools.com"&gt;</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n\r\n<hr />\r\n\r\n<h2>Animated Images</h2>\r\nThe GIF standard allows animated images:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate htmlHigh">&lt;img src="programming.gif" alt="Computer Man" style="width:48px;height:48px;"&gt;</div>\r\n</div>\r\n<div class="w3-example"></div>\r\nNote that the syntax of inserting animated images is no different from non-animated images.\r\n\r\n<hr />\r\n\r\n<h2>Using an Image as a Link</h2>\r\nTo use an image as a link, simply nest the &lt;img&gt; tag inside the &lt;a&gt; tag:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate htmlHigh">&lt;a href="default.asp"&gt;\r\n&lt;img src="smiley.gif" alt="HTML tutorial" style="width:42px;height:42px;border:0;"&gt;\r\n&lt;/a&gt;</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n<table class="lamp">\r\n<tbody>\r\n<tr>\r\n<th><img src="http://www.w3schools.com/images/lamp.jpg" alt="Note" /></th>\r\n<td>Add "border:0;" to prevent IE9 (and earlier) from displaying a border around the image.</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n\r\n<hr />\r\n\r\n<h2>Image Floating</h2>\r\nUse the CSS float property to let the image float.\r\n\r\nThe image can float to the right or to the left of a text:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate htmlHigh">&lt;p&gt;\r\n&lt;img src="smiley.gif" alt="Smiley face" style="float:right;width:42px;height:42px;"&gt;\r\nThe image will float to the right of the text.\r\n&lt;/p&gt;\r\n\r\n&lt;p&gt;\r\n&lt;img src="smiley.gif" alt="Smiley face" style="float:left;width:42px;height:42px;"&gt;\r\nThe image will float to the left of the text.\r\n&lt;/p&gt;</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n\r\n<hr />\r\n\r\n<h2>Image Maps</h2>\r\nUse the &lt;map&gt; tag to define an image-map. An image-map is an image with clickable areas.\r\n\r\nThe name attribute of the &lt;map&gt; tag is associated with the &lt;img&gt;''s usemap attribute and creates a relationship between the image and the map.\r\n\r\nThe &lt;map&gt; tag contains a number of &lt;area&gt; tags, that defines the clickable areas in the image-map:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate htmlHigh">&lt;img src="planets.gif" alt="Planets" usemap="#planetmap" style="width:145px;height:126px;"&gt;\r\n\r\n&lt;map name="planetmap"&gt;\r\n&lt;area shape="rect" coords="0,0,82,126" alt="Sun" href="sun.htm"&gt;\r\n&lt;area shape="circle" coords="90,58,3" alt="Mercury" href="mercur.htm"&gt;\r\n&lt;area shape="circle" coords="124,58,8" alt="Venus" href="venus.htm"&gt;\r\n&lt;/map&gt;</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n\r\n<hr />\r\n\r\n<h2>Chapter Summary</h2>\r\n<ul>\r\n 	<li>Use the HTML <strong>&lt;img&gt;</strong> element to define an image</li>\r\n 	<li>Use the HTML <strong>src</strong> attribute to define the URL of the image</li>\r\n 	<li>Use the HTML <strong>alt</strong> attribute to define an alternate text for an image, if it cannot be displayed</li>\r\n 	<li>Use the HTML <strong>width</strong> and <strong>height</strong> attributes to define the size of the image</li>\r\n 	<li>Use the CSS <strong>width</strong> and <strong>height</strong> properties to define the size of the image (alternatively)</li>\r\n 	<li>Use the CSS <strong>float</strong> property to let the image float</li>\r\n 	<li>Use the HTML <strong>&lt;map&gt;</strong> element to define an image-map</li>\r\n 	<li>Use the HTML <strong>&lt;area&gt;</strong> element to define the clickable areas in the image-map</li>\r\n 	<li>Use the HTML &lt;img&gt;''s element <strong>usemap</strong> attribute to point to an image-map</li>\r\n</ul>\r\n<table class="lamp">\r\n<tbody>\r\n<tr>\r\n<th><img src="http://www.w3schools.com/images/lamp.jpg" alt="Note" /></th>\r\n<td>Loading images takes time. Large images can slow down your page. Use images carefully.</td>\r\n</tr>\r\n</tbody>\r\n</table>', 'HTML Images', '', 'inherit', 'closed', 'closed', '', '102-revision-v1', '', '', '2016-05-21 13:32:58', '2016-05-21 13:32:58', '', 102, 'http://localhost/invatacel/2016/05/21/102-revision-v1/', 0, 'revision', '', 0),
(114, 1, '2016-05-21 13:33:50', '2016-05-21 13:33:50', '<h2>HTML Table Example</h2>\r\n<table class="w3-table-all">\r\n<tbody>\r\n<tr>\r\n<th>Number</th>\r\n<th>First Name</th>\r\n<th>Last Name</th>\r\n<th>Points</th>\r\n</tr>\r\n<tr>\r\n<td>1</td>\r\n<td>Eve</td>\r\n<td>Jackson</td>\r\n<td>94</td>\r\n</tr>\r\n<tr>\r\n<td>2</td>\r\n<td>John</td>\r\n<td>Doe</td>\r\n<td>80</td>\r\n</tr>\r\n<tr>\r\n<td>3</td>\r\n<td>Adam</td>\r\n<td>Johnson</td>\r\n<td>67</td>\r\n</tr>\r\n<tr>\r\n<td>4</td>\r\n<td>Jill</td>\r\n<td>Smith</td>\r\n<td>50</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n\r\n<hr />\r\n\r\n<h2>Defining HTML Tables</h2>\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate htmlHigh">&lt;table style="width:100%"&gt;\r\n&lt;tr&gt;\r\n&lt;td&gt;Jill&lt;/td&gt;\r\n&lt;td&gt;Smith&lt;/td&gt;\r\n&lt;td&gt;50&lt;/td&gt;\r\n&lt;/tr&gt;\r\n&lt;tr&gt;\r\n&lt;td&gt;Eve&lt;/td&gt;\r\n&lt;td&gt;Jackson&lt;/td&gt;\r\n&lt;td&gt;94&lt;/td&gt;\r\n&lt;/tr&gt;\r\n&lt;/table&gt;</div>\r\n</div>\r\n<div class="w3-example"></div>\r\nExample explained:\r\n\r\nTables are defined with the <strong>&lt;table&gt;</strong> tag.\r\n\r\nTables are divided into <strong>table rows</strong> with the <strong>&lt;tr&gt;</strong> tag.\r\n\r\nTable rows are divided into <strong>table data</strong> with the <strong>&lt;td&gt;</strong> tag.\r\n\r\nA table row can also be divided into <strong>table headings</strong> with the <strong>&lt;th&gt;</strong> tag.\r\n<table class="lamp">\r\n<tbody>\r\n<tr>\r\n<th><img src="http://www.w3schools.com/images/lamp.jpg" alt="Note" /></th>\r\n<td>Table data &lt;td&gt; are the data containers of the table.\r\nThey can contain all sorts of HTML elements like text, images, lists, other tables, etc.</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n\r\n<hr />\r\n\r\n<h2>An HTML Table with a Border Attribute</h2>\r\nIf you do not specify a border for the table, it will be displayed without borders.\r\n\r\nA border can be added using the border attribute:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate htmlHigh">&lt;table border="1" style="width:100%"&gt;\r\n&lt;tr&gt;\r\n&lt;td&gt;Jill&lt;/td&gt;\r\n&lt;td&gt;Smith&lt;/td&gt;\r\n&lt;td&gt;50&lt;/td&gt;\r\n&lt;/tr&gt;\r\n&lt;tr&gt;\r\n&lt;td&gt;Eve&lt;/td&gt;\r\n&lt;td&gt;Jackson&lt;/td&gt;\r\n&lt;td&gt;94&lt;/td&gt;\r\n&lt;/tr&gt;\r\n&lt;/table&gt;</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n<table class="lamp">\r\n<tbody>\r\n<tr>\r\n<th><img src="http://www.w3schools.com/images/lamp.jpg" alt="Note" /></th>\r\n<td>The border attribute is on its way out of the HTML standard! It is better to use CSS.</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\nTo add borders, use the <strong>CSS border</strong> property:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate cssHigh">table, th, td {\r\nborder: 1px solid black;\r\n}</div>\r\n</div>\r\n<div class="w3-example"></div>\r\nRemember to define borders for both the table and the table cells.\r\n\r\n<hr />\r\n\r\n<h2>An HTML Table with Collapsed Borders</h2>\r\nIf you want the borders to collapse into one border, add <strong>CSS border-collapse</strong>:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate cssHigh">table, th, td {\r\nborder: 1px solid black;\r\nborder-collapse: collapse;\r\n}</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n\r\n<hr />\r\n\r\n<h2>An HTML Table with Cell Padding</h2>\r\nCell padding specifies the space between the cell content and its borders.\r\n\r\nIf you do not specify a padding, the table cells will be displayed without padding.\r\n\r\nTo set the padding, use the <strong>CSS padding</strong> property:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate cssHigh">table, th, td {\r\nborder: 1px solid black;\r\nborder-collapse: collapse;\r\n}\r\nth, td {\r\npadding: 15px;\r\n}</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n\r\n<hr />\r\n\r\n<h2>HTML Table Headings</h2>\r\nTable headings are defined with the <strong>&lt;th&gt;</strong> tag.\r\n\r\nBy default, all major browsers display table headings as bold and centered:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate htmlHigh">&lt;table style="width:100%"&gt;\r\n&lt;tr&gt;\r\n&lt;th&gt;Firstname&lt;/th&gt;\r\n&lt;th&gt;Lastname&lt;/th&gt;\r\n&lt;th&gt;Points&lt;/th&gt;\r\n&lt;/tr&gt;\r\n&lt;tr&gt;\r\n&lt;td&gt;Eve&lt;/td&gt;\r\n&lt;td&gt;Jackson&lt;/td&gt;\r\n&lt;td&gt;94&lt;/td&gt;\r\n&lt;/tr&gt;\r\n&lt;/table&gt;</div>\r\n</div>\r\n<div class="w3-example"></div>\r\nTo left-align the table headings, use the <strong>CSS text-align</strong> property:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate cssHigh">th {\r\ntext-align: left;\r\n}</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n\r\n<hr />\r\n\r\n<h2>An HTML Table with Border Spacing</h2>\r\nBorder spacing specifies the space between the cells.\r\n\r\nTo set the border spacing for a table, use the <strong>CSS border-spacing</strong> property:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate cssHigh">table {\r\nborder-spacing: 5px;\r\n}</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n<table class="lamp">\r\n<tbody>\r\n<tr>\r\n<th><img src="http://www.w3schools.com/images/lamp.jpg" alt="Note" /></th>\r\n<td>If the table has collapsed borders, border-spacing has no effect.</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n\r\n<hr />\r\n\r\n<h2>Table Cells that Span Many Columns</h2>\r\nTo make a cell span more than one column, use the <strong>colspan</strong> attribute:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate htmlHigh">&lt;table style="width:100%"&gt;\r\n&lt;tr&gt;\r\n&lt;th&gt;Name&lt;/th&gt;\r\n&lt;th colspan="2"&gt;Telephone&lt;/th&gt;\r\n&lt;/tr&gt;\r\n&lt;tr&gt;\r\n&lt;td&gt;Bill Gates&lt;/td&gt;\r\n&lt;td&gt;555 77 854&lt;/td&gt;\r\n&lt;td&gt;555 77 855&lt;/td&gt;\r\n&lt;/tr&gt;\r\n&lt;/table&gt;</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n\r\n<hr />\r\n\r\n<h2>Table Cells that Span Many Rows</h2>\r\nTo make a cell span more than one row, use the <strong>rowspan</strong> attribute:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate htmlHigh">&lt;table style="width:100%"&gt;\r\n&lt;tr&gt;\r\n&lt;th&gt;Name:&lt;/th&gt;\r\n&lt;td&gt;Bill Gates&lt;/td&gt;\r\n&lt;/tr&gt;\r\n&lt;tr&gt;\r\n&lt;th rowspan="2"&gt;Telephone:&lt;/th&gt;\r\n&lt;td&gt;555 77 854&lt;/td&gt;\r\n&lt;/tr&gt;\r\n&lt;tr&gt;\r\n&lt;td&gt;555 77 855&lt;/td&gt;\r\n&lt;/tr&gt;\r\n&lt;/table&gt;</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n\r\n<hr />\r\n\r\n<h2>An HTML Table With a Caption</h2>\r\nTo add a caption to a table, use the <strong>&lt;caption&gt;</strong> tag:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate htmlHigh">&lt;table style="width:100%"&gt;\r\n&lt;caption&gt;Monthly savings&lt;/caption&gt;\r\n&lt;tr&gt;\r\n&lt;th&gt;Month&lt;/th&gt;\r\n&lt;th&gt;Savings&lt;/th&gt;\r\n&lt;/tr&gt;\r\n&lt;tr&gt;\r\n&lt;td&gt;January&lt;/td&gt;\r\n&lt;td&gt;$100&lt;/td&gt;\r\n&lt;/tr&gt;\r\n&lt;tr&gt;\r\n&lt;td&gt;February&lt;/td&gt;\r\n&lt;td&gt;$50&lt;/td&gt;\r\n&lt;/tr&gt;\r\n&lt;/table&gt;</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n<table class="lamp">\r\n<tbody>\r\n<tr>\r\n<th><img src="http://www.w3schools.com/images/lamp.jpg" alt="Note" /></th>\r\n<td>The &lt;caption&gt; tag must be inserted immediately after the &lt;table&gt; tag.</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n\r\n<hr />\r\n\r\n<h2>A Special Style for One Table</h2>\r\nTo define a special style for a special table, add an <strong>id attribute</strong> to the table:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate htmlHigh">&lt;table id="t01"&gt;\r\n&lt;tr&gt;\r\n&lt;th&gt;Firstname&lt;/th&gt;\r\n&lt;th&gt;Lastname&lt;/th&gt;\r\n&lt;th&gt;Points&lt;/th&gt;\r\n&lt;/tr&gt;\r\n&lt;tr&gt;\r\n&lt;td&gt;Eve&lt;/td&gt;\r\n&lt;td&gt;Jackson&lt;/td&gt;\r\n&lt;td&gt;94&lt;/td&gt;\r\n&lt;/tr&gt;\r\n&lt;/table&gt;</div>\r\n</div>\r\n<div class="w3-example">\r\n<h3>Now you can define a special style for this table:</h3>\r\n<div class="w3-code notranslate cssHigh">table#t01 {\r\nwidth: 100%;\r\nbackground-color: #f1f1c1;\r\n}</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n<div class="w3-example">\r\n<h3>And add more styles:</h3>\r\n<div class="w3-code notranslate cssHigh">table#t01 tr:nth-child(even) {\r\nbackground-color: #eee;\r\n}\r\ntable#t01 tr:nth-child(odd) {\r\nbackground-color: #fff;\r\n}\r\ntable#t01 th {\r\ncolor: white;\r\nbackground-color: black;\r\n}</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n\r\n<hr />\r\n\r\n<h2>Chapter Summary</h2>\r\n<ul>\r\n 	<li>Use the HTML <strong>&lt;table&gt;</strong> element to define a table</li>\r\n 	<li>Use the HTML <strong>&lt;tr&gt;</strong> element to define a table row</li>\r\n 	<li>Use the HTML <strong>&lt;td&gt;</strong> element to define a table data</li>\r\n 	<li>Use the HTML <strong>&lt;th&gt;</strong> element to define a table heading</li>\r\n 	<li>Use the HTML <strong>&lt;caption&gt;</strong> element to define a table caption</li>\r\n 	<li>Use the CSS <strong>border</strong> property to define a border</li>\r\n 	<li>Use the CSS <strong>border-collapse</strong> property to collapse cell borders</li>\r\n 	<li>Use the CSS <strong>padding</strong> property to add padding to cells</li>\r\n 	<li>Use the CSS <strong>text-align</strong> property to align cell text</li>\r\n 	<li>Use the CSS <strong>border-spacing</strong> property to set the spacing between cells</li>\r\n 	<li>Use the <strong>colspan</strong> attribute to make a cell span many columns</li>\r\n 	<li>Use the <strong>rowspan</strong> attribute to make a cell span many rows</li>\r\n 	<li>Use the <strong>id</strong> attribute to uniquely define one table</li>\r\n</ul>', 'HTML Tables', '', 'inherit', 'closed', 'closed', '', '103-revision-v1', '', '', '2016-05-21 13:33:50', '2016-05-21 13:33:50', '', 103, 'http://localhost/invatacel/2016/05/21/103-revision-v1/', 0, 'revision', '', 0),
(115, 1, '2016-05-21 13:34:50', '2016-05-21 13:34:50', '<div class="w3-example">\r\n<h3>xample of an unordered list and an ordered list in HTML:</h3>\r\n<div class="w3-padding w3-white">\r\n<div class="w3-row">\r\n<div class="w3col w3-half">\r\n<h3>Unordered List:</h3>\r\n<ul>\r\n 	<li>Item</li>\r\n 	<li>Item</li>\r\n 	<li>Item</li>\r\n 	<li>Item</li>\r\n</ul>\r\n</div>\r\n<div class="w3col w3-half">\r\n<h3>Ordered List:</h3>\r\n<ol>\r\n 	<li>First item</li>\r\n 	<li>Second item</li>\r\n 	<li>Third item</li>\r\n 	<li>Fourth item</li>\r\n</ol>\r\n</div>\r\n</div>\r\n</div>\r\n</div>\r\n\r\n<hr />\r\n\r\n<h2>Unordered HTML Lists</h2>\r\nAn unordered list starts with the <strong>&lt;ul&gt;</strong> tag. Each list item starts with the <strong>&lt;li&gt;</strong> tag.\r\n\r\nThe list items will be marked with bullets (small black circles):\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate htmlHigh">&lt;ul&gt;\r\n&lt;li&gt;Coffee&lt;/li&gt;\r\n&lt;li&gt;Tea&lt;/li&gt;\r\n&lt;li&gt;Milk&lt;/li&gt;\r\n&lt;/ul&gt;</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n\r\n<hr />\r\n\r\n<h2>Unordered HTML Lists - The Style Attribute</h2>\r\nA <strong>style</strong> attribute can be added to an <strong>unordered list</strong>, to define the style of the marker:\r\n<table class="w3-table-all notranslate">\r\n<tbody>\r\n<tr>\r\n<th>Style</th>\r\n<th>Description</th>\r\n</tr>\r\n<tr>\r\n<td>list-style-type:disc</td>\r\n<td>The list items will be marked with bullets (default)</td>\r\n</tr>\r\n<tr>\r\n<td>list-style-type:circle</td>\r\n<td>The list items will be marked with circles</td>\r\n</tr>\r\n<tr>\r\n<td>list-style-type:square</td>\r\n<td>The list items will be marked with squares</td>\r\n</tr>\r\n<tr>\r\n<td>list-style-type:none</td>\r\n<td>The list items will not be marked</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n<div class="w3-example">\r\n<h3>Disc:</h3>\r\n<div class="w3-code notranslate htmlHigh">&lt;ul style="list-style-type:disc"&gt;\r\n&lt;li&gt;Coffee&lt;/li&gt;\r\n&lt;li&gt;Tea&lt;/li&gt;\r\n&lt;li&gt;Milk&lt;/li&gt;\r\n&lt;/ul&gt;</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n<div class="w3-example">\r\n<h3>Circle:</h3>\r\n<div class="w3-code notranslate htmlHigh">&lt;ul style="list-style-type:circle"&gt;\r\n&lt;li&gt;Coffee&lt;/li&gt;\r\n&lt;li&gt;Tea&lt;/li&gt;\r\n&lt;li&gt;Milk&lt;/li&gt;\r\n&lt;/ul&gt;</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n<div class="w3-example">\r\n<h3>Square:</h3>\r\n<div class="w3-code notranslate htmlHigh">&lt;ul style="list-style-type:square"&gt;\r\n&lt;li&gt;Coffee&lt;/li&gt;\r\n&lt;li&gt;Tea&lt;/li&gt;\r\n&lt;li&gt;Milk&lt;/li&gt;\r\n&lt;/ul&gt;</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n<div class="w3-example">\r\n<h3>None:</h3>\r\n<div class="w3-code notranslate htmlHigh">&lt;ul style="list-style-type:none"&gt;\r\n&lt;li&gt;Coffee&lt;/li&gt;\r\n&lt;li&gt;Tea&lt;/li&gt;\r\n&lt;li&gt;Milk&lt;/li&gt;\r\n&lt;/ul&gt;</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n\r\n<hr />\r\n\r\n<h2>Ordered HTML Lists</h2>\r\nAn ordered list starts with the <strong>&lt;ol&gt;</strong> tag. Each list item starts with the <strong>&lt;li&gt;</strong> tag.\r\n\r\nThe list items will be marked with numbers:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate htmlHigh">&lt;ol&gt;\r\n&lt;li&gt;Coffee&lt;/li&gt;\r\n&lt;li&gt;Tea&lt;/li&gt;\r\n&lt;li&gt;Milk&lt;/li&gt;\r\n&lt;/ol&gt;</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n\r\n<hr />\r\n\r\n<h2>Ordered HTML Lists - The Type Attribute</h2>\r\nA <strong>type</strong> attribute can be added to an <strong>ordered list</strong>, to define the type of the marker:\r\n<table class="w3-table-all notranslate">\r\n<tbody>\r\n<tr>\r\n<th>Type</th>\r\n<th>Description</th>\r\n</tr>\r\n<tr>\r\n<td>type="1"</td>\r\n<td>The list items will be numbered with numbers (default)</td>\r\n</tr>\r\n<tr>\r\n<td>type="A"</td>\r\n<td>The list items will be numbered with uppercase letters</td>\r\n</tr>\r\n<tr>\r\n<td>type="a"</td>\r\n<td>The list items will be numbered with lowercase letters</td>\r\n</tr>\r\n<tr>\r\n<td>type="I"</td>\r\n<td>The list items will be numbered with uppercase roman numbers</td>\r\n</tr>\r\n<tr>\r\n<td>type="i"</td>\r\n<td>The list items will be numbered with lowercase roman numbers</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n<div class="w3-example">\r\n<h3>Numbers:</h3>\r\n<div class="w3-code notranslate htmlHigh">&lt;ol type="1"&gt;\r\n&lt;li&gt;Coffee&lt;/li&gt;\r\n&lt;li&gt;Tea&lt;/li&gt;\r\n&lt;li&gt;Milk&lt;/li&gt;\r\n&lt;/ol&gt;</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n<div class="w3-example">\r\n<h3>Uppercase Letters:</h3>\r\n<div class="w3-code notranslate htmlHigh">&lt;ol type="A"&gt;\r\n&lt;li&gt;Coffee&lt;/li&gt;\r\n&lt;li&gt;Tea&lt;/li&gt;\r\n&lt;li&gt;Milk&lt;/li&gt;\r\n&lt;/ol&gt;</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n<div class="w3-example">\r\n<h3>Lowercase Letters:</h3>\r\n<div class="w3-code notranslate htmlHigh">&lt;ol type="a"&gt;\r\n&lt;li&gt;Coffee&lt;/li&gt;\r\n&lt;li&gt;Tea&lt;/li&gt;\r\n&lt;li&gt;Milk&lt;/li&gt;\r\n&lt;/ol&gt;</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n<div class="w3-example">\r\n<h3>Uppercase Roman Numbers:</h3>\r\n<div class="w3-code notranslate htmlHigh">&lt;ol type="I"&gt;\r\n&lt;li&gt;Coffee&lt;/li&gt;\r\n&lt;li&gt;Tea&lt;/li&gt;\r\n&lt;li&gt;Milk&lt;/li&gt;\r\n&lt;/ol&gt;</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n<div class="w3-example">\r\n<h3>Lowercase Roman Numbers:</h3>\r\n<div class="w3-code notranslate htmlHigh">&lt;ol type="i"&gt;\r\n&lt;li&gt;Coffee&lt;/li&gt;\r\n&lt;li&gt;Tea&lt;/li&gt;\r\n&lt;li&gt;Milk&lt;/li&gt;\r\n&lt;/ol&gt;</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n\r\n<hr />\r\n\r\n<h2>HTML Description Lists</h2>\r\nHTML also supports description lists.\r\n\r\nA description list is a list of terms, with a description of each term.\r\n\r\nThe <strong>&lt;dl&gt;</strong> tag defines the description list, the <strong>&lt;dt&gt;</strong> tag defines the term (name), and the <strong>&lt;dd&gt;</strong> tag describes each term:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate htmlHigh">&lt;dl&gt;\r\n&lt;dt&gt;Coffee&lt;/dt&gt;\r\n&lt;dd&gt;- black hot drink&lt;/dd&gt;\r\n&lt;dt&gt;Milk&lt;/dt&gt;\r\n&lt;dd&gt;- white cold drink&lt;/dd&gt;\r\n&lt;/dl&gt;</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n\r\n<hr />\r\n\r\n<h2>Nested HTML Lists</h2>\r\nList can be nested (lists inside lists):\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate htmlHigh">&lt;ul&gt;\r\n&lt;li&gt;Coffee&lt;/li&gt;\r\n&lt;li&gt;Tea\r\n&lt;ul&gt;\r\n&lt;li&gt;Black tea&lt;/li&gt;\r\n&lt;li&gt;Green tea&lt;/li&gt;\r\n&lt;/ul&gt;\r\n&lt;/li&gt;\r\n&lt;li&gt;Milk&lt;/li&gt;\r\n&lt;/ul&gt;</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n<table class="lamp">\r\n<tbody>\r\n<tr>\r\n<th><img src="http://www.w3schools.com/images/lamp.jpg" alt="Note" /></th>\r\n<td>List items can contain new list, and other HTML elements, like images and links, etc.</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n\r\n<hr />\r\n\r\n<h2>Horizontal Lists</h2>\r\nHTML lists can be styled in many different ways with CSS.\r\n\r\nOne popular way, is to style a list to be displayed horizontally:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate htmlHigh">&lt;!DOCTYPE html&gt;\r\n&lt;html&gt;\r\n\r\n&lt;head&gt;\r\n&lt;style&gt;\r\nul#menu li {\r\ndisplay:inline;\r\n}\r\n&lt;/style&gt;\r\n&lt;/head&gt;\r\n\r\n&lt;body&gt;\r\n\r\n&lt;h2&gt;Horizontal List&lt;/h2&gt;\r\n\r\n&lt;ul id="menu"&gt;\r\n&lt;li&gt;HTML&lt;/li&gt;\r\n&lt;li&gt;CSS&lt;/li&gt;\r\n&lt;li&gt;JavaScript&lt;/li&gt;\r\n&lt;li&gt;PHP&lt;/li&gt;\r\n&lt;/ul&gt;\r\n\r\n&lt;/body&gt;\r\n&lt;/html&gt;</div>\r\n</div>\r\n<div class="w3-example"></div>\r\nWith a little extra style, you can make it look like a menu:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate cssHigh">ul#menu {\r\npadding: 0;\r\n}\r\n\r\nul#menu li {\r\ndisplay: inline;\r\n}\r\n\r\nul#menu li a {\r\nbackground-color: black;\r\ncolor: white;\r\npadding: 10px 20px;\r\ntext-decoration: none;\r\nborder-radius: 4px 4px 0 0;\r\n}\r\n\r\nul#menu li a:hover {\r\nbackground-color: orange;\r\n}</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n\r\n<hr />\r\n\r\n<h2>Chapter Summary</h2>\r\n<ul>\r\n 	<li>Use the HTML <strong>&lt;ul&gt;</strong> element to define an unordered list</li>\r\n 	<li>Use the HTML <strong>style</strong> attribute to define the bullet style</li>\r\n 	<li>Use the HTML <strong>&lt;ol&gt;</strong> element to define an ordered list</li>\r\n 	<li>Use the HTML <strong>type</strong> attribute to define the numbering type</li>\r\n 	<li>Use the HTML <strong>&lt;li&gt;</strong> element to define a list item</li>\r\n 	<li>Use the HTML <strong>&lt;dl&gt;</strong> element to define a description list</li>\r\n 	<li>Use the HTML <strong>&lt;dt&gt;</strong> element to define the description term</li>\r\n 	<li>Use the HTML <strong>&lt;dd&gt;</strong> element to define the description data</li>\r\n 	<li>Lists can be nested inside lists</li>\r\n 	<li>List items can contain other HTML elements</li>\r\n 	<li>Use the CSS property <strong>display:inline</strong> to display a list horizontally</li>\r\n</ul>', 'HTML Lists', '', 'inherit', 'closed', 'closed', '', '104-revision-v1', '', '', '2016-05-21 13:34:50', '2016-05-21 13:34:50', '', 104, 'http://localhost/invatacel/2016/05/21/104-revision-v1/', 0, 'revision', '', 0);
INSERT INTO `wp_posts` (`ID`, `post_author`, `post_date`, `post_date_gmt`, `post_content`, `post_title`, `post_excerpt`, `post_status`, `comment_status`, `ping_status`, `post_password`, `post_name`, `to_ping`, `pinged`, `post_modified`, `post_modified_gmt`, `post_content_filtered`, `post_parent`, `guid`, `menu_order`, `post_type`, `post_mime_type`, `comment_count`) VALUES
(116, 1, '2016-05-21 13:35:15', '2016-05-21 13:35:15', '<h2>Classing Block Elements</h2>\r\nThe HTML class attribute makes it possible to define equal styles for "equal" &lt;div&gt; elements:\r\n<div>\r\n<h2>London</h2>\r\nLondon is the capital city of England. It is the most populous city in the United Kingdom, with a metropolitan area of over 13 million inhabitants.\r\n\r\nStanding on the River Thames, London has been a major settlement for two millennia, its history going back to its founding by the Romans, who named it Londinium.\r\n\r\n</div>\r\n<div>\r\n<h2>Paris</h2>\r\nParis is the capital and most populous city of France.\r\n\r\nSituated on the Seine River, it is at the heart of the Île-de-France region, also known as the région parisienne.\r\n\r\nWithin its metropolitan area is one of the largest population centers in Europe, with over 12 million inhabitants.\r\n\r\n</div>\r\n<div>\r\n<h2>Tokyo</h2>\r\nTokyo is the capital of Japan, the center of the Greater Tokyo Area, and the most populous metropolitan area in the world.\r\n\r\nIt is the seat of the Japanese government and the Imperial Palace, and the home of the Japanese Imperial Family.\r\n\r\nThe Tokyo prefecture is part of the world''s most populous metropolitan area with 38 million people and the world''s largest urban economy.\r\n\r\n</div>\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate htmlHigh">&lt;!DOCTYPE html&gt;\r\n&lt;html&gt;\r\n&lt;head&gt;\r\n&lt;style&gt;\r\ndiv.cities {\r\nbackground-color:black;\r\ncolor:white;\r\nmargin:20px;\r\npadding:20px;\r\n}\r\n&lt;/style&gt;\r\n&lt;/head&gt;\r\n&lt;body&gt;\r\n\r\n&lt;div class="cities"&gt;\r\n&lt;h2&gt;London&lt;/h2&gt;\r\n&lt;p&gt;London is the capital city of England. It is the most populous city in the United Kingdom, with a metropolitan area of over 13 million inhabitants.&lt;/p&gt;\r\n&lt;/div&gt;\r\n\r\n&lt;div class="cities"&gt;\r\n&lt;h2&gt;Paris&lt;/h2&gt;\r\n&lt;p&gt;Paris is the capital and most populous city of France.&lt;/p&gt;\r\n&lt;/div&gt;\r\n\r\n&lt;div class="cities"&gt;\r\n&lt;h2&gt;Tokyo&lt;/h2&gt;\r\n&lt;p&gt;Tokyo is the capital of Japan, the center of the Greater Tokyo Area,\r\nand the most populous metropolitan area in the world.&lt;/p&gt;\r\n&lt;/div&gt;\r\n\r\n&lt;/body&gt;\r\n&lt;/html&gt;</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n\r\n<hr />\r\n\r\n<h2>Classing Inline Elements</h2>\r\nThe HTML class attribute also makes it possible to define equal styles for "equal" &lt;span&gt; elements:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate htmlHigh">&lt;!DOCTYPE html&gt;\r\n&lt;html&gt;\r\n&lt;head&gt;\r\n&lt;style&gt;\r\nspan.note {font-size:120%;color:red;}\r\n&lt;/style&gt;\r\n&lt;/head&gt;\r\n&lt;body&gt;\r\n\r\n&lt;h1&gt;My &lt;span class="note"&gt;Important&lt;/span&gt; Heading&lt;/h1&gt;\r\n&lt;p&gt;This is some &lt;span class="note"&gt;important&lt;/span&gt; text.&lt;/p&gt;\r\n\r\n&lt;/body&gt;\r\n&lt;/html&gt;</div>\r\n</div>', 'HTML Classes', '', 'inherit', 'closed', 'closed', '', '105-revision-v1', '', '', '2016-05-21 13:35:15', '2016-05-21 13:35:15', '', 105, 'http://localhost/invatacel/2016/05/21/105-revision-v1/', 0, 'revision', '', 0),
(117, 1, '2016-05-21 13:35:44', '2016-05-21 13:35:44', '<h2>The HTML &lt;script&gt; Tag</h2>\r\nThe &lt;script&gt; tag is used to define a script (JavaScript).\r\n\r\nThe &lt;script&gt; element either contains scripting statements or it points to an external script file through the src attribute.\r\n\r\nCommon uses for JavaScript are image manipulation, form validation, and dynamic changes of content.\r\n\r\nThe script below writes Hello JavaScript! into an HTML element with id="demo":\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate htmlHigh">&lt;script&gt;\r\ndocument.getElementById("demo").innerHTML = "Hello JavaScript!";\r\n&lt;/script&gt;</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n<table class="lamp">\r\n<tbody>\r\n<tr>\r\n<th><img src="http://www.w3schools.com/images/lamp.jpg" alt="Note" /></th>\r\n<td>To learn all about JavaScript, visit our <a href="http://www.w3schools.com/js/default.asp">JavaScript Tutorial</a>!</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n\r\n<hr />\r\n\r\n<h2>The HTML &lt;noscript&gt; Tag</h2>\r\nThe &lt;noscript&gt; tag is used to provide an alternate content for users that have disabled scripts in their browser or have a browser that doesn''t support client-side scripting.\r\n\r\nThe &lt;noscript&gt; element can contain all the elements that you can find inside the &lt;body&gt; element of a normal HTML page.\r\n\r\nThe content inside the &lt;noscript&gt; element will only be displayed if scripts are not supported, or are disabled in the user''s browser:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate htmlHigh">&lt;script&gt;\r\ndocument.getElementById("demo").innerHTML = "Hello JavaScript!";\r\n&lt;/script&gt;\r\n\r\n&lt;noscript&gt;Sorry, your browser does not support JavaScript!&lt;/noscript&gt;</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n\r\n<hr />\r\n\r\n<h2>A Taste of JavaScript (From Our JavaScript Tutorial)</h2>\r\nHere are some examples of what JavaScript can do:\r\n<div class="w3-example">\r\n<h3>JavaScript can change HTML content:</h3>\r\n<div class="w3-code notranslate jsHigh">document.getElementById("demo").innerHTML = "Hello JavaScript!";</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n<div class="w3-example">\r\n<h3>JavaScript can change HTML styles:</h3>\r\n<div class="w3-code notranslate jsHigh">document.getElementById("demo").style.fontSize = "25px";</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n<div class="w3-example">\r\n<h3>JavaScript can change HTML attributes:</h3>\r\n<div class="w3-code notranslate jsHigh">document.getElementById("image").src = "picture.gif";</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n\r\n<hr />\r\n\r\n<h2>HTML Script Tags</h2>\r\n<table class="w3-table-all notranslate">\r\n<tbody>\r\n<tr>\r\n<th>Tag</th>\r\n<th>Description</th>\r\n</tr>\r\n<tr>\r\n<td><a href="http://www.w3schools.com/tags/tag_script.asp">&lt;script&gt;</a></td>\r\n<td>Defines a client-side script</td>\r\n</tr>\r\n<tr>\r\n<td><a href="http://www.w3schools.com/tags/tag_noscript.asp">&lt;noscript&gt;</a></td>\r\n<td>Defines an alternate content for users that do not support client-side scripts</td>\r\n</tr>\r\n</tbody>\r\n</table>', 'HTML Javascript', '', 'inherit', 'closed', 'closed', '', '106-revision-v1', '', '', '2016-05-21 13:35:44', '2016-05-21 13:35:44', '', 106, 'http://localhost/invatacel/2016/05/21/106-revision-v1/', 0, 'revision', '', 0),
(118, 1, '2016-05-21 14:24:55', '2016-05-21 14:24:55', '<p class="intro">AngularJS binds data to HTML using <strong>Expressions</strong>.</p>\r\n\r\n\r\n<hr />\r\n\r\n<h2>AngularJS Expressions</h2>\r\nAngularJS expressions can be written inside double braces: <code>{{ <em>expression</em> }}</code>.\r\n\r\nAngularJS expressions can also be written inside a directive: <code>ng-bind="<em>expression</em>"</code>.\r\n\r\nAngularJS will resolve the expression, and return the result exactly where the expression is written.\r\n\r\n<strong>AngularJS expressions</strong> are much like <strong>JavaScript expressions:</strong> They can contain literals, operators, and variables.\r\n\r\nExample {{ 5 + 5 }} or {{ firstName + " " + lastName }}\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate htmlHigh">&lt;!DOCTYPE html&gt;\r\n&lt;html&gt;\r\n&lt;script src="http://ajax.googleapis.com/ajax/libs/angularjs/1.4.8/angular.min.js"&gt;&lt;/script&gt;\r\n&lt;body&gt;\r\n\r\n&lt;div ng-app=""&gt;\r\n&lt;p&gt;My first expression: {{ 5 + 5 }}&lt;/p&gt;\r\n&lt;/div&gt;\r\n\r\n&lt;/body&gt;\r\n&lt;/html&gt;</div>\r\n</div>\r\n<div class="w3-example"></div>\r\nIf you remove the <code>ng-app</code> directive, HTML will display the expression as it is, without solving it:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate htmlHigh">&lt;!DOCTYPE html&gt;\r\n&lt;html&gt;\r\n&lt;script src="http://ajax.googleapis.com/ajax/libs/angularjs/1.4.8/angular.min.js"&gt;&lt;/script&gt;\r\n&lt;body&gt;\r\n\r\n&lt;div&gt;\r\n&lt;p&gt;My first expression: {{ 5 + 5 }}&lt;/p&gt;\r\n&lt;/div&gt;\r\n\r\n&lt;/body&gt;\r\n&lt;/html&gt;</div>\r\n</div>\r\n<div class="w3-example"></div>\r\nYou can write expressions wherever you like, AngularJS will simply resolve the expression and return the result.\r\n\r\nExample: Let AngularJS change the value of CSS properties.\r\n\r\nChange the color of the input box below, by changing its value:\r\n<div class="ng-scope"><input class="ng-pristine ng-untouched ng-valid" type="text" value="lightblue" /></div>\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate htmlHigh">&lt;div ng-app="" ng-init="myCol=''lightblue''"&gt;\r\n\r\n&lt;input style="background-color:{{myCol}}" ng-model="myCol" value="{{myCol}}"&gt;\r\n\r\n&lt;/div&gt;</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n\r\n<hr />\r\n\r\n<h2>AngularJS Numbers</h2>\r\nAngularJS numbers are like JavaScript numbers:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate htmlHigh">&lt;div ng-app="" ng-init="quantity=1;cost=5"&gt;\r\n\r\n&lt;p&gt;Total in dollar: {{ quantity * cost }}&lt;/p&gt;\r\n\r\n&lt;/div&gt;</div>\r\n</div>\r\n<div class="w3-example"></div>\r\nSame example using <code>ng-bind</code>:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate htmlHigh">&lt;div ng-app="" ng-init="quantity=1;cost=5"&gt;\r\n\r\n&lt;p&gt;Total in dollar: &lt;span ng-bind="quantity * cost"&gt;&lt;/span&gt;&lt;/p&gt;\r\n\r\n&lt;/div&gt;</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n<table class="lamp">\r\n<tbody>\r\n<tr>\r\n<th><img src="http://www.w3schools.com/images/lamp.jpg" alt="Note" /></th>\r\n<td>Using <code>ng-init</code> is not very common. You will learn a better way to initialize data in the chapter about controllers.</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n\r\n<hr />\r\n\r\n<h2>AngularJS Strings</h2>\r\nAngularJS strings are like JavaScript strings:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate htmlHigh">&lt;div ng-app="" ng-init="firstName=''John'';lastName=''Doe''"&gt;\r\n\r\n&lt;p&gt;The name is {{ firstName + " " + lastName }}&lt;/p&gt;\r\n\r\n&lt;/div&gt;</div>\r\n</div>\r\n<div class="w3-example"></div>\r\nSame example using <code>ng-bind</code>:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate htmlHigh">&lt;div ng-app="" ng-init="firstName=''John'';lastName=''Doe''"&gt;\r\n\r\n&lt;p&gt;The name is &lt;span ng-bind="firstName + '' '' + lastName"&gt;&lt;/span&gt;&lt;/p&gt;\r\n\r\n&lt;/div&gt;</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n\r\n<hr />\r\n\r\n<h2>AngularJS Objects</h2>\r\nAngularJS objects are like JavaScript objects:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate htmlHigh">&lt;div ng-app="" ng-init="person={firstName:''John'',lastName:''Doe''}"&gt;\r\n\r\n&lt;p&gt;The name is {{ person.lastName }}&lt;/p&gt;\r\n\r\n&lt;/div&gt;</div>\r\n</div>\r\n<div class="w3-example"></div>\r\nSame example using <code>ng-bind</code>:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate htmlHigh">&lt;div ng-app="" ng-init="person={firstName:''John'',lastName:''Doe''}"&gt;\r\n\r\n&lt;p&gt;The name is &lt;span ng-bind="person.lastName"&gt;&lt;/span&gt;&lt;/p&gt;\r\n\r\n&lt;/div&gt;</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n\r\n<hr />\r\n\r\n<h2>AngularJS Arrays</h2>\r\nAngularJS arrays are like JavaScript arrays:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate htmlHigh">&lt;div ng-app="" ng-init="points=[1,15,19,2,40]"&gt;\r\n\r\n&lt;p&gt;The third result is {{ points[2] }}&lt;/p&gt;\r\n\r\n&lt;/div&gt;</div>\r\n</div>\r\n<div class="w3-example"></div>\r\nSame example using <code>ng-bind</code>:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate htmlHigh">&lt;div ng-app="" ng-init="points=[1,15,19,2,40]"&gt;\r\n\r\n&lt;p&gt;The third result is &lt;span ng-bind="points[2]"&gt;&lt;/span&gt;&lt;/p&gt;\r\n\r\n&lt;/div&gt;</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n\r\n<hr />\r\n\r\n<h2>AngularJS Expressions vs. JavaScript Expressions</h2>\r\nLike JavaScript expressions, AngularJS expressions can contain literals, operators, and variables.\r\n\r\nUnlike JavaScript expressions, AngularJS expressions can be written inside HTML.\r\n\r\nAngularJS expressions do not support conditionals, loops, and exceptions, while JavaScript expressions do.\r\n\r\nAngularJS expressions support filters, while JavaScript expressions do not.', 'Angular Expressions', '', 'publish', 'closed', 'closed', '', 'angular-expressions', '', '', '2016-05-21 14:28:11', '2016-05-21 14:28:11', '', 0, 'http://localhost/invatacel/lessons/angular-expressions/', 0, 'lp_lesson', '', 0),
(119, 1, '2016-05-21 14:25:07', '2016-05-21 14:25:07', '<p class="intro">An AngularJS module defines an application.</p>\r\n<p class="intro">The module is a container for the different parts of an application.</p>\r\n<p class="intro">The module is a container for the application controllers.</p>\r\n<p class="intro">Controllers always belong to a module.</p>\r\n\r\n\r\n<hr />\r\n\r\n<h2>Creating a Module</h2>\r\nA module is created by using the AngularJS function <code>angular.module</code>\r\n<div class="w3-example">\r\n<div class="w3-code notranslate htmlHigh">&lt;div ng-app="myApp"&gt;...&lt;/div&gt;\r\n\r\n&lt;script&gt;\r\n\r\nvar app = angular.module("myApp", []);\r\n\r\n&lt;/script&gt;</div>\r\n</div>\r\nThe "myApp" parameter refers to an HTML element in which the application will run.\r\n\r\nNow you can add controllers, directives, filters, and more, to your AngularJS application.\r\n\r\n<hr />\r\n\r\n<h2>Adding a Controller</h2>\r\nAdd a controller to your application, and refer to the controller with the <code>ng-controller</code> directive:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate htmlHigh">&lt;div ng-app="<b>myApp</b>" ng-controller=<strong>"myCtrl"</strong>&gt;\r\n{{ firstName + " " + lastName }}\r\n&lt;/div&gt;\r\n\r\n&lt;script&gt;\r\n\r\nvar app = angular.module(<strong>"myApp"</strong>, []);\r\n\r\napp.controller(<strong>"myCtrl"</strong>, function($scope) {\r\n$scope.firstName = "John";\r\n$scope.lastName = "Doe";\r\n});\r\n\r\n&lt;/script&gt;</div>\r\n</div>\r\n<div class="w3-example"></div>\r\nYou will learn more about controllers later in this tutorial.\r\n\r\n<hr />\r\n\r\n<h2>Adding a Directive</h2>\r\nAngularJS has a set of built-in directives which you can use to add functionality to your application.\r\n\r\nFor a full reference, visit our <a href="http://www.w3schools.com/angular/angular_ref_directives.asp"> AngularJS directive reference</a>.\r\n\r\nIn addition you can use the module to add your own directives to your applications:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate htmlHigh">&lt;div ng-app="myApp" w3-test-directive&gt;&lt;/div&gt;\r\n\r\n&lt;script&gt;\r\nvar app = angular.module("myApp", []);\r\n\r\napp.directive("w3TestDirective", function() {\r\nreturn {\r\ntemplate : "I was made in a directive constructor!"\r\n};\r\n});\r\n&lt;/script&gt;</div>\r\n</div>\r\n<div class="w3-example"></div>\r\nYou will learn more about directives later in this tutorial.\r\n\r\n<hr />\r\n\r\n<h2>Modules and Controllers in Files</h2>\r\nIt is common in AngularJS applications to put the module and the controllers in JavaScript files.\r\n\r\nIn this example, "myApp.js" contains an application module definition, while "myCtrl.js" contains the controller:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate htmlHigh">&lt;!DOCTYPE html&gt;\r\n&lt;html&gt;\r\n&lt;script src="http://ajax.googleapis.com/ajax/libs/angularjs/1.4.8/angular.min.js"&gt;&lt;/script&gt;\r\n&lt;body&gt;\r\n\r\n&lt;div ng-app="<strong>myApp</strong>" ng-controller="<strong>myCtrl</strong>"&gt;\r\n{{ firstName + " " + lastName }}\r\n&lt;/div&gt;\r\n\r\n&lt;script src="<strong>myApp.js</strong>"&gt;&lt;/script&gt;\r\n&lt;script src="<strong>myCtrl.js</strong>"&gt;&lt;/script&gt;\r\n\r\n&lt;/body&gt;\r\n&lt;/html&gt;</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n<div class="w3-example">\r\n<h3>myApp.js</h3>\r\n<div class="w3-code notranslate">var app = angular.module(<strong>"myApp"</strong>, []);</div>\r\n</div>\r\n<table class="lamp">\r\n<tbody>\r\n<tr>\r\n<th><img src="http://www.w3schools.com/images/lamp.jpg" alt="Note" /></th>\r\n<td>The [] parameter in the module definition can be used to define dependent modules.</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n<table class="lamp">\r\n<tbody>\r\n<tr>\r\n<th><img src="http://www.w3schools.com/images/lamp.jpg" alt="Note" /></th>\r\n<td>Without the [] parameter, you are not <em>creating</em> a new module, but <em>retrieving</em> an existing one.</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n<div class="w3-example">\r\n<h3>myCtrl.js</h3>\r\n<div class="w3-code notranslate">app.controller(<strong>"myCtrl"</strong>, function($scope) {\r\n$scope.firstName = "John";\r\n$scope.lastName= "Doe";\r\n});</div>\r\n</div>\r\n\r\n<hr />\r\n\r\n<h2>Functions can Pollute the Global Namespace</h2>\r\nGlobal functions should be avoided in JavaScript. They can easily be overwritten or destroyed by other scripts.\r\n\r\nAngularJS modules reduces this problem, by keeping all functions local to the module.\r\n\r\n<hr />\r\n\r\n<h2>When to Load the Library</h2>\r\nWhile it is common in HTML applications to place scripts at the end of the <code>&lt;body&gt;</code> element, it is recommended that you load the AngularJS library either in the <code>&lt;head&gt;</code> or at the start of the <code>&lt;body&gt;</code>.\r\n\r\nThis is because calls to <code>angular.module</code> can only be compiled after the library has been loaded.\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate htmlHigh">&lt;!DOCTYPE html&gt;\r\n&lt;html&gt;\r\n&lt;body&gt;\r\n&lt;script src="http://ajax.googleapis.com/ajax/libs/angularjs/1.4.8/angular.min.js"&gt;&lt;/script&gt;\r\n\r\n&lt;div ng-app="myApp" ng-controller="myCtrl"&gt;\r\n{{ firstName + " " + lastName }}\r\n&lt;/div&gt;\r\n\r\n&lt;script&gt;\r\nvar app = angular.module("myApp", []);\r\napp.controller("myCtrl", function($scope) {\r\n$scope.firstName = "John";\r\n$scope.lastName = "Doe";\r\n});\r\n&lt;/script&gt;\r\n\r\n&lt;/body&gt;\r\n&lt;/html&gt;</div>\r\n</div>', 'Angular Modules', '', 'publish', 'closed', 'closed', '', 'angular-modules', '', '', '2016-05-21 14:28:53', '2016-05-21 14:28:53', '', 0, 'http://localhost/invatacel/lessons/angular-modules/', 0, 'lp_lesson', '', 0),
(120, 1, '2016-05-21 14:25:19', '2016-05-21 14:25:19', '<p class="intro">AngularJS lets you extend HTML with new attributes called <strong> Directives</strong>.</p>\r\n<p class="intro">AngularJS has a set of built-in directives which offers functionality to your applications.</p>\r\n<p class="intro">AngularJS also lets you define your own directives.</p>\r\n\r\n\r\n<hr />\r\n\r\n<h2>AngularJS Directives</h2>\r\nAngularJS directives are extended HTML attributes with the prefix <code>ng-</code>.\r\n\r\nThe <code>ng-app</code> directive initializes an AngularJS application.\r\n\r\nThe <code>ng-init</code> directive initializes application data.\r\n\r\nThe <code>ng-model</code> directive binds the value of HTML controls (input, select, textarea) to application data.\r\n\r\nRead about all AngularJS directives in our <a href="http://www.w3schools.com/angular/angular_ref_directives.asp">AngularJS directive reference</a>.\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate htmlHigh">&lt;div ng-app="" ng-init="firstName=''John''"&gt;\r\n\r\n&lt;p&gt;Name: &lt;input type="text" ng-model="firstName"&gt;&lt;/p&gt;\r\n&lt;p&gt;You wrote: {{ firstName }}&lt;/p&gt;\r\n\r\n&lt;/div&gt;</div>\r\n</div>\r\n<div class="w3-example"></div>\r\nThe <code>ng-app</code> directive also tells AngularJS that the &lt;div&gt; element is the "owner" of the AngularJS application.\r\n\r\n<hr />\r\n\r\n<h2>Data Binding</h2>\r\nThe <code>{{ firstName }}</code> expression, in the example above, is an AngularJS data binding expression.\r\n\r\nData binding in AngularJS binds AngularJS expressions with AngularJS data.\r\n\r\n<code>{{ firstName }}</code> is bound with <code>ng-model="firstName"</code>.\r\n\r\nIn the next example two text fields are bound together with two ng-model directives:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate htmlHigh">&lt;div ng-app="" ng-init="quantity=1;price=5"&gt;\r\n\r\nQuantity: &lt;input type="number" ng-model="quantity"&gt;\r\nCosts:    &lt;input type="number" ng-model="price"&gt;\r\n\r\nTotal in dollar: {{ quantity * price }}\r\n\r\n&lt;/div&gt;</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n<table class="lamp">\r\n<tbody>\r\n<tr>\r\n<th><img src="http://www.w3schools.com/images/lamp.jpg" alt="Note" /></th>\r\n<td>Using <code>ng-init</code> is not very common. You will learn how to initialize data in the chapter about controllers.</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n\r\n<hr />\r\n\r\n<h2>Repeating HTML Elements</h2>\r\nThe <code>ng-repeat</code> directive repeats an HTML element:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate htmlHigh">&lt;div ng-app="" ng-init="names=[''Jani'',''Hege'',''Kai'']"&gt;\r\n&lt;ul&gt;\r\n&lt;li ng-repeat="x in names"&gt;\r\n{{ x }}\r\n&lt;/li&gt;\r\n&lt;/ul&gt;\r\n&lt;/div&gt;</div>\r\n</div>\r\n<div class="w3-example"></div>\r\nThe <code>ng-repeat</code> directive actually <strong>clones HTML elements</strong> once for each item in a collection.\r\n\r\nThe <code>ng-repeat</code> directive used on an array of objects:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate htmlHigh">&lt;div ng-app="" ng-init="names=[\r\n{name:''Jani'',country:''Norway''},\r\n{name:''Hege'',country:''Sweden''},\r\n{name:''Kai'',country:''Denmark''}]"&gt;\r\n\r\n&lt;ul&gt;\r\n&lt;li ng-repeat="x in names"&gt;\r\n{{ x.name + '', '' + x.country }}\r\n&lt;/li&gt;\r\n&lt;/ul&gt;\r\n\r\n&lt;/div&gt;</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n<table class="lamp">\r\n<tbody>\r\n<tr>\r\n<th><img src="http://www.w3schools.com/images/lamp.jpg" alt="Note" /></th>\r\n<td>AngularJS is perfect for database CRUD (Create Read Update Delete) applications.\r\nJust imagine if these objects were records from a database.</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n\r\n<hr />\r\n\r\n<h2>The ng-app Directive</h2>\r\nThe <code>ng-app</code> directive defines the <strong>root element</strong> of an AngularJS application.\r\n\r\nThe <code>ng-app</code> directive will <strong>auto-bootstrap</strong> (automatically initialize) the application when a web page is loaded.\r\n\r\n<hr />\r\n\r\n<h2>The ng-init Directive</h2>\r\nThe <code>ng-init</code> directive defines <strong>initial values</strong> for an AngularJS application.\r\n\r\nNormally, you will not use ng-init. You will use a controller or module instead.\r\n\r\nYou will learn more about controllers and modules later.\r\n\r\n<hr />\r\n\r\n<h2>The ng-model Directive</h2>\r\nThe <code>ng-model</code> directive binds the value of HTML controls (input, select, textarea) to application data.\r\n\r\nThe <code>ng-model</code> directive can also:\r\n<ul>\r\n 	<li>Provide type validation for application data (number, email, required).</li>\r\n 	<li>Provide status for application data (invalid, dirty, touched, error).</li>\r\n 	<li>Provide CSS classes for HTML elements.</li>\r\n 	<li>Bind HTML elements to HTML forms.</li>\r\n</ul>\r\nRead more about the <code>ng-model</code> directive in the next chapter.\r\n\r\n<hr />\r\n\r\n<h2>Create New Directives</h2>\r\nIn addition to all the built-in AngularJS directives, you can create your own directives.\r\n\r\nNew directives are created by using the <code>.directive</code> function.\r\n\r\nTo invoke the new directive, make an HTML element with the same tag name as the new directive.\r\n\r\nWhen naming a directive, you must use a camel case name, <code> w3TestDirective</code>, but when invoking it, you must use <code>-</code> separated name, <code>w3-test-directive</code>:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate">\r\n<div class="htmlHigh">&lt;body ng-app="myApp"&gt;\r\n\r\n&lt;w3-test-directive&gt;&lt;/w3-test-directive&gt;\r\n\r\n&lt;script&gt;\r\nvar app = angular.module("myApp", []);\r\napp.directive("w3TestDirective", function() {\r\nreturn {\r\ntemplate : "&lt;h1&gt;Made by a directive!&lt;/h1&gt;"\r\n};\r\n});\r\n&lt;/script&gt;\r\n\r\n&lt;/body&gt;</div>\r\n</div>\r\n</div>\r\n<div class="w3-example"></div>\r\nYou can invoke a directive by using:\r\n<ul>\r\n 	<li>Element name</li>\r\n 	<li>Attribute</li>\r\n 	<li>Class</li>\r\n 	<li>Comment</li>\r\n</ul>\r\nThe examples below will all produce the same result:\r\n<div class="w3-example">\r\n\r\nElement name\r\n<div class="w3-code notranslate">\r\n<div class="htmlHigh">&lt;w3-test-directive&gt;&lt;/w3-test-directive&gt;</div>\r\n</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n<div class="w3-example">\r\n\r\nAttribute\r\n<div class="w3-code notranslate">\r\n<div class="htmlHigh">&lt;div w3-test-directive&gt;&lt;/div&gt;</div>\r\n</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n<div class="w3-example">\r\n\r\nClass\r\n<div class="w3-code notranslate">\r\n<div class="htmlHigh">&lt;div class="w3-test-directive"&gt;&lt;/div&gt;</div>\r\n</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n<div class="w3-example">\r\n\r\nComment\r\n<div class="w3-code notranslate">\r\n<div class="htmlHigh">&lt;!-- directive: w3-test-directive --&gt;</div>\r\n</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n\r\n<hr />\r\n\r\n<h2>Restrictions</h2>\r\nYou can restrict your directives to only be invoked by some of the methods.\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\nBy adding a <code>restrict</code> property with the value <code>"A"</code>, the directive can only be invoked by attributes:\r\n<div class="w3-code notranslate">\r\n<div class="jsHigh">var app = angular.module("myApp", []);\r\napp.directive("w3TestDirective", function() {\r\nreturn {\r\nrestrict : "A",\r\ntemplate : "&lt;h1&gt;Made by a directive!&lt;/h1&gt;"\r\n};\r\n});</div>\r\n</div>\r\n</div>\r\n<div class="w3-example"></div>\r\nThe legal restrict values are:\r\n<ul>\r\n 	<li><code>E</code> for Element name</li>\r\n 	<li><code>A</code> for Attribute</li>\r\n 	<li><code>C</code> for Class</li>\r\n 	<li><code>M</code> for Comment</li>\r\n</ul>\r\nBy default the value is <code>EA</code>, meaning that both Element names and attribute names can invoke the directive.', 'Angular Directives', '', 'publish', 'closed', 'closed', '', 'angular-directives', '', '', '2016-05-21 14:29:45', '2016-05-21 14:29:45', '', 0, 'http://localhost/invatacel/lessons/angular-directives/', 0, 'lp_lesson', '', 0),
(121, 1, '2016-05-21 14:25:28', '2016-05-21 14:25:28', '<p class="intro">The ng-model directive binds the value of HTML controls (input, select, textarea) to application data.</p>\r\n\r\n\r\n<hr />\r\n\r\n<h2>The ng-model Directive</h2>\r\nWith the <code>ng-model</code> directive you can bind the value of an input field to a variable created in AngularJS.\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate htmlHigh">&lt;div ng-app="myApp" ng-controller="myCtrl"&gt;\r\nName: &lt;input ng-model="name"&gt;\r\n&lt;/div&gt;\r\n\r\n&lt;script&gt;\r\nvar app = angular.module(''myApp'', []);\r\napp.controller(''myCtrl'', function($scope) {\r\n$scope.name = "John Doe";\r\n});\r\n&lt;/script&gt;</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n\r\n<hr />\r\n\r\n<h2>Two-Way Binding</h2>\r\nThe binding goes both ways. If the user changes the value inside the input field, the AngularJS property will also change its value:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate htmlHigh">&lt;div ng-app="myApp" ng-controller="myCtrl"&gt;\r\nName: &lt;input ng-model="name"&gt;\r\n&lt;h1&gt;You entered: {{name}}&lt;/h1&gt;\r\n&lt;/div&gt;</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n\r\n<hr />\r\n\r\n<h2>Validate User Input</h2>\r\nThe <code>ng-model</code> directive can provide type validation for application data (number, e-mail, required):\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate htmlHigh">&lt;form ng-app="" name="myForm"&gt;\r\nEmail:\r\n&lt;input type="email" name="myAddress" ng-model="text"&gt;\r\n&lt;span ng-show="myForm.myAddress.$error.email"&gt;Not a valid e-mail address&lt;/span&gt;\r\n&lt;/form&gt;</div>\r\n</div>\r\n<div class="w3-example"></div>\r\nIn the example above, the span will be displayed only if the expression in the <code>ng-show</code> attribute returns <code>true</code>.\r\n<table class="lamp">\r\n<tbody>\r\n<tr>\r\n<th><img src="http://www.w3schools.com/images/lamp.jpg" alt="Note" /></th>\r\n<td>If the property in the <code>ng-model</code> attribute does not exist, AngularJS will create one for you.</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n\r\n<hr />\r\n\r\n<h2>Application Status</h2>\r\nThe <code>ng-model</code> directive can provide status for application data (invalid, dirty, touched, error):\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate htmlHigh">&lt;form ng-app="" name="myForm" ng-init="myText = ''post@myweb.com''"&gt;\r\nEmail:\r\n&lt;input type="email" name="myAddress" ng-model="myText" required&gt;\r\n&lt;h1&gt;Status&lt;/h1&gt;\r\n{{myForm.myAddress.$valid}}\r\n{{myForm.myAddress.$dirty}}\r\n{{myForm.myAddress.$touched}}\r\n&lt;/form&gt;</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n\r\n<hr />\r\n\r\n<h2>CSS Classes</h2>\r\nThe <code>ng-model</code> directive provides CSS classes for HTML elements, depending on their status:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate">\r\n<div class="htmlHigh">&lt;style&gt;</div>\r\n<div class="cssHigh">input.ng-invalid {\r\nbackground-color: lightblue;\r\n}</div>\r\n<div class="htmlHigh">&lt;/style&gt;\r\n&lt;body&gt;\r\n\r\n&lt;form ng-app="" name="myForm"&gt;\r\nEnter your name:\r\n&lt;input name="myAddress" ng-model="text" required&gt;\r\n&lt;/form&gt;</div>\r\n</div>\r\n</div>\r\n<div class="w3-example"></div>\r\nThe <code>ng-model</code> directive adds/removes the following classes, according to the status of the form field:\r\n<ul>\r\n 	<li>ng-empty</li>\r\n 	<li>ng-not-empty</li>\r\n 	<li>ng-touched</li>\r\n 	<li>ng-untouched</li>\r\n 	<li>ng-valid</li>\r\n 	<li>ng-invalid</li>\r\n 	<li>ng-dirty</li>\r\n 	<li>ng-pending</li>\r\n 	<li>ng-pristine</li>\r\n</ul>', 'Angular Model', '', 'publish', 'closed', 'closed', '', 'angular-model', '', '', '2016-05-21 14:30:23', '2016-05-21 14:30:23', '', 0, 'http://localhost/invatacel/lessons/angular-model/', 0, 'lp_lesson', '', 0),
(122, 1, '2016-05-21 14:25:49', '2016-05-21 14:25:49', 'Data binding in AngularJS is the synchronization between the model and the view.\r\n\r\n<hr />\r\n\r\n<h2>Data Model</h2>\r\nAngularJS applications usually have a data model. The data model is a collection of data available for the application.\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate jsHigh">var app = angular.module(''myApp'', []);\r\napp.controller(''myCtrl'', function($scope) {\r\n$scope.firstname = "John";\r\n$scope.lastname = "Doe";\r\n});</div>\r\n</div>\r\n\r\n<hr />\r\n\r\n<h2>HTML View</h2>\r\nThe HTML container where the AngularJS application is displayed, is called the view.\r\n\r\nThe view has access to the model, and there are several ways of displaying model data in the view.\r\n\r\nYou can use the <code>ng-bind</code> directive, which will bind the innerHTML of the element to the specified model property:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate htmlHigh">&lt;p ng-bind="firstname"&gt;&lt;/p&gt;</div>\r\n</div>\r\n<div class="w3-example"></div>\r\nYou can also use double braces <code>{{ }}</code> to display content from the model:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate htmlHigh">&lt;p&gt;First name: {{firstname}}&lt;/p&gt;</div>\r\n</div>\r\n<div class="w3-example"></div>\r\nOr you can use the <code>ng-model</code> directive on HTML controls to bind the model to the view.\r\n\r\n<hr />\r\n\r\n<h2>The <code>ng-model</code> Directive</h2>\r\nUse the <code>ng-model</code> directive to bind data from the model to the view on HTML controls (input, select, textarea)\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate htmlHigh">&lt;input ng-model="firstname"&gt;</div>\r\n</div>\r\n<div class="w3-example"></div>\r\nThe <code>ng-model</code> directive provides a two-way binding between the model and the view.\r\n\r\n<hr />\r\n\r\n<h2>Two-way Binding</h2>\r\nData binding in AngularJS is the synchronization between the model and the view.\r\n\r\nWhen data in the <em>model</em> changes, the <em>view</em> reflects the change, and when data in the <em>view</em> changes, the <em>model</em> is updated as well. This happens immediately and automatically, which makes sure that the model and the view is updated at all times.\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate">\r\n<div class="htmlHigh">&lt;div ng-app="myApp" ng-controller="myCtrl"&gt;\r\nName: &lt;input ng-model="firstname"&gt;\r\n&lt;h1&gt;{{firstname}}&lt;/h1&gt;\r\n&lt;/div&gt;\r\n\r\n&lt;script&gt;</div>\r\n<div class="jsHigh">var app = angular.module(''myApp'', []);\r\napp.controller(''myCtrl'', function($scope) {\r\n$scope.firstname = "John";\r\n$scope.lastname = "Doe";\r\n});</div>\r\n<div class="htmlHigh">&lt;/script&gt;</div>\r\n</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n\r\n<hr />\r\n\r\n<h2>AngularJS Controller</h2>\r\nApplications in AngularJS are controlled by controllers. Read about controllers in the <a href="http://www.w3schools.com/angular/angular_controllers.asp">AngularJS Controllers</a> chapter.\r\n\r\nBecause of the immediate synchronization of the model and the view, the controller can be completely separated from the view, and simply concentrate on the model data. Thanks to the data binding in AngularJS, the view will reflect any changes made in the controller.\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate">\r\n<div class="htmlHigh">&lt;div ng-app="myApp" ng-controller="myCtrl"&gt;\r\n&lt;h1 ng-click="changeName()"&gt;{{firstname}}&lt;/h1&gt;\r\n&lt;/div&gt;\r\n\r\n&lt;script&gt;</div>\r\n<div class="jsHigh">var app = angular.module(''myApp'', []);\r\napp.controller(''myCtrl'', function($scope) {\r\n$scope.changeName = function() {\r\n$scope.firstname = "Nelly";\r\n}\r\n});</div>\r\n<div class="htmlHigh">&lt;/script&gt;</div>\r\n</div>\r\n</div>', 'Angular Data Binding', '', 'publish', 'closed', 'closed', '', 'angular-data-binding', '', '', '2016-05-21 14:30:50', '2016-05-21 14:30:50', '', 0, 'http://localhost/invatacel/lessons/angular-data-binding/', 0, 'lp_lesson', '', 0),
(123, 1, '2016-05-21 14:26:00', '2016-05-21 14:26:00', '<p class="intro">AngularJS controllers <strong>control the data</strong> of AngularJS applications.</p>\r\n<p class="intro">AngularJS controllers are regular <strong>JavaScript Objects</strong>.</p>\r\n\r\n\r\n<hr />\r\n\r\n<h2>AngularJS Controllers</h2>\r\nAngularJS applications are controlled by controllers.\r\n\r\nThe <strong>ng-controller</strong> directive defines the application controller.\r\n\r\nA controller is a <strong>JavaScript Object</strong>, created by a standard JavaScript <strong>object constructor</strong>.\r\n<div class="w3-example">\r\n<h3>AngularJS Example</h3>\r\n<div class="w3-code notranslate htmlHigh">&lt;div ng-app="myApp" ng-controller="myCtrl"&gt;\r\n\r\nFirst Name: &lt;input type="text" ng-model="firstName"&gt;&lt;br&gt;\r\nLast Name: &lt;input type="text" ng-model="lastName"&gt;&lt;br&gt;\r\n&lt;br&gt;\r\nFull Name: {{firstName + " " + lastName}}\r\n\r\n&lt;/div&gt;\r\n\r\n&lt;script&gt;\r\nvar app = angular.module(''myApp'', []);\r\napp.controller(''myCtrl'', function($scope) {\r\n$scope.firstName = "John";\r\n$scope.lastName = "Doe";\r\n});\r\n&lt;/script&gt;</div>\r\n</div>\r\n<div class="w3-example"></div>\r\nApplication explained:\r\n\r\nThe AngularJS application is defined by  <strong>ng-app="myApp"</strong>. The application runs inside the &lt;div&gt;.\r\n\r\nThe <strong>ng-controller="myCtrl"</strong> attribute is an AngularJS directive. It defines a controller.\r\n\r\nThe <strong>myCtrl</strong> function is a JavaScript function.\r\n\r\nAngularJS will invoke the controller with a <strong>$scope</strong> object.\r\n\r\nIn AngularJS, $scope is the application object (the owner of application variables and functions).\r\n\r\nThe controller creates two properties (variables) in the scope (<strong>firstName</strong> and <strong>lastName</strong>).\r\n\r\nThe <strong>ng-model</strong> directives bind the input fields to the controller properties (firstName and lastName).\r\n\r\n<hr />\r\n\r\n<h2>Controller Methods</h2>\r\nThe example above demonstrated a controller object with two properties: lastName and firstName.\r\n\r\nA controller can also have methods (variables as functions):\r\n<div class="w3-example">\r\n<h3>AngularJS Example</h3>\r\n<div class="w3-code notranslate htmlHigh">&lt;div ng-app="myApp" ng-controller="personCtrl"&gt;\r\n\r\nFirst Name: &lt;input type="text" ng-model="firstName"&gt;&lt;br&gt;\r\nLast Name: &lt;input type="text" ng-model="lastName"&gt;&lt;br&gt;\r\n&lt;br&gt;\r\nFull Name: {{fullName()}}\r\n\r\n&lt;/div&gt;\r\n\r\n&lt;script&gt;\r\nvar app = angular.module(''myApp'', []);\r\napp.controller(''personCtrl'', function($scope) {\r\n$scope.firstName = "John";\r\n$scope.lastName = "Doe";\r\n$scope.fullName = function() {\r\nreturn $scope.firstName + " " + $scope.lastName;\r\n};\r\n});\r\n&lt;/script&gt;</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n\r\n<hr />\r\n\r\n<h2>Controllers In External Files</h2>\r\nIn larger applications, it is common to store controllers in external files.\r\n\r\nJust copy the code between the &lt;script&gt; tags into an external file named <a href="http://www.w3schools.com/angular/personController.js" target="_blank">personController.js</a>:\r\n<div class="w3-example">\r\n<h3>AngularJS Example</h3>\r\n<div class="w3-code notranslate htmlHigh">&lt;div ng-app="myApp" ng-controller="personCtrl"&gt;\r\n\r\nFirst Name: &lt;input type="text" ng-model="firstName"&gt;&lt;br&gt;\r\nLast Name: &lt;input type="text" ng-model="lastName"&gt;&lt;br&gt;\r\n&lt;br&gt;\r\nFull Name: {{fullName()}}\r\n\r\n&lt;/div&gt;\r\n\r\n&lt;script src="personController.js"&gt;&lt;/script&gt;</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n\r\n<hr />\r\n\r\n<h2>Another Example</h2>\r\nFor the next example we will create a new controller file:\r\n<div class="w3-example">\r\n<div class="w3-code notranslate htmlHigh">angular.module(''myApp'', []).controller(''namesCtrl'', function($scope) {\r\n$scope.names = [\r\n{name:''Jani'',country:''Norway''},\r\n{name:''Hege'',country:''Sweden''},\r\n{name:''Kai'',country:''Denmark''}\r\n];\r\n});</div>\r\n</div>\r\nSave the file as  <a href="http://www.w3schools.com/angular/namesController.js" target="_blank">namesController.js</a>:\r\n\r\nAnd then use the controller file in an application:\r\n<div class="w3-example">\r\n<h3>AngularJS Example</h3>\r\n<div class="w3-code notranslate htmlHigh">&lt;div ng-app="myApp" ng-controller="namesCtrl"&gt;\r\n\r\n&lt;ul&gt;\r\n&lt;li ng-repeat="x in names"&gt;\r\n{{ x.name + '', '' + x.country }}\r\n&lt;/li&gt;\r\n&lt;/ul&gt;\r\n\r\n&lt;/div&gt;\r\n\r\n&lt;script src="namesController.js"&gt;&lt;/script&gt;</div>\r\n</div>', 'Angular Controllers', '', 'publish', 'closed', 'closed', '', 'angular-controllers', '', '', '2016-05-21 14:31:13', '2016-05-21 14:31:13', '', 0, 'http://localhost/invatacel/lessons/angular-controllers/', 0, 'lp_lesson', '', 0),
(124, 1, '2016-05-21 14:26:09', '2016-05-21 14:26:09', '<p class="intro">The scope is the binding part between the HTML (view) and the JavaScript (controller).</p>\r\n<p class="intro">The scope is an object with the available properties and methods.</p>\r\n<p class="intro">The scope is available for both the view and the controller.</p>\r\n\r\n\r\n<hr />\r\n\r\n<h2>How to Use the Scope?</h2>\r\nWhen you make a controller in AngularJS, you pass the <code>$scope</code> object as an argument:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\nProperties made in the controller, can be referred to in the view:\r\n<div class="w3-code notranslate">\r\n<div class="htmlHigh">&lt;div ng-app="myApp" ng-controller="myCtrl"&gt;\r\n\r\n&lt;h1&gt;{{carname}}&lt;/h1&gt;\r\n\r\n&lt;/div&gt;\r\n\r\n&lt;script&gt;</div>\r\n<div class="jsHigh">var app = angular.module(''myApp'', []);\r\n\r\napp.controller(''myCtrl'', function($scope) {\r\n$scope.carname = "Volvo";\r\n});</div>\r\n<div class="htmlHigh">&lt;/script&gt;</div>\r\n</div>\r\n</div>\r\n<div class="w3-example"></div>\r\nWhen adding properties to the <code>$scope</code> object in the controller, the view (HTML) gets access to these properties.\r\n\r\nIn the view, you do not use the prefix <code>$scope</code>, you just refer to a propertyname, like <code>{{carname}}</code>.\r\n\r\n<hr />\r\n\r\n<h2>Understanding the Scope</h2>\r\nIf we consider an AngularJS application to consist of:\r\n<ul>\r\n 	<li>View, which is the HTML.</li>\r\n 	<li>Model, which is the data available for the current view.</li>\r\n 	<li>Controller, which is the JavaScript function that makes/changes/removes/controls the data.</li>\r\n</ul>\r\nThen the scope is the Model.\r\n\r\nThe scope is a JavaScript object with properties and methods, which are available for both the view and the controller.\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\nIf you make changes in the view, the model and the controller will be updated:\r\n<div class="w3-code notranslate">\r\n<div class="htmlHigh">&lt;div ng-app="myApp" ng-controller="myCtrl"&gt;\r\n\r\n&lt;input ng-model="name"&gt;\r\n\r\n&lt;h1&gt;My name is {{name}}&lt;/h1&gt;\r\n\r\n&lt;/div&gt;\r\n\r\n&lt;script&gt;</div>\r\n<div class="jsHigh">var app = angular.module(''myApp'', []);\r\n\r\napp.controller(''myCtrl'', function($scope) {\r\n$scope.name = "John Doe";\r\n});</div>\r\n<div class="htmlHigh">&lt;/script&gt;</div>\r\n</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n\r\n<hr />\r\n\r\n<h2>Know Your Scope</h2>\r\nIt is important to know which scope you are dealing with, at any time.\r\n\r\nIn the two examples above there is only one scope, so knowing your scope is not an issue, but for larger applications there can be sections in the HTML DOM which can only access certain scopes.\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\nWhen dealing with the <code>ng-repeat</code> directive, each repetition has access to the current repetition object:\r\n<div class="w3-code notranslate">\r\n<div class="htmlHigh">&lt;div ng-app="myApp" ng-controller="myCtrl"&gt;\r\n\r\n&lt;ul&gt;\r\n&lt;li ng-repeat="x in names"&gt;{{x}}&lt;/li&gt;\r\n&lt;/ul&gt;\r\n\r\n&lt;/div&gt;\r\n\r\n&lt;script&gt;</div>\r\n<div class="jsHigh">var app = angular.module(''myApp'', []);\r\n\r\napp.controller(''myCtrl'', function($scope) {\r\n$scope.names = ["Emil", "Tobias", "Linus"];\r\n});</div>\r\n<div class="htmlHigh">&lt;/script&gt;</div>\r\n</div>\r\n</div>\r\n<div class="w3-example"></div>\r\nEach <code>&lt;li&gt;</code> element has access to the current repetition object, in this case a string, which is referred to by using <code>x</code>.\r\n\r\n<hr />\r\n\r\n<h2>Root Scope</h2>\r\nAll applications have a <code>$rootScope</code> which is the scope created on the HTML element that contains the <code>ng-app</code> directive.\r\n\r\nThe rootScope is available in the entire application.\r\n\r\nIf a variable has the same name in both the current scope and in the rootScope, the application use the one in the current scope.\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\nA variable named "color" exists in both the controller''s scope and in the rootScope:\r\n<div class="w3-code notranslate">\r\n<div class="htmlHigh">&lt;body ng-app="myApp"&gt;\r\n\r\n&lt;p&gt;The rootScope''s favorite color:&lt;/p&gt;\r\n&lt;h1&gt;{{color}}&lt;/h1&gt;\r\n\r\n&lt;div ng-controller="myCtrl"&gt;\r\n&lt;p&gt;The scope of the controller''s favorite color:&lt;/p&gt;\r\n&lt;h1&gt;{{color}}&lt;/h1&gt;\r\n&lt;/div&gt;\r\n\r\n&lt;p&gt;The rootScope''s favorite color is still:&lt;/p&gt;\r\n&lt;h1&gt;{{color}}&lt;/h1&gt;\r\n\r\n&lt;script&gt;</div>\r\n<div class="jsHigh">var app = angular.module(''myApp'', []);\r\napp.run(function($rootScope) {\r\n$rootScope.color = ''blue'';\r\n});\r\napp.controller(''myCtrl'', function($scope) {\r\n$scope.color = "red";\r\n});</div>\r\n<div class="htmlHigh">&lt;/script&gt;\r\n&lt;/body&gt;</div>\r\n</div>\r\n</div>', 'Angular Scopes', '', 'publish', 'closed', 'closed', '', 'angular-scopes', '', '', '2016-05-21 14:31:47', '2016-05-21 14:31:47', '', 0, 'http://localhost/invatacel/lessons/angular-scopes/', 0, 'lp_lesson', '', 0);
INSERT INTO `wp_posts` (`ID`, `post_author`, `post_date`, `post_date_gmt`, `post_content`, `post_title`, `post_excerpt`, `post_status`, `comment_status`, `ping_status`, `post_password`, `post_name`, `to_ping`, `pinged`, `post_modified`, `post_modified_gmt`, `post_content_filtered`, `post_parent`, `guid`, `menu_order`, `post_type`, `post_mime_type`, `comment_count`) VALUES
(125, 1, '2016-05-21 14:26:20', '2016-05-21 14:26:20', '<p class="intro">Filters can be added in AngularJS to format data.</p>\r\n\r\n\r\n<hr />\r\n\r\n<h2>AngularJS Filters</h2>\r\nAngularJS provides filters to transform data:\r\n<ul>\r\n 	<li><code>currency</code> Format a number to a currency format.</li>\r\n 	<li><code>date</code> Format a date to a specified format.</li>\r\n 	<li><code>filter</code> Select a subset of items from an array.</li>\r\n 	<li><code>json</code> Format an object to a JSON string.</li>\r\n 	<li><code>limitTo</code> Limits an array/string, into a specified number of elements/characters.</li>\r\n 	<li><code>lowercase</code> Format a string to lower case.</li>\r\n 	<li><code>number</code> Format a number to a string.</li>\r\n 	<li><code>orderBy</code> Orders an array by an expression.</li>\r\n 	<li><code>uppercase</code> Format a string to upper case.</li>\r\n</ul>\r\n\r\n<hr />\r\n\r\n<h2>Adding Filters to Expressions</h2>\r\nFilters can be added to expressions by using the pipe character <code>|</code>, followed by a filter.\r\n\r\nThe <code>uppercase</code> filter format strings to upper case:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate htmlHigh">&lt;div ng-app="myApp" ng-controller="personCtrl"&gt;\r\n\r\n&lt;p&gt;The name is {{ lastName | uppercase }}&lt;/p&gt;\r\n\r\n&lt;/div&gt;</div>\r\n</div>\r\n<div class="w3-example"></div>\r\nThe <code>lowercase</code> filter format strings to lower case:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate htmlHigh">&lt;div ng-app="myApp" ng-controller="personCtrl"&gt;\r\n\r\n&lt;p&gt;The name is {{ lastName | lowercase }}&lt;/p&gt;\r\n\r\n&lt;/div&gt;</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n\r\n<hr />\r\n\r\n<h2>Adding Filters to Directives</h2>\r\nFilters are added to directives, like <code>ng-repeat</code>, by using the pipe character <code>|</code>, followed by a filter:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\nThe <code>orderBy</code> filter sorts an array:\r\n<div class="w3-code notranslate htmlHigh">&lt;div ng-app="myApp" ng-controller="namesCtrl"&gt;\r\n\r\n&lt;ul&gt;\r\n&lt;li ng-repeat="x in names | orderBy:''country''"&gt;\r\n{{ x.name + '', '' + x.country }}\r\n&lt;/li&gt;\r\n&lt;/ul&gt;\r\n\r\n&lt;/div&gt;</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n\r\n<hr />\r\n\r\n<h2>The currency Filter</h2>\r\nThe <code>currency</code> filter formats a number as currency:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate htmlHigh">&lt;div ng-app="myApp" ng-controller="costCtrl"&gt;\r\n\r\n&lt;h1&gt;Price: {{ price | currency }}&lt;/h1&gt;\r\n\r\n&lt;/div&gt;</div>\r\n</div>\r\n<div class="w3-example"></div>\r\nRead more about the currency filter in our <a href="http://www.w3schools.com/angular/ng_filter_currency.asp">AngularJS currency Filter Reference</a>\r\n\r\n<hr />\r\n\r\n<h2>The filter Filter</h2>\r\nThe <code>filter</code> filter selects a subset of an array.\r\n\r\nThe <code>filter</code> filter can only be used on arrays, and it returns an array containing only the matching items.\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\nReturn the names that contains the letter "i":\r\n<div class="w3-code notranslate htmlHigh">&lt;div ng-app="myApp" ng-controller="namesCtrl"&gt;\r\n\r\n&lt;ul&gt;\r\n&lt;li ng-repeat="x in names | filter : ''i''"&gt;\r\n{{ x }}\r\n&lt;/li&gt;\r\n&lt;/ul&gt;\r\n\r\n&lt;/div&gt;</div>\r\n</div>\r\n<div class="w3-example"></div>\r\nRead more about the filter filter in our <a href="http://www.w3schools.com/angular/ng_filter_filter.asp">AngularJS filter Filter Reference</a>\r\n\r\n<hr />\r\n\r\n<h2>Filter an Array Based on User Input</h2>\r\nBy setting the <code>ng-model</code> directive on an input field, we can use the value of the input field as an expression in a filter.\r\n\r\nType a letter in the input field, and the list will shrink/grow depending on the match:\r\n<div class="ng-scope">\r\n<div class="ng-scope"><input class="ng-pristine ng-untouched ng-valid" type="text" />\r\n<ul>\r\n 	<li class="ng-binding ng-scope">Jani</li>\r\n 	<li class="ng-binding ng-scope">Carl</li>\r\n 	<li class="ng-binding ng-scope">Margareth</li>\r\n 	<li class="ng-binding ng-scope">Hege</li>\r\n 	<li class="ng-binding ng-scope">Joe</li>\r\n 	<li class="ng-binding ng-scope">Gustav</li>\r\n 	<li class="ng-binding ng-scope">Birgit</li>\r\n 	<li class="ng-binding ng-scope">Mary</li>\r\n 	<li class="ng-binding ng-scope">Kai</li>\r\n</ul>\r\n</div>\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate htmlHigh">&lt;div ng-app="myApp" ng-controller="namesCtrl"&gt;\r\n\r\n&lt;p&gt;&lt;input type="text" ng-model="test"&gt;&lt;/p&gt;\r\n\r\n&lt;ul&gt;\r\n&lt;li ng-repeat="x in names | filter : test"&gt;\r\n{{ x }}\r\n&lt;/li&gt;\r\n&lt;/ul&gt;\r\n\r\n&lt;/div&gt;</div>\r\n</div>\r\n</div>\r\n<div class="ng-scope">\r\n<div class="w3-example"></div>\r\n\r\n<hr />\r\n\r\n<h2>Sort an Array Based on User Input</h2>\r\nClick the table headers to change the sort order::\r\n<div class="ng-scope">\r\n<table class="w3-table-all">\r\n<tbody>\r\n<tr>\r\n<th>Name</th>\r\n<th>Country</th>\r\n</tr>\r\n<tr class="ng-scope">\r\n<td class="ng-binding">Jani</td>\r\n<td class="ng-binding">Norway</td>\r\n</tr>\r\n<tr class="ng-scope">\r\n<td class="ng-binding">Carl</td>\r\n<td class="ng-binding">Sweden</td>\r\n</tr>\r\n<tr class="ng-scope">\r\n<td class="ng-binding">Margareth</td>\r\n<td class="ng-binding">England</td>\r\n</tr>\r\n<tr class="ng-scope">\r\n<td class="ng-binding">Hege</td>\r\n<td class="ng-binding">Norway</td>\r\n</tr>\r\n<tr class="ng-scope">\r\n<td class="ng-binding">Joe</td>\r\n<td class="ng-binding">Denmark</td>\r\n</tr>\r\n<tr class="ng-scope">\r\n<td class="ng-binding">Gustav</td>\r\n<td class="ng-binding">Sweden</td>\r\n</tr>\r\n<tr class="ng-scope">\r\n<td class="ng-binding">Birgit</td>\r\n<td class="ng-binding">Denmark</td>\r\n</tr>\r\n<tr class="ng-scope">\r\n<td class="ng-binding">Mary</td>\r\n<td class="ng-binding">England</td>\r\n</tr>\r\n<tr class="ng-scope">\r\n<td class="ng-binding">Kai</td>\r\n<td class="ng-binding">Norway</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n</div>\r\n</div>\r\nBy adding the <code>ng-click</code> directive on the table headers, we can run a function that changes the sorting order of the array:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate htmlHigh">&lt;div ng-app="myApp" ng-controller="namesCtrl"&gt;\r\n\r\n&lt;table border="1" width="100%"&gt;\r\n&lt;tr&gt;\r\n&lt;th ng-click="orderByMe(''name'')"&gt;Name&lt;/th&gt;\r\n&lt;th ng-click="orderByMe(''country'')"&gt;Country&lt;/th&gt;\r\n&lt;/tr&gt;\r\n&lt;tr ng-repeat="x in names | orderBy:myOrderBy"&gt;\r\n&lt;td&gt;{{x.name}}&lt;/td&gt;\r\n&lt;td&gt;{{x.country}}&lt;/td&gt;\r\n&lt;/tr&gt;\r\n&lt;/table&gt;\r\n\r\n&lt;/div&gt;\r\n\r\n&lt;script&gt;\r\nangular.module(''myApp'', []).controller(''namesCtrl'', function($scope) {\r\n$scope.names = [\r\n{name:''Jani'',country:''Norway''},\r\n{name:''Carl'',country:''Sweden''},\r\n{name:''Margareth'',country:''England''},\r\n{name:''Hege'',country:''Norway''},\r\n{name:''Joe'',country:''Denmark''},\r\n{name:''Gustav'',country:''Sweden''},\r\n{name:''Birgit'',country:''Denmark''},\r\n{name:''Mary'',country:''England''},\r\n{name:''Kai'',country:''Norway''}\r\n];\r\n$scope.orderByMe = function(x) {\r\n$scope.myOrderBy = x;\r\n}\r\n});\r\n&lt;/script&gt;</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n\r\n<hr />\r\n\r\n<h2>Custom Filters</h2>\r\nYou can make your own filters by registering a new filter factory function with your module:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\nMake a custom filter called "myFormat":\r\n<div class="w3-code notranslate">\r\n<div class="htmlHigh">&lt;ul ng-app="myApp" ng-controller="namesCtrl"&gt;\r\n&lt;li ng-repeat="x in names"&gt;\r\n{{x | <strong>myFormat</strong>}}\r\n&lt;/li&gt;\r\n&lt;/ul&gt;\r\n\r\n&lt;script&gt;</div>\r\n<div class="jsHigh">var app = angular.module(''myApp'', []);\r\napp.filter(''<strong>myFormat</strong>'', function() {\r\nreturn function(x) {\r\nvar i, c, txt = "";\r\nfor (i = 0; i &lt; x.length; i++) {\r\nc = x[i];\r\nif (i % 2 == 0) {\r\nc = c.toUpperCase();\r\n}\r\ntxt += c;\r\n}\r\nreturn txt;\r\n};\r\n});\r\napp.controller(''namesCtrl'', function($scope) {\r\n$scope.names = [''Jani'', ''Carl'', ''Margareth'', ''Hege'', ''Joe'', ''Gustav'', ''Birgit'', ''Mary'', ''Kai''];\r\n});</div>\r\n<div class="htmlHigh">&lt;/script&gt;</div>\r\n</div>\r\n</div>', 'Angular Filters', '', 'publish', 'closed', 'closed', '', 'angular-filters', '', '', '2016-05-21 14:32:17', '2016-05-21 14:32:17', '', 0, 'http://localhost/invatacel/lessons/angular-filters/', 0, 'lp_lesson', '', 0),
(126, 1, '2016-05-21 14:26:31', '2016-05-21 14:26:31', '<p class="intro"><strong>$http</strong> is an AngularJS service for reading data from remote servers.</p>\r\n\r\n\r\n<hr />\r\n\r\n<h2>AngularJS $http</h2>\r\nThe AngularJS <code>$http</code> service makes a request to the server, and returns a response.\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\nMake a simple request to the server, and display the result in a header:\r\n<div class="w3-code notranslate">\r\n<div class="htmlHigh">&lt;div ng-app="myApp" ng-controller="myCtrl"&gt;\r\n\r\n&lt;p&gt;Today''s welcome message is:&lt;/p&gt;\r\n&lt;h1&gt;{{myWelcome}}&lt;/h1&gt;\r\n\r\n&lt;/div&gt;\r\n\r\n&lt;script&gt;</div>\r\n<div class="jsHigh">var app = angular.module(''myApp'', []);\r\napp.controller(''myCtrl'', function($scope, $http) {\r\n$http.get("welcome.htm")\r\n.then(function(response) {\r\n$scope.myWelcome = response.data;\r\n});\r\n});</div>\r\n<div class="htmlHigh">&lt;/script&gt;</div>\r\n</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n\r\n<hr />\r\n\r\n<h2>Methods</h2>\r\nThe example above uses the <code>.get</code> method of the <code>$http</code> service.\r\n\r\nThe .get method is a shortcut method of the $http service. There are several shortcut methods:\r\n<ul>\r\n 	<li><code>.delete()</code></li>\r\n 	<li><code>.get()</code></li>\r\n 	<li><code>.head()</code></li>\r\n 	<li><code>.jsonp()</code></li>\r\n 	<li><code>.patch()</code></li>\r\n 	<li><code>.post()</code></li>\r\n 	<li><code>.put()</code></li>\r\n</ul>\r\nThe methods above are all shortcuts of calling the $http service:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate jsHigh">var app = angular.module(''myApp'', []);\r\napp.controller(''myCtrl'', function($scope, $http) {\r\n$http({\r\nmethod : "GET",\r\nurl : "welcome.htm"\r\n}).then(function mySucces(response) {\r\n$scope.myWelcome = response.data;\r\n}, function myError(response) {\r\n$scope.myWelcome = response.statusText;\r\n});\r\n});</div>\r\n</div>\r\n<div class="w3-example"></div>\r\nThe example above executes the $http service with an object as an argument. The object is specifying the HTTP method, the url, what to do on success, and what to do on failure.\r\n\r\n<hr />\r\n\r\n<h2>Properties</h2>\r\nThe response from the server is an object with these properties:\r\n<ul>\r\n 	<li><code>.config</code> the object used to generate the request.</li>\r\n 	<li><code>.data</code> a string, or an object, carrying the response from the server.</li>\r\n 	<li><code>.headers</code> a function to use to get header information.</li>\r\n 	<li><code>.status</code> a number defining the HTTP status.</li>\r\n 	<li><code>.statusText</code> a string defining the HTTP status.</li>\r\n</ul>\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate jsHigh">var app = angular.module(''myApp'', []);\r\napp.controller(''myCtrl'', function($scope, $http) {\r\n$http.get("welcome.htm")\r\n.then(function(response) {\r\n$scope.content = response.data;\r\n$scope.statuscode = response.status;\r\n$scope.statustext = response.statustext;\r\n});\r\n});</div>\r\n</div>\r\n<div class="w3-example"></div>\r\nTo handle errors, add one more functions to the <code>.then</code> method:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate jsHigh">var app = angular.module(''myApp'', []);\r\napp.controller(''myCtrl'', function($scope, $http) {\r\n$http.get("wrongfilename.htm")\r\n.then(function(response) {\r\n//First function handles success\r\n$scope.content = response.data;\r\n}, function(response) {\r\n//Second function handles error\r\n$scope.content = "Something went wrong";\r\n});\r\n});</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n\r\n<hr />\r\n\r\n<h2>JSON</h2>\r\n<div class="ng-scope">\r\n<div class="ng-scope">\r\n\r\nThe data you get from the response is expected to be in JSON format.\r\n\r\nJSON is a great way of transporting data, and it is easy to use within AngularJS, or any other JavaScript.\r\n\r\nExample: On the server we have a file that returns a JSON object containing 15 customers, all wrapped in array called <code>records</code>.\r\n\r\n<a>Take a look at the JSON object.</a>\r\n\r\n</div>\r\n</div>\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\nThe <code>ng-repeat</code> directive is perfect for looping through an array:\r\n<div class="w3-code notranslate">\r\n<div class="htmlHigh">&lt;div ng-app="myApp" ng-controller="customersCtrl"&gt;\r\n\r\n&lt;ul&gt;\r\n&lt;li ng-repeat="x in myData"&gt;\r\n{{ x.Name + '', '' + x.Country }}\r\n&lt;/li&gt;\r\n&lt;/ul&gt;\r\n\r\n&lt;/div&gt;\r\n\r\n&lt;script&gt;</div>\r\n<div class="jsHigh">var app = angular.module(''myApp'', []);\r\napp.controller(''customersCtrl'', function($scope, $http) {\r\n$http.get("customers.php").then(function(response) {\r\n$scope.myData = response.data.records;\r\n});\r\n});</div>\r\n<div class="htmlHigh">&lt;/script&gt;</div>\r\n</div>\r\n</div>\r\n<div class="w3-example"></div>\r\nApplication explained:\r\n\r\nThe application defines the <code>customersCtrl</code> controller, with a <code>$scope</code> and <code>$http</code> object.\r\n\r\n<code>$http</code> is an <strong>XMLHttpRequest object</strong> for requesting external data.\r\n\r\n<code>$http.get()</code> reads <strong>JSON data</strong> from <a href="http://www.w3schools.com/angular/customers.php" target="_blank">http://www.w3schools.com/angular/customers.php</a>.\r\n\r\nOn success, the controller creates a property, <code>myData</code>, in the scope, with JSON data from the server.', 'Angular Http', '', 'publish', 'closed', 'closed', '', 'angular-http', '', '', '2016-05-21 14:32:42', '2016-05-21 14:32:42', '', 0, 'http://localhost/invatacel/lessons/angular-http/', 0, 'lp_lesson', '', 0),
(127, 1, '2016-05-21 14:26:39', '2016-05-21 14:26:39', '<p class="intro">AngularJS lets you create dropdown lists based on items in an array, or an object.</p>\r\n\r\n\r\n<hr />\r\n\r\n<h2>Creating a Select Box Using ng-options</h2>\r\nIf you want to create a dropdown list, based on an object or an array in AngularJS, you should use the <code>ng-options</code> directive:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate">\r\n<div class="htmlHigh">&lt;div ng-app="myApp" ng-controller="myCtrl"&gt;\r\n\r\n&lt;select ng-model="selectedName" ng-options="x for x in names"&gt;\r\n&lt;/select&gt;\r\n\r\n&lt;/div&gt;\r\n\r\n&lt;script&gt;</div>\r\n<div class="jsHigh">var app = angular.module(''myApp'', []);\r\napp.controller(''myCtrl'', function($scope) {\r\n$scope.names = ["Emil", "Tobias", "Linus"];\r\n});</div>\r\n<div class="htmlHigh">&lt;/script&gt;</div>\r\n</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n\r\n<hr />\r\n\r\n<h2>ng-options vs ng-repeat</h2>\r\nYou can also use the <code>ng-repeat</code> directive to make the same dropdown list:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate">\r\n<div class="htmlHigh">&lt;select&gt;\r\n&lt;option ng-repeat="x in names"&gt;{{x}}&lt;/option&gt;\r\n&lt;/select&gt;</div>\r\n</div>\r\n</div>\r\n<div class="w3-example"></div>\r\nBecause the <code>ng-repeat</code> directive repeats a block of HTML code for each item in an array, it can be used to create options in a dropdown list, but the <code>ng-options</code> directive was made especially for filling a dropdown list with options, and has at least one important advantage:\r\n\r\nDropdowns made with <code>ng-options</code> allows the selected value to be an <strong>object</strong>, while dropdowns made from <code>ng-repeat</code> has to be a string.\r\n<h2>What Do I Use?</h2>\r\nAssume you have an array of objects:\r\n<div class="w3-example">\r\n<div class="w3-code notranslate jsHigh">$scope.cars = [\r\n{model : "Ford Mustang", color : "red"},\r\n{model : "Fiat 500", color : "white"},\r\n{model : "Volvo XC90", color : "black"}\r\n];</div>\r\n</div>\r\nThe <code>ng-repeat</code> directive has its limitations, the selected value must be a string:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\nUsing <code>ng-repeat</code>:\r\n<div class="w3-code notranslate">\r\n<div class="htmlHigh">&lt;select ng-model="selectedCar"&gt;\r\n&lt;option ng-repeat="x in cars" value="{{x.model}}"&gt;{{x.model}}&lt;/option&gt;\r\n&lt;/select&gt;\r\n\r\n&lt;h1&gt;You selected: {{selectedCar}}&lt;/h1&gt;</div>\r\n</div>\r\n</div>\r\n<div class="w3-example"></div>\r\nWhen using the <code>ng-options</code> directive, the selected value can be an object:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\nUsing <code>ng-options</code>:\r\n<div class="w3-code notranslate">\r\n<div class="htmlHigh">&lt;select ng-model="selectedCar" ng-options="x.model for x in cars"&gt;\r\n&lt;/select&gt;\r\n\r\n&lt;h1&gt;You selected: {{selectedCar.model}}&lt;/h1&gt;\r\n&lt;p&gt;Its color is: {{selectedCar.color}}&lt;/p&gt;</div>\r\n</div>\r\n</div>\r\n<div class="w3-example"></div>\r\nWhen the selected value can be an object, it can hold more information, and your application can be more flexible.\r\n\r\nWe will use the <code>ng-options</code> directive in this tutorial.\r\n\r\n<hr />\r\n\r\n<h2>The Data Source as an Object</h2>\r\nIn the previous examples the data source was an array, but we can also use an object.\r\n\r\nAssume you have an object with key-value pairs:\r\n<div class="w3-example">\r\n<div class="w3-code notranslate jsHigh">$scope.cars = {\r\ncar01 : "Ford",\r\ncar02 : "Fiat",\r\ncar03 : "Volvo"\r\n};</div>\r\n</div>\r\nThe expression in the <code>ng-options</code> attribute is a bit different for objects:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\nUsing an object as the data source, <code>x</code> represents the key, and <code>y</code> represents the value:\r\n<div class="w3-code notranslate">\r\n<div class="htmlHigh">&lt;select ng-model="selectedCar" ng-options="<strong>x for (x, y) in cars</strong>"&gt;\r\n&lt;/select&gt;\r\n\r\n&lt;h1&gt;You selected: {{selectedCar}}&lt;/h1&gt;</div>\r\n</div>\r\n</div>\r\n<div class="w3-example"></div>\r\nThe selected value will always be the <strong>value</strong> in a key-<strong>value</strong> pair.\r\n\r\nThe <strong>value</strong> in a key-<strong>value</strong> pair can also be an object:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\nThe selected value will still be the <strong>value</strong> in a key-<strong>value</strong> pair, only this time it is an object:\r\n<div class="w3-code notranslate">\r\n<div class="jsHigh">$scope.cars = {\r\ncar01 : {brand : "Ford", model : "Mustang", color : "red"},\r\ncar02 : {brand : "Fiat", model : "500", color : "white"},\r\ncar03 : {brand : "Volvo", model : "XC90", color : "black"}\r\n};</div>\r\n</div>\r\n</div>\r\n<div class="w3-example"></div>\r\nThe options in the dropdown list does not have be the <strong>key</strong> in a <strong>key</strong>-value pair, it can also be the value, or a property of the value object:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate">\r\n<div class="htmlHigh">&lt;select ng-model="selectedCar" ng-options="<strong>y.brand</strong> for (x, y) in cars"&gt;\r\n&lt;/select&gt;</div>\r\n</div>\r\n</div>', 'Angular Select', '', 'publish', 'closed', 'closed', '', 'angular-select', '', '', '2016-05-21 14:33:11', '2016-05-21 14:33:11', '', 0, 'http://localhost/invatacel/lessons/angular-select/', 0, 'lp_lesson', '', 0),
(128, 1, '2016-05-21 14:26:44', '2016-05-21 14:26:44', '<p class="intro">AngularJS is perfect for displaying data from a Database. Just make sure the data is in JSON format.</p>\r\n\r\n\r\n<hr />\r\n\r\n<h2>Fetching Data From a PHP Server Running MySQL</h2>\r\n<div class="w3-example">\r\n<h3>AngularJS Example</h3>\r\n<div class="w3-code notranslate htmlHigh">&lt;div ng-app="myApp" ng-controller="customersCtrl"&gt;\r\n\r\n&lt;table&gt;\r\n&lt;tr ng-repeat="x in names"&gt;\r\n&lt;td&gt;{{ x.Name }}&lt;/td&gt;\r\n&lt;td&gt;{{ x.Country }}&lt;/td&gt;\r\n&lt;/tr&gt;\r\n&lt;/table&gt;\r\n\r\n&lt;/div&gt;\r\n\r\n&lt;script&gt;\r\nvar app = angular.module(''myApp'', []);\r\napp.controller(''customersCtrl'', function($scope, $http) {\r\n$http.get("http://www.w3schools.com/angular/customers_mysql.php")\r\n.then(function (response) {$scope.names = response.data.records;});\r\n});\r\n&lt;/script&gt;</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n\r\n<hr />\r\n\r\n<h2>Fetching Data From an ASP.NET Server Running SQL</h2>\r\n<div class="w3-example">\r\n<h3>AngularJS Example</h3>\r\n<div class="w3-code notranslate htmlHigh">&lt;div ng-app="myApp" ng-controller="customersCtrl"&gt;\r\n\r\n&lt;table&gt;\r\n&lt;tr ng-repeat="x in names"&gt;\r\n&lt;td&gt;{{ x.Name }}&lt;/td&gt;\r\n&lt;td&gt;{{ x.Country }}&lt;/td&gt;\r\n&lt;/tr&gt;\r\n&lt;/table&gt;\r\n\r\n&lt;/div&gt;\r\n\r\n&lt;script&gt;\r\nvar app = angular.module(''myApp'', []);\r\napp.controller(''customersCtrl'', function($scope, $http) {\r\n$http.get("http://www.w3schools.com/angular/customers_sql.aspx")\r\n.then(function (response) {$scope.names = response.data.records;});\r\n});\r\n&lt;/script&gt;</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n\r\n<hr />\r\n\r\n<h2>Server Code Examples</h2>\r\nThe following section is a listing of the server code used to fetch SQL data.\r\n<ol>\r\n 	<li>Using PHP and MySQL. Returning JSON.</li>\r\n 	<li>Using PHP and MS Access. Returning JSON.</li>\r\n 	<li>Using ASP.NET, VB, and MS Access. Returning JSON.</li>\r\n 	<li>Using ASP.NET, Razor, and SQL Lite. Returning JSON.</li>\r\n</ol>\r\n\r\n<hr />\r\n\r\n<h2>Cross-Site HTTP Requests</h2>\r\nRequests for data from a different server (than the requesting page), are called <strong>cross-site</strong> HTTP requests.\r\n\r\nCross-site requests are common on the web. Many pages load CSS, images, and scripts from different servers.\r\n\r\nIn modern browsers, cross-site HTTP requests <strong>from scripts</strong> are restricted to <strong>same site</strong> for security reasons.\r\n\r\nThe following line, in our PHP examples, has been added to allow cross-site access.\r\n<div class="w3-example">\r\n<div class="w3-code notranslate">header("Access-Control-Allow-Origin: *");</div>\r\n</div>\r\n\r\n<hr />\r\n\r\n<h2>1. Server Code PHP and MySQL</h2>\r\n<div class="w3-example">\r\n<div class="w3-code notranslate">&lt;?php\r\nheader("Access-Control-Allow-Origin: *");\r\nheader("Content-Type: application/json; charset=UTF-8");\r\n\r\n$conn = new mysqli("myServer", "myUser", "myPassword", "Northwind");\r\n\r\n$result = $conn-&gt;query("SELECT CompanyName, City, Country FROM Customers");\r\n\r\n$outp = "";\r\nwhile($rs = $result-&gt;fetch_array(MYSQLI_ASSOC)) {\r\nif ($outp != "") {$outp .= ",";}\r\n$outp .= ''{"Name":"''  . $rs["CompanyName"] . ''",'';\r\n$outp .= ''"City":"''   . $rs["City"]        . ''",'';\r\n$outp .= ''"Country":"''. $rs["Country"]     . ''"}'';\r\n}\r\n$outp =''{"records":[''.$outp.'']}'';\r\n$conn-&gt;close();\r\n\r\necho($outp);\r\n?&gt;</div>\r\n</div>\r\n\r\n<hr />\r\n\r\n<h2>2. Server Code PHP and MS Access</h2>\r\n<div class="w3-example">\r\n<div class="w3-code notranslate">&lt;?php\r\nheader("Access-Control-Allow-Origin: *");\r\nheader("Content-Type: application/json; charset=ISO-8859-1");\r\n\r\n$conn = new COM("ADODB.Connection");\r\n$conn-&gt;open("PROVIDER=Microsoft.Jet.OLEDB.4.0;Data Source=Northwind.mdb");\r\n\r\n$rs = $conn-&gt;execute("SELECT CompanyName, City, Country FROM Customers");\r\n\r\n$outp = "";\r\nwhile (!$rs-&gt;EOF) {\r\nif ($outp != "") {$outp .= ",";}\r\n$outp .= ''{"Name":"''  . $rs["CompanyName"] . ''",'';\r\n$outp .= ''"City":"''   . $rs["City"]        . ''",'';\r\n$outp .= ''"Country":"''. $rs["Country"]     . ''"}'';\r\n$rs-&gt;MoveNext();\r\n}\r\n$outp =''{"records":[''.$outp.'']}'';\r\n\r\n$conn-&gt;close();\r\n\r\necho ($outp);\r\n?&gt;</div>\r\n</div>\r\n\r\n<hr />\r\n\r\n<h2>3. Server Code ASP.NET, VB and MS Access</h2>\r\n<div class="w3-example">\r\n<div class="w3-code notranslate">&lt;%@ Import Namespace="System.IO"%&gt;\r\n&lt;%@ Import Namespace="System.Data"%&gt;\r\n&lt;%@ Import Namespace="System.Data.OleDb"%&gt;\r\n&lt;%\r\nResponse.AppendHeader("Access-Control-Allow-Origin", "*")\r\nResponse.AppendHeader("Content-type", "application/json")\r\nDim conn As OleDbConnection\r\nDim objAdapter As OleDbDataAdapter\r\nDim objTable As DataTable\r\nDim objRow As DataRow\r\nDim objDataSet As New DataSet()\r\nDim outp\r\nDim c\r\nconn = New OledbConnection("Provider=Microsoft.Jet.OLEDB.4.0;data source=Northwind.mdb")\r\nobjAdapter = New OledbDataAdapter("SELECT CompanyName, City, Country FROM Customers", conn)\r\nobjAdapter.Fill(objDataSet, "myTable")\r\nobjTable=objDataSet.Tables("myTable")\r\n\r\noutp = ""\r\nc = chr(34)\r\nfor each x in objTable.Rows\r\nif outp &lt;&gt; "" then outp = outp &amp; ","\r\noutp = outp &amp; "{" &amp; c &amp; "Name"    &amp; c &amp; ":" &amp; c &amp; x("CompanyName") &amp; c &amp; ","\r\noutp = outp &amp;       c &amp; "City"    &amp; c &amp; ":" &amp; c &amp; x("City")        &amp; c &amp; ","\r\noutp = outp &amp;       c &amp; "Country" &amp; c &amp; ":" &amp; c &amp; x("Country")     &amp; c &amp; "}"\r\nnext\r\n\r\noutp ="{" &amp; c &amp; "records" &amp; c &amp; ":[" &amp; outp &amp; "]}"\r\nresponse.write(outp)\r\nconn.close\r\n%&gt;</div>\r\n</div>\r\n\r\n<hr />\r\n\r\n<h2>4. Server Code ASP.NET, Razor C# and SQL Lite</h2>\r\n<div class="w3-example">\r\n<div class="w3-code notranslate">@{\r\nResponse.AppendHeader("Access-Control-Allow-Origin", "*")\r\nResponse.AppendHeader("Content-type", "application/json")\r\nvar db = Database.Open("Northwind");\r\nvar query = db.Query("SELECT CompanyName, City, Country FROM Customers");\r\nvar outp =""\r\nvar c = chr(34)\r\n}\r\n@foreach(var row in query)\r\n{\r\nif outp &lt;&gt; "" then outp = outp + ","\r\noutp = outp + "{" + c + "Name"    + c + ":" + c + @row.CompanyName + c + ","\r\noutp = outp +       c + "City"    + c + ":" + c + @row.City        + c + ","\r\noutp = outp +       c + "Country" + c + ":" + c + @row.Country     + c + "}"\r\n}\r\noutp ="{" + c + "records" + c + ":[" + outp + "]}"\r\n@outp</div>\r\n</div>', 'Angular SQL', '', 'publish', 'closed', 'closed', '', 'angular-sql', '', '', '2016-05-21 14:33:44', '2016-05-21 14:33:44', '', 0, 'http://localhost/invatacel/lessons/angular-sql/', 0, 'lp_lesson', '', 0),
(129, 1, '2016-05-21 14:26:57', '2016-05-21 14:26:57', '<p class="intro">AngularJS has directives for binding application data to the attributes of HTML DOM elements.</p>\r\n\r\n\r\n<hr />\r\n\r\n<h2>The ng-disabled Directive</h2>\r\nThe <strong>ng-disabled</strong> directive binds AngularJS application data to the disabled attribute of HTML elements.\r\n<div class="w3-example">\r\n<h3>AngularJS Example</h3>\r\n<div class="w3-code notranslate htmlHigh">&lt;div ng-app="" ng-init="mySwitch=true"&gt;\r\n\r\n&lt;p&gt;\r\n&lt;button ng-disabled="mySwitch"&gt;Click Me!&lt;/button&gt;\r\n&lt;/p&gt;\r\n\r\n&lt;p&gt;\r\n&lt;input type="checkbox" ng-model="mySwitch"&gt;Button\r\n&lt;/p&gt;\r\n\r\n&lt;p&gt;\r\n{{ mySwitch }}\r\n&lt;/p&gt;\r\n\r\n&lt;/div&gt;</div>\r\n</div>\r\n<div class="w3-example"></div>\r\nApplication explained:\r\n\r\nThe <strong>ng-disabled</strong> directive binds the application data <strong>mySwitch</strong> to the HTML button''s <strong>disabled</strong> attribute.\r\n\r\nThe <strong>ng-model</strong> directive binds the value of the HTML checkbox element to the value of <strong>mySwitch</strong>.\r\n\r\nIf the value of <strong>mySwitch</strong> evaluates to <strong>true</strong>, the button will be disabled:\r\n<div class="w3-example">\r\n<div class="w3-code notranslate htmlHigh">&lt;p&gt;\r\n&lt;button disabled&gt;Click Me!&lt;/button&gt;\r\n&lt;/p&gt;</div>\r\n</div>\r\nIf the value of <strong>mySwitch</strong> evaluates to <strong>false</strong>, the button will not be disabled:\r\n<div class="w3-example">\r\n<div class="w3-code notranslate htmlHigh">&lt;p&gt;\r\n&lt;button&gt;Click Me!&lt;/button&gt;\r\n&lt;/p&gt;</div>\r\n</div>\r\n\r\n<hr />\r\n\r\n<h2>The ng-show Directive</h2>\r\nThe <strong>ng-show</strong> directive shows or hides an HTML element.\r\n<div class="w3-example">\r\n<h3>AngularJS Example</h3>\r\n<div class="w3-code notranslate htmlHigh">&lt;div ng-app=""&gt;\r\n\r\n&lt;p ng-show="true"&gt;I am visible.&lt;/p&gt;\r\n\r\n&lt;p ng-show="false"&gt;I am not visible.&lt;/p&gt;\r\n\r\n&lt;/div&gt;</div>\r\n</div>\r\n<div class="w3-example"></div>\r\nThe ng-show directive shows (or hides) an HTML element based on the <strong> value</strong> of ng-show.\r\n\r\nYou can use any expression that evaluates to true or false:\r\n<div class="w3-example">\r\n<h3>AngularJS Example</h3>\r\n<div class="w3-code notranslate htmlHigh">&lt;div ng-app="" ng-init="hour=13"&gt;\r\n\r\n&lt;p ng-show="hour &gt; 12"&gt;I am visible.&lt;/p&gt;\r\n\r\n&lt;/div&gt;</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n<table class="lamp">\r\n<tbody>\r\n<tr>\r\n<th><img src="http://www.w3schools.com/images/lamp.jpg" alt="Note" /></th>\r\n<td>In the next chapter, there are more examples, using the click of a button to hide HTML elements.</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n\r\n<hr />\r\n\r\n<h2>The ng-hide Directive</h2>\r\nThe <strong>ng-hide</strong> directive hides or shows an HTML element.\r\n<div class="w3-example">\r\n<h3>AngularJS Example</h3>\r\n<div class="w3-code notranslate htmlHigh">&lt;div ng-app=""&gt;\r\n\r\n&lt;p ng-hide="true"&gt;I am not visible.&lt;/p&gt;\r\n\r\n&lt;p ng-hide="false"&gt;I am visible.&lt;/p&gt;\r\n\r\n&lt;/div&gt;</div>\r\n</div>', 'Angular DOM', '', 'publish', 'closed', 'closed', '', 'angular-dom', '', '', '2016-05-21 14:34:07', '2016-05-21 14:34:07', '', 0, 'http://localhost/invatacel/lessons/angular-dom/', 0, 'lp_lesson', '', 0),
(130, 1, '2016-05-21 14:27:08', '2016-05-21 14:27:08', '<p class="intro">AngularJS has its own HTML events directives.</p>\r\n\r\n\r\n<hr />\r\n\r\n<h2>AngularJS Events</h2>\r\nYou can add AngularJS event listeners to your HTML elements by using one or more of these directives:\r\n<ul>\r\n 	<li><code>ng-blur</code></li>\r\n 	<li><code>ng-change</code></li>\r\n 	<li><code>ng-click</code></li>\r\n 	<li><code>ng-copy</code></li>\r\n 	<li><code>ng-cut</code></li>\r\n 	<li><code>ng-dblclick</code></li>\r\n 	<li><code>ng-focus</code></li>\r\n 	<li><code>ng-keydown</code></li>\r\n 	<li><code>ng-keypress</code></li>\r\n 	<li><code>ng-keyup</code></li>\r\n 	<li><code>ng-mousedown</code></li>\r\n 	<li><code>ng-mouseenter</code></li>\r\n 	<li><code>ng-mouseleave</code></li>\r\n 	<li><code>ng-mousemove</code></li>\r\n 	<li><code>ng-mouseover</code></li>\r\n 	<li><code>ng-mouseup</code></li>\r\n 	<li><code>ng-paste</code></li>\r\n</ul>\r\nThe event directives allows us to run AngularJS functions at certain user events.\r\n\r\nAn AngularJS event will not overwrite an HTML event, both events will be executed.\r\n\r\n<hr />\r\n\r\n<h2>Mouse Events</h2>\r\nMouse events occur when the cursor moves over an element, in this order:\r\n<ol>\r\n 	<li>ng-mouseenter</li>\r\n 	<li>ng-mouseover</li>\r\n 	<li>ng-mousemove</li>\r\n 	<li>ng-mouseleave</li>\r\n</ol>\r\nOr when a mouse button is clicked on an element, in this order:\r\n<ol>\r\n 	<li>ng-mousedown</li>\r\n 	<li>ng-mouseup</li>\r\n 	<li>ng-click</li>\r\n</ol>\r\nYou can add mouse events on any HTML element.\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\nIncrease the count variable when the mouse moves over the H1 element:\r\n<div class="w3-code notranslate htmlHigh">&lt;div ng-app="myApp" ng-controller="myCtrl"&gt;\r\n\r\n&lt;h1 ng-mousemove="count = count + 1"&gt;Mouse over me!&lt;/h1&gt;\r\n\r\n&lt;h2&gt;{{ count }}&lt;/h2&gt;\r\n\r\n&lt;/div&gt;\r\n&lt;script&gt;\r\nvar app = angular.module(''myApp'', []);\r\napp.controller(''myCtrl'', function($scope) {\r\n$scope.count = 0;\r\n});\r\n&lt;/script&gt;</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n\r\n<hr />\r\n\r\n<h2>The ng-click Directive</h2>\r\nThe <code>ng-click</code> directive defines AngularJS code that will be executed when the element is being clicked.\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate htmlHigh">&lt;div ng-app="myApp" ng-controller="myCtrl"&gt;\r\n\r\n&lt;button ng-click="count = count + 1"&gt;Click me!&lt;/button&gt;\r\n\r\n&lt;p&gt;{{ count }}&lt;/p&gt;\r\n\r\n&lt;/div&gt;\r\n&lt;script&gt;\r\nvar app = angular.module(''myApp'', []);\r\napp.controller(''myCtrl'', function($scope) {\r\n$scope.count = 0;\r\n});\r\n&lt;/script&gt;</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n\r\n<hr />\r\n\r\nYou can also refer to a function:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate htmlHigh">&lt;div ng-app="myApp" ng-controller="myCtrl"&gt;\r\n\r\n&lt;button ng-click="myFunction()"&gt;Click me!&lt;/button&gt;\r\n\r\n&lt;p&gt;{{ count }}&lt;/p&gt;\r\n\r\n&lt;/div&gt;\r\n&lt;script&gt;\r\nvar app = angular.module(''myApp'', []);\r\napp.controller(''myCtrl'', function($scope) {\r\n$scope.count = 0;\r\n$scope.myFunction = function() {\r\n$scope.count++;\r\n}\r\n});\r\n&lt;/script&gt;</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n\r\n<hr />\r\n\r\n<h2>Toggle, True/False</h2>\r\nIf you want to show a section of HTML code when a button is clicked, and hide when the button is clicked again, like a dropdown menu, make the button behave like a toggle switch:\r\n<div class="ng-scope"></div>\r\n<div class="ng-scope"></div>\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate htmlHigh">&lt;div ng-app="myApp" ng-controller="myCtrl"&gt;\r\n\r\n&lt;button ng-click="myFunc()"&gt;Click Me!&lt;/button&gt;\r\n\r\n&lt;div ng-show="showMe"&gt;\r\n&lt;h1&gt;Menu:&lt;/h1&gt;\r\n&lt;div&gt;Pizza&lt;/div&gt;\r\n&lt;div&gt;Pasta&lt;/div&gt;\r\n&lt;div&gt;Pesce&lt;/div&gt;\r\n&lt;/div&gt;\r\n\r\n&lt;/div&gt;\r\n&lt;script&gt;\r\nvar app = angular.module(''myApp'', []);\r\napp.controller(''myCtrl'', function($scope) {\r\n$scope.showMe = false;\r\n$scope.myFunc = function() {\r\n$scope.showMe = !$scope.showMe;\r\n}\r\n});\r\n&lt;/script&gt;</div>\r\n</div>\r\n<div class="w3-example"></div>\r\nThe <code>showMe</code> variable starts out as the Boolean value <code>false</code>.\r\n\r\nThe <code>myFunc</code> function sets the <code>showMe</code> variable to the opposite of what it is, by using the <code>!</code> (not) operator.\r\n\r\n<hr />\r\n\r\n<h2>$event Object</h2>\r\nYou can pass the <code>$event</code> object as an argument when calling the function.\r\n\r\nThe <code>$event</code> object contains the browser''s event object:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate htmlHigh">&lt;div ng-app="myApp" ng-controller="myCtrl"&gt;\r\n\r\n&lt;h1 ng-mousemove="myFunc($event)"&gt;Mouse Over Me!&lt;/h1&gt;\r\n\r\n&lt;p&gt;Coordinates: {{x + '', '' + y}}&lt;/p&gt;\r\n\r\n&lt;/div&gt;\r\n&lt;script&gt;\r\nvar app = angular.module(''myApp'', []);\r\napp.controller(''myCtrl'', function($scope) {\r\n$scope.myFunc = function(myE) {\r\n$scope.x = myE.clientX;\r\n$scope.y = myE.clientY;\r\n}\r\n});\r\n&lt;/script&gt;</div>\r\n</div>', 'Angular Events', '', 'publish', 'closed', 'closed', '', 'angular-events', '', '', '2016-05-21 14:34:27', '2016-05-21 14:34:27', '', 0, 'http://localhost/invatacel/lessons/angular-events/', 0, 'lp_lesson', '', 0),
(131, 1, '2016-05-21 14:27:22', '2016-05-21 14:27:22', 'An animation is when the transformation of an HTML element gives you an illusion of motion.\r\n<div class="w3-example">\r\n<h3>Example:</h3>\r\nCheck the checkbox to hide the DIV:\r\n<div class="w3-code notranslate htmlHigh">&lt;body ng-app="ngAnimate"&gt;\r\n\r\nHide the DIV: &lt;input type="checkbox" ng-model="myCheck"&gt;\r\n\r\n&lt;div ng-hide="myCheck"&gt;&lt;/div&gt;\r\n\r\n&lt;/body&gt;</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n<table class="lamp">\r\n<tbody>\r\n<tr>\r\n<th><img src="http://www.w3schools.com/images/lamp.jpg" alt="Note" /></th>\r\n<td>Applications should not be filled with animations, but some animations can make the application easier to understand.</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n\r\n<hr />\r\n\r\n<h2>What do I Need?</h2>\r\nTo make your applications ready for animations, you must include the AngularJS Animate library:\r\n<div class="w3-example">\r\n<div class="w3-code notranslate htmlHigh">&lt;script src="http://ajax.googleapis.com/ajax/libs/angularjs/1.4.8/angular-animate.js"&gt;&lt;/script&gt;</div>\r\n</div>\r\nThen you must refer to the <code>ngAnimate</code> module in your application:\r\n<div class="w3-example">\r\n<div class="w3-code notranslate htmlHigh">&lt;body ng-app="ngAnimate"&gt;</div>\r\n</div>\r\nOr if your application has a name, add <code>ngAnimate</code> as a dependency in your application module:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate">\r\n<div class="htmlHigh">&lt;body ng-app="myApp"&gt;\r\n\r\n&lt;h1&gt;Hide the DIV: &lt;input type="checkbox" ng-model="myCheck"&gt;&lt;/h1&gt;\r\n\r\n&lt;div ng-hide="myCheck"&gt;&lt;/div&gt;\r\n\r\n&lt;script&gt;</div>\r\n<div class="jsHigh">var app = angular.module(''myApp'', [''ngAnimate'']);</div>\r\n<div class="htmlHigh">&lt;/script&gt;</div>\r\n</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n\r\n<hr />\r\n\r\n<h2>What Does ngAnimate Do?</h2>\r\nThe ngAnimate module adds and removes classes.\r\n\r\nThe ngAnimate module does not animate your HTML elements, but when ngAnimate notice certain events, like hide or show of an HTML element, the element gets some pre-defined classes which can be used to make animations.\r\n\r\nThe directives in AngularJS who add/remove classes are:\r\n<ul>\r\n 	<li><code>ng-show</code></li>\r\n 	<li><code>ng-hide</code></li>\r\n 	<li><code>ng-class</code></li>\r\n 	<li><code>ng-view</code></li>\r\n 	<li><code>ng-include</code></li>\r\n 	<li><code>ng-repeat</code></li>\r\n 	<li><code>ng-if</code></li>\r\n 	<li><code>ng-switch</code></li>\r\n</ul>\r\nThe <code>ng-show</code> and <code>ng-hide</code> directives adds or removes a <code>ng-hide</code> class value.\r\n\r\nThe other directives adds a <code>ng-enter</code> class value when they enter the DOM, and a <code>ng-leave</code> attribute when they are removed from the DOM.\r\n\r\nThe <code>ng-repeat</code> directive also adds a <code>ng-move</code> class value when the HTML element changes position.\r\n\r\nIn addition, <em>during</em> the animation, the HTML element will have a set of class values, which will be removed when the animation has finished. Example: the <code>ng-hide</code> directive will add these class values:\r\n<ul>\r\n 	<li><code>ng-animate</code></li>\r\n 	<li><code>ng-hide-animate</code></li>\r\n 	<li><code>ng-hide-add</code> (if the element will be hidden)</li>\r\n 	<li><code>ng-hide-remove</code> (if the element will be showed)</li>\r\n 	<li><code>ng-hide-add-active</code> (if the element will be hidden)</li>\r\n 	<li><code>ng-hide-remove-active</code> (if the element will be showed)</li>\r\n</ul>\r\n\r\n<hr />\r\n\r\n<h2>Animations Using CSS</h2>\r\nWe can use CSS transitions or CSS animations to animate HTML elements. This tutorial will show you both.\r\n\r\nTo learn more about CSS Animation, study our <a href="http://www.w3schools.com/css/css3_transitions.asp">CSS Transition Tutorial</a> and our <a href="http://www.w3schools.com/css/css3_animations.asp">CSS Animation Tutorial</a>.\r\n\r\n<hr />\r\n\r\n<h2>CSS Transitions</h2>\r\nCSS transitions allows you to change CSS property values smoothly, from one value to another, over a given duration:\r\n<div class="w3-example">\r\n<h3>Example:</h3>\r\nWhen the DIV element gets the <code>.ng-hide</code> class, the transition will take 0.5 seconds, and the height will smoothly change from 100px to 0:\r\n<div class="w3-code notranslate htmlHigh">&lt;style&gt;\r\ndiv {\r\ntransition: all linear 0.5s;\r\nbackground-color: lightblue;\r\nheight: 100px;\r\n}\r\n.ng-hide {\r\nheight: 0;\r\n}\r\n&lt;/style&gt;</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n\r\n<hr />\r\n\r\n<h2>CSS Animations</h2>\r\nCSS Animations allows you to change CSS property values smoothly, from one value to another, over a given duration:\r\n<div class="w3-example">\r\n<h3>Example:</h3>\r\nWhen the DIV element gets the <code>.ng-hide</code> class, the <code>myChange</code> animation will run, which will smoothly change the height from 100px to 0:\r\n<div class="w3-code notranslate htmlHigh">&lt;style&gt;\r\n@keyframes myChange {\r\nfrom {\r\nheight: 100px;\r\n} to {\r\nheight: 0;\r\n}\r\n}\r\ndiv {\r\nheight: 100px;\r\nbackground-color: lightblue;\r\n}\r\ndiv.ng-hide {\r\nanimation: 0.5s myChange;\r\n}\r\n&lt;/style&gt;</div>\r\n</div>', 'Angular Animations', '', 'publish', 'closed', 'closed', '', 'angular-animations', '', '', '2016-05-21 14:35:00', '2016-05-21 14:35:00', '', 0, 'http://localhost/invatacel/lessons/angular-animations/', 0, 'lp_lesson', '', 0),
(132, 1, '2016-05-21 14:27:34', '2016-05-21 14:27:34', '<p class="intro">It is time to create a real AngularJS Application.</p>\r\n\r\n\r\n<hr />\r\n\r\n<h2>Make a Shopping List</h2>\r\nLets use some of the AngularJS features to make a shopping list, were you can add or remove items:\r\n<div class="w3-card-2 ng-scope"><header class="w3-container w3-light-grey w3-padding-hor-16">\r\n<h3>My Shopping List</h3>\r\n</header>\r\n<ul class="w3-ul">\r\n 	<li class="w3-padding-hor-16 ng-binding ng-scope">Milk<span class="w3-right w3-margin-right">×</span></li>\r\n 	<li class="w3-padding-hor-16 ng-binding ng-scope">Bread<span class="w3-right w3-margin-right">×</span></li>\r\n 	<li class="w3-padding-hor-16 ng-binding ng-scope">Cheese<span class="w3-right w3-margin-right">×</span></li>\r\n</ul>\r\n<div class="w3-container w3-light-grey w3-padding-hor-16">\r\n<div class="w3-row w3-margin-top">\r\n<div class="w3-col s10"><input class="w3-input w3-border w3-padding ng-pristine ng-untouched ng-valid" type="text" placeholder="Add shopping items here" /></div>\r\n<div class="w3-col s2"></div>\r\n</div>\r\n</div>\r\n</div>\r\n<div class="w3-card-2 ng-scope"></div>\r\n&nbsp;\r\n\r\n<hr />\r\n\r\n<h2>Application Explained</h2>\r\n<h3>Step 1. Getting Started:</h3>\r\nStart by making an application called <code>myShoppingList</code>, and add a controller named <code>myCtrl</code> to it.\r\n\r\nThe controller adds an array named <code>products</code> to the current <code>$scope</code>.\r\n\r\nIn the HTML, we use the <code>ng-repeat</code> directive to display a list using the items in the array.\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\nSo far we have made an HTML list based on the items of an array:\r\n<div class="w3-code notranslate">\r\n<div class="htmlHigh">&lt;script&gt;</div>\r\n<div class="jsHigh">var app = angular.module("myShoppingList", []);\r\napp.controller("myCtrl", function($scope) {\r\n$scope.products = ["Milk", "Bread", "Cheese"];\r\n});</div>\r\n<div class="htmlHigh">&lt;/script&gt;\r\n\r\n&lt;div ng-app="myShoppingList" ng-controller="myCtrl"&gt;\r\n&lt;ul&gt;\r\n&lt;li ng-repeat="x in products"&gt;{{x}}&lt;/li&gt;\r\n&lt;/ul&gt;\r\n&lt;/div&gt;</div>\r\n</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n\r\n<hr />\r\n\r\n<h3>Step 2. Adding Items:</h3>\r\nIn the HTML, add a text field, and bind it to the application with the <code>ng-model</code> directive.\r\n\r\nIn the controller, make a function named <code>addItem</code>, and use the value of the <code>addMe</code> input field to add an item to the <code>products</code> array.\r\n\r\nAdd a button, and give it an <code>ng-click</code> directive that will run the <code>addItem</code> function when the button is clicked.\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\nNow we can add items to our shopping list:\r\n<div class="w3-code notranslate">\r\n<div class="htmlHigh">&lt;script&gt;</div>\r\n<div class="jsHigh">var app = angular.module("myShoppingList", []);\r\napp.controller("myCtrl", function($scope) {\r\n$scope.products = ["Milk", "Bread", "Cheese"];\r\n<strong>    $scope.addItem = function () {\r\n$scope.products.push($scope.addMe);\r\n}</strong>\r\n});</div>\r\n<div class="htmlHigh">&lt;/script&gt;\r\n\r\n&lt;div ng-app="myShoppingList" ng-controller="myCtrl"&gt;\r\n&lt;ul&gt;\r\n&lt;li ng-repeat="x in products"&gt;{{x}}&lt;/li&gt;\r\n&lt;/ul&gt;\r\n<strong>    &lt;input ng-model="addMe"&gt;\r\n&lt;button ng-click="addItem()"&gt;Add&lt;/button&gt;\r\n</strong>&lt;/div&gt;</div>\r\n</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n\r\n<hr />\r\n\r\n<h3>Step 3. Removing Items:</h3>\r\nWe also want to be able to remove items from the shopping list.\r\n\r\nIn the controller, make a function named <code>removeItem</code>, which takes the index of the item you want to remove, as a paramter\r\n\r\nIn the HTML, make a <code>&lt;span&gt;</code> element for each item, and give them an <code>ng-click</code> directive which calls the <code>removeItem</code> function with the current <code>$index</code>.\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\nNow we can remove items from our shopping list:\r\n<div class="w3-code notranslate">\r\n<div class="htmlHigh">&lt;script&gt;</div>\r\n<div class="jsHigh">var app = angular.module("myShoppingList", []);\r\napp.controller("myCtrl", function($scope) {\r\n$scope.products = ["Milk", "Bread", "Cheese"];\r\n$scope.addItem = function () {\r\n$scope.products.push($scope.addMe);\r\n}\r\n<strong>    $scope.removeItem = function (x) {\r\n$scope.products.splice(x, 1);\r\n}</strong>\r\n});</div>\r\n<div class="htmlHigh">&lt;/script&gt;\r\n\r\n&lt;div ng-app="myShoppingList" ng-controller="myCtrl"&gt;\r\n&lt;ul&gt;\r\n&lt;li ng-repeat="x in products"&gt;\r\n{{x}}<strong>\r\n&lt;span ng-click="removeItem($index)"&gt;&amp;times;&lt;/span&gt;\r\n</strong>&lt;/li&gt;\r\n&lt;/ul&gt;\r\n&lt;input ng-model="addMe"&gt;\r\n&lt;button ng-click="addItem()"&gt;Add&lt;/button&gt;\r\n&lt;/div&gt;</div>\r\n</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n\r\n<hr />\r\n\r\n<h3>Step 4. Error Handling:</h3>\r\nThe application has some errors, like if you try to add the same item twice, the application crashes. Also, it should not be allowed to add empty items.\r\n\r\nWe will fix that by checking the value before adding new items.\r\n\r\nIn the HTML, we will add a container for error messages, and write an error message when someone tries to add an existing item.\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\nA shopping list, with the possibility to write error messages:\r\n<div class="w3-code notranslate">\r\n<div class="htmlHigh">&lt;script&gt;</div>\r\n<div class="jsHigh">var app = angular.module("myShoppingList", []);\r\napp.controller("myCtrl", function($scope) {\r\n$scope.products = ["Milk", "Bread", "Cheese"];\r\n$scope.addItem = function () {\r\n<strong>        $scope.errortext = "";\r\nif (!$scope.addMe) {return;}\r\nif ($scope.products.indexOf($scope.addMe) == -1) {\r\n</strong>            $scope.products.push($scope.addMe);\r\n<strong>        } else {\r\n$scope.errortext = "The item is already in your shopping list.";\r\n}\r\n</strong>    }\r\n$scope.removeItem = function (x) {\r\n<strong>        $scope.errortext = "";\r\n</strong>        $scope.products.splice(x, 1);\r\n}\r\n});</div>\r\n<div class="htmlHigh">&lt;/script&gt;\r\n\r\n&lt;div ng-app="myShoppingList" ng-controller="myCtrl"&gt;\r\n&lt;ul&gt;\r\n&lt;li ng-repeat="x in products"&gt;\r\n{{x}}<strong>\r\n</strong>            &lt;span ng-click="removeItem($index)"&gt;&amp;times;&lt;/span&gt;\r\n<strong>        </strong>&lt;/li&gt;\r\n&lt;/ul&gt;\r\n&lt;input ng-model="addMe"&gt;\r\n&lt;button ng-click="addItem()"&gt;Add&lt;/button&gt;\r\n<strong>&lt;p&gt;{{errortext}}&lt;/p&gt;</strong>\r\n&lt;/div&gt;</div>\r\n</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n\r\n<hr />\r\n\r\n<h3>Step 5. Design:</h3>\r\nThe application works, but could use a better design. We use the W3.CSS stylesheet to style our application.\r\n\r\nAdd the W3.CSS stylesheet, and include the proper classes throughout the application, and the result will be the same as the shopping list at the top of this page.\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\nStyle your application using the W3.CSS stylesheet:\r\n<div class="w3-code notranslate">\r\n<div class="htmlHigh">&lt;link rel="stylesheet" href="http://www.w3schools.com/lib/w3.css"&gt;</div>\r\n</div>\r\n</div>', 'Angular Application', '', 'publish', 'closed', 'closed', '', 'angular-application', '', '', '2016-05-21 14:35:27', '2016-05-21 14:35:27', '', 0, 'http://localhost/invatacel/lessons/angular-application/', 0, 'lp_lesson', '', 0);
INSERT INTO `wp_posts` (`ID`, `post_author`, `post_date`, `post_date_gmt`, `post_content`, `post_title`, `post_excerpt`, `post_status`, `comment_status`, `ping_status`, `post_password`, `post_name`, `to_ping`, `pinged`, `post_modified`, `post_modified_gmt`, `post_content_filtered`, `post_parent`, `guid`, `menu_order`, `post_type`, `post_mime_type`, `comment_count`) VALUES
(133, 1, '2016-05-21 14:28:11', '2016-05-21 14:28:11', '<p class="intro">AngularJS binds data to HTML using <strong>Expressions</strong>.</p>\r\n\r\n\r\n<hr />\r\n\r\n<h2>AngularJS Expressions</h2>\r\nAngularJS expressions can be written inside double braces: <code>{{ <em>expression</em> }}</code>.\r\n\r\nAngularJS expressions can also be written inside a directive: <code>ng-bind="<em>expression</em>"</code>.\r\n\r\nAngularJS will resolve the expression, and return the result exactly where the expression is written.\r\n\r\n<strong>AngularJS expressions</strong> are much like <strong>JavaScript expressions:</strong> They can contain literals, operators, and variables.\r\n\r\nExample {{ 5 + 5 }} or {{ firstName + " " + lastName }}\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate htmlHigh">&lt;!DOCTYPE html&gt;\r\n&lt;html&gt;\r\n&lt;script src="http://ajax.googleapis.com/ajax/libs/angularjs/1.4.8/angular.min.js"&gt;&lt;/script&gt;\r\n&lt;body&gt;\r\n\r\n&lt;div ng-app=""&gt;\r\n&lt;p&gt;My first expression: {{ 5 + 5 }}&lt;/p&gt;\r\n&lt;/div&gt;\r\n\r\n&lt;/body&gt;\r\n&lt;/html&gt;</div>\r\n</div>\r\n<div class="w3-example"></div>\r\nIf you remove the <code>ng-app</code> directive, HTML will display the expression as it is, without solving it:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate htmlHigh">&lt;!DOCTYPE html&gt;\r\n&lt;html&gt;\r\n&lt;script src="http://ajax.googleapis.com/ajax/libs/angularjs/1.4.8/angular.min.js"&gt;&lt;/script&gt;\r\n&lt;body&gt;\r\n\r\n&lt;div&gt;\r\n&lt;p&gt;My first expression: {{ 5 + 5 }}&lt;/p&gt;\r\n&lt;/div&gt;\r\n\r\n&lt;/body&gt;\r\n&lt;/html&gt;</div>\r\n</div>\r\n<div class="w3-example"></div>\r\nYou can write expressions wherever you like, AngularJS will simply resolve the expression and return the result.\r\n\r\nExample: Let AngularJS change the value of CSS properties.\r\n\r\nChange the color of the input box below, by changing its value:\r\n<div class="ng-scope"><input class="ng-pristine ng-untouched ng-valid" type="text" value="lightblue" /></div>\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate htmlHigh">&lt;div ng-app="" ng-init="myCol=''lightblue''"&gt;\r\n\r\n&lt;input style="background-color:{{myCol}}" ng-model="myCol" value="{{myCol}}"&gt;\r\n\r\n&lt;/div&gt;</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n\r\n<hr />\r\n\r\n<h2>AngularJS Numbers</h2>\r\nAngularJS numbers are like JavaScript numbers:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate htmlHigh">&lt;div ng-app="" ng-init="quantity=1;cost=5"&gt;\r\n\r\n&lt;p&gt;Total in dollar: {{ quantity * cost }}&lt;/p&gt;\r\n\r\n&lt;/div&gt;</div>\r\n</div>\r\n<div class="w3-example"></div>\r\nSame example using <code>ng-bind</code>:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate htmlHigh">&lt;div ng-app="" ng-init="quantity=1;cost=5"&gt;\r\n\r\n&lt;p&gt;Total in dollar: &lt;span ng-bind="quantity * cost"&gt;&lt;/span&gt;&lt;/p&gt;\r\n\r\n&lt;/div&gt;</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n<table class="lamp">\r\n<tbody>\r\n<tr>\r\n<th><img src="http://www.w3schools.com/images/lamp.jpg" alt="Note" /></th>\r\n<td>Using <code>ng-init</code> is not very common. You will learn a better way to initialize data in the chapter about controllers.</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n\r\n<hr />\r\n\r\n<h2>AngularJS Strings</h2>\r\nAngularJS strings are like JavaScript strings:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate htmlHigh">&lt;div ng-app="" ng-init="firstName=''John'';lastName=''Doe''"&gt;\r\n\r\n&lt;p&gt;The name is {{ firstName + " " + lastName }}&lt;/p&gt;\r\n\r\n&lt;/div&gt;</div>\r\n</div>\r\n<div class="w3-example"></div>\r\nSame example using <code>ng-bind</code>:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate htmlHigh">&lt;div ng-app="" ng-init="firstName=''John'';lastName=''Doe''"&gt;\r\n\r\n&lt;p&gt;The name is &lt;span ng-bind="firstName + '' '' + lastName"&gt;&lt;/span&gt;&lt;/p&gt;\r\n\r\n&lt;/div&gt;</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n\r\n<hr />\r\n\r\n<h2>AngularJS Objects</h2>\r\nAngularJS objects are like JavaScript objects:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate htmlHigh">&lt;div ng-app="" ng-init="person={firstName:''John'',lastName:''Doe''}"&gt;\r\n\r\n&lt;p&gt;The name is {{ person.lastName }}&lt;/p&gt;\r\n\r\n&lt;/div&gt;</div>\r\n</div>\r\n<div class="w3-example"></div>\r\nSame example using <code>ng-bind</code>:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate htmlHigh">&lt;div ng-app="" ng-init="person={firstName:''John'',lastName:''Doe''}"&gt;\r\n\r\n&lt;p&gt;The name is &lt;span ng-bind="person.lastName"&gt;&lt;/span&gt;&lt;/p&gt;\r\n\r\n&lt;/div&gt;</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n\r\n<hr />\r\n\r\n<h2>AngularJS Arrays</h2>\r\nAngularJS arrays are like JavaScript arrays:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate htmlHigh">&lt;div ng-app="" ng-init="points=[1,15,19,2,40]"&gt;\r\n\r\n&lt;p&gt;The third result is {{ points[2] }}&lt;/p&gt;\r\n\r\n&lt;/div&gt;</div>\r\n</div>\r\n<div class="w3-example"></div>\r\nSame example using <code>ng-bind</code>:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate htmlHigh">&lt;div ng-app="" ng-init="points=[1,15,19,2,40]"&gt;\r\n\r\n&lt;p&gt;The third result is &lt;span ng-bind="points[2]"&gt;&lt;/span&gt;&lt;/p&gt;\r\n\r\n&lt;/div&gt;</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n\r\n<hr />\r\n\r\n<h2>AngularJS Expressions vs. JavaScript Expressions</h2>\r\nLike JavaScript expressions, AngularJS expressions can contain literals, operators, and variables.\r\n\r\nUnlike JavaScript expressions, AngularJS expressions can be written inside HTML.\r\n\r\nAngularJS expressions do not support conditionals, loops, and exceptions, while JavaScript expressions do.\r\n\r\nAngularJS expressions support filters, while JavaScript expressions do not.', 'Angular Expressions', '', 'inherit', 'closed', 'closed', '', '118-revision-v1', '', '', '2016-05-21 14:28:11', '2016-05-21 14:28:11', '', 118, 'http://localhost/invatacel/2016/05/21/118-revision-v1/', 0, 'revision', '', 0),
(134, 1, '2016-05-21 14:28:53', '2016-05-21 14:28:53', '<p class="intro">An AngularJS module defines an application.</p>\r\n<p class="intro">The module is a container for the different parts of an application.</p>\r\n<p class="intro">The module is a container for the application controllers.</p>\r\n<p class="intro">Controllers always belong to a module.</p>\r\n\r\n\r\n<hr />\r\n\r\n<h2>Creating a Module</h2>\r\nA module is created by using the AngularJS function <code>angular.module</code>\r\n<div class="w3-example">\r\n<div class="w3-code notranslate htmlHigh">&lt;div ng-app="myApp"&gt;...&lt;/div&gt;\r\n\r\n&lt;script&gt;\r\n\r\nvar app = angular.module("myApp", []);\r\n\r\n&lt;/script&gt;</div>\r\n</div>\r\nThe "myApp" parameter refers to an HTML element in which the application will run.\r\n\r\nNow you can add controllers, directives, filters, and more, to your AngularJS application.\r\n\r\n<hr />\r\n\r\n<h2>Adding a Controller</h2>\r\nAdd a controller to your application, and refer to the controller with the <code>ng-controller</code> directive:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate htmlHigh">&lt;div ng-app="<b>myApp</b>" ng-controller=<strong>"myCtrl"</strong>&gt;\r\n{{ firstName + " " + lastName }}\r\n&lt;/div&gt;\r\n\r\n&lt;script&gt;\r\n\r\nvar app = angular.module(<strong>"myApp"</strong>, []);\r\n\r\napp.controller(<strong>"myCtrl"</strong>, function($scope) {\r\n$scope.firstName = "John";\r\n$scope.lastName = "Doe";\r\n});\r\n\r\n&lt;/script&gt;</div>\r\n</div>\r\n<div class="w3-example"></div>\r\nYou will learn more about controllers later in this tutorial.\r\n\r\n<hr />\r\n\r\n<h2>Adding a Directive</h2>\r\nAngularJS has a set of built-in directives which you can use to add functionality to your application.\r\n\r\nFor a full reference, visit our <a href="http://www.w3schools.com/angular/angular_ref_directives.asp"> AngularJS directive reference</a>.\r\n\r\nIn addition you can use the module to add your own directives to your applications:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate htmlHigh">&lt;div ng-app="myApp" w3-test-directive&gt;&lt;/div&gt;\r\n\r\n&lt;script&gt;\r\nvar app = angular.module("myApp", []);\r\n\r\napp.directive("w3TestDirective", function() {\r\nreturn {\r\ntemplate : "I was made in a directive constructor!"\r\n};\r\n});\r\n&lt;/script&gt;</div>\r\n</div>\r\n<div class="w3-example"></div>\r\nYou will learn more about directives later in this tutorial.\r\n\r\n<hr />\r\n\r\n<h2>Modules and Controllers in Files</h2>\r\nIt is common in AngularJS applications to put the module and the controllers in JavaScript files.\r\n\r\nIn this example, "myApp.js" contains an application module definition, while "myCtrl.js" contains the controller:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate htmlHigh">&lt;!DOCTYPE html&gt;\r\n&lt;html&gt;\r\n&lt;script src="http://ajax.googleapis.com/ajax/libs/angularjs/1.4.8/angular.min.js"&gt;&lt;/script&gt;\r\n&lt;body&gt;\r\n\r\n&lt;div ng-app="<strong>myApp</strong>" ng-controller="<strong>myCtrl</strong>"&gt;\r\n{{ firstName + " " + lastName }}\r\n&lt;/div&gt;\r\n\r\n&lt;script src="<strong>myApp.js</strong>"&gt;&lt;/script&gt;\r\n&lt;script src="<strong>myCtrl.js</strong>"&gt;&lt;/script&gt;\r\n\r\n&lt;/body&gt;\r\n&lt;/html&gt;</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n<div class="w3-example">\r\n<h3>myApp.js</h3>\r\n<div class="w3-code notranslate">var app = angular.module(<strong>"myApp"</strong>, []);</div>\r\n</div>\r\n<table class="lamp">\r\n<tbody>\r\n<tr>\r\n<th><img src="http://www.w3schools.com/images/lamp.jpg" alt="Note" /></th>\r\n<td>The [] parameter in the module definition can be used to define dependent modules.</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n<table class="lamp">\r\n<tbody>\r\n<tr>\r\n<th><img src="http://www.w3schools.com/images/lamp.jpg" alt="Note" /></th>\r\n<td>Without the [] parameter, you are not <em>creating</em> a new module, but <em>retrieving</em> an existing one.</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n<div class="w3-example">\r\n<h3>myCtrl.js</h3>\r\n<div class="w3-code notranslate">app.controller(<strong>"myCtrl"</strong>, function($scope) {\r\n$scope.firstName = "John";\r\n$scope.lastName= "Doe";\r\n});</div>\r\n</div>\r\n\r\n<hr />\r\n\r\n<h2>Functions can Pollute the Global Namespace</h2>\r\nGlobal functions should be avoided in JavaScript. They can easily be overwritten or destroyed by other scripts.\r\n\r\nAngularJS modules reduces this problem, by keeping all functions local to the module.\r\n\r\n<hr />\r\n\r\n<h2>When to Load the Library</h2>\r\nWhile it is common in HTML applications to place scripts at the end of the <code>&lt;body&gt;</code> element, it is recommended that you load the AngularJS library either in the <code>&lt;head&gt;</code> or at the start of the <code>&lt;body&gt;</code>.\r\n\r\nThis is because calls to <code>angular.module</code> can only be compiled after the library has been loaded.\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate htmlHigh">&lt;!DOCTYPE html&gt;\r\n&lt;html&gt;\r\n&lt;body&gt;\r\n&lt;script src="http://ajax.googleapis.com/ajax/libs/angularjs/1.4.8/angular.min.js"&gt;&lt;/script&gt;\r\n\r\n&lt;div ng-app="myApp" ng-controller="myCtrl"&gt;\r\n{{ firstName + " " + lastName }}\r\n&lt;/div&gt;\r\n\r\n&lt;script&gt;\r\nvar app = angular.module("myApp", []);\r\napp.controller("myCtrl", function($scope) {\r\n$scope.firstName = "John";\r\n$scope.lastName = "Doe";\r\n});\r\n&lt;/script&gt;\r\n\r\n&lt;/body&gt;\r\n&lt;/html&gt;</div>\r\n</div>', 'Angular Modules', '', 'inherit', 'closed', 'closed', '', '119-revision-v1', '', '', '2016-05-21 14:28:53', '2016-05-21 14:28:53', '', 119, 'http://localhost/invatacel/2016/05/21/119-revision-v1/', 0, 'revision', '', 0),
(135, 1, '2016-05-21 14:29:45', '2016-05-21 14:29:45', '<p class="intro">AngularJS lets you extend HTML with new attributes called <strong> Directives</strong>.</p>\r\n<p class="intro">AngularJS has a set of built-in directives which offers functionality to your applications.</p>\r\n<p class="intro">AngularJS also lets you define your own directives.</p>\r\n\r\n\r\n<hr />\r\n\r\n<h2>AngularJS Directives</h2>\r\nAngularJS directives are extended HTML attributes with the prefix <code>ng-</code>.\r\n\r\nThe <code>ng-app</code> directive initializes an AngularJS application.\r\n\r\nThe <code>ng-init</code> directive initializes application data.\r\n\r\nThe <code>ng-model</code> directive binds the value of HTML controls (input, select, textarea) to application data.\r\n\r\nRead about all AngularJS directives in our <a href="http://www.w3schools.com/angular/angular_ref_directives.asp">AngularJS directive reference</a>.\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate htmlHigh">&lt;div ng-app="" ng-init="firstName=''John''"&gt;\r\n\r\n&lt;p&gt;Name: &lt;input type="text" ng-model="firstName"&gt;&lt;/p&gt;\r\n&lt;p&gt;You wrote: {{ firstName }}&lt;/p&gt;\r\n\r\n&lt;/div&gt;</div>\r\n</div>\r\n<div class="w3-example"></div>\r\nThe <code>ng-app</code> directive also tells AngularJS that the &lt;div&gt; element is the "owner" of the AngularJS application.\r\n\r\n<hr />\r\n\r\n<h2>Data Binding</h2>\r\nThe <code>{{ firstName }}</code> expression, in the example above, is an AngularJS data binding expression.\r\n\r\nData binding in AngularJS binds AngularJS expressions with AngularJS data.\r\n\r\n<code>{{ firstName }}</code> is bound with <code>ng-model="firstName"</code>.\r\n\r\nIn the next example two text fields are bound together with two ng-model directives:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate htmlHigh">&lt;div ng-app="" ng-init="quantity=1;price=5"&gt;\r\n\r\nQuantity: &lt;input type="number" ng-model="quantity"&gt;\r\nCosts:    &lt;input type="number" ng-model="price"&gt;\r\n\r\nTotal in dollar: {{ quantity * price }}\r\n\r\n&lt;/div&gt;</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n<table class="lamp">\r\n<tbody>\r\n<tr>\r\n<th><img src="http://www.w3schools.com/images/lamp.jpg" alt="Note" /></th>\r\n<td>Using <code>ng-init</code> is not very common. You will learn how to initialize data in the chapter about controllers.</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n\r\n<hr />\r\n\r\n<h2>Repeating HTML Elements</h2>\r\nThe <code>ng-repeat</code> directive repeats an HTML element:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate htmlHigh">&lt;div ng-app="" ng-init="names=[''Jani'',''Hege'',''Kai'']"&gt;\r\n&lt;ul&gt;\r\n&lt;li ng-repeat="x in names"&gt;\r\n{{ x }}\r\n&lt;/li&gt;\r\n&lt;/ul&gt;\r\n&lt;/div&gt;</div>\r\n</div>\r\n<div class="w3-example"></div>\r\nThe <code>ng-repeat</code> directive actually <strong>clones HTML elements</strong> once for each item in a collection.\r\n\r\nThe <code>ng-repeat</code> directive used on an array of objects:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate htmlHigh">&lt;div ng-app="" ng-init="names=[\r\n{name:''Jani'',country:''Norway''},\r\n{name:''Hege'',country:''Sweden''},\r\n{name:''Kai'',country:''Denmark''}]"&gt;\r\n\r\n&lt;ul&gt;\r\n&lt;li ng-repeat="x in names"&gt;\r\n{{ x.name + '', '' + x.country }}\r\n&lt;/li&gt;\r\n&lt;/ul&gt;\r\n\r\n&lt;/div&gt;</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n<table class="lamp">\r\n<tbody>\r\n<tr>\r\n<th><img src="http://www.w3schools.com/images/lamp.jpg" alt="Note" /></th>\r\n<td>AngularJS is perfect for database CRUD (Create Read Update Delete) applications.\r\nJust imagine if these objects were records from a database.</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n\r\n<hr />\r\n\r\n<h2>The ng-app Directive</h2>\r\nThe <code>ng-app</code> directive defines the <strong>root element</strong> of an AngularJS application.\r\n\r\nThe <code>ng-app</code> directive will <strong>auto-bootstrap</strong> (automatically initialize) the application when a web page is loaded.\r\n\r\n<hr />\r\n\r\n<h2>The ng-init Directive</h2>\r\nThe <code>ng-init</code> directive defines <strong>initial values</strong> for an AngularJS application.\r\n\r\nNormally, you will not use ng-init. You will use a controller or module instead.\r\n\r\nYou will learn more about controllers and modules later.\r\n\r\n<hr />\r\n\r\n<h2>The ng-model Directive</h2>\r\nThe <code>ng-model</code> directive binds the value of HTML controls (input, select, textarea) to application data.\r\n\r\nThe <code>ng-model</code> directive can also:\r\n<ul>\r\n 	<li>Provide type validation for application data (number, email, required).</li>\r\n 	<li>Provide status for application data (invalid, dirty, touched, error).</li>\r\n 	<li>Provide CSS classes for HTML elements.</li>\r\n 	<li>Bind HTML elements to HTML forms.</li>\r\n</ul>\r\nRead more about the <code>ng-model</code> directive in the next chapter.\r\n\r\n<hr />\r\n\r\n<h2>Create New Directives</h2>\r\nIn addition to all the built-in AngularJS directives, you can create your own directives.\r\n\r\nNew directives are created by using the <code>.directive</code> function.\r\n\r\nTo invoke the new directive, make an HTML element with the same tag name as the new directive.\r\n\r\nWhen naming a directive, you must use a camel case name, <code> w3TestDirective</code>, but when invoking it, you must use <code>-</code> separated name, <code>w3-test-directive</code>:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate">\r\n<div class="htmlHigh">&lt;body ng-app="myApp"&gt;\r\n\r\n&lt;w3-test-directive&gt;&lt;/w3-test-directive&gt;\r\n\r\n&lt;script&gt;\r\nvar app = angular.module("myApp", []);\r\napp.directive("w3TestDirective", function() {\r\nreturn {\r\ntemplate : "&lt;h1&gt;Made by a directive!&lt;/h1&gt;"\r\n};\r\n});\r\n&lt;/script&gt;\r\n\r\n&lt;/body&gt;</div>\r\n</div>\r\n</div>\r\n<div class="w3-example"></div>\r\nYou can invoke a directive by using:\r\n<ul>\r\n 	<li>Element name</li>\r\n 	<li>Attribute</li>\r\n 	<li>Class</li>\r\n 	<li>Comment</li>\r\n</ul>\r\nThe examples below will all produce the same result:\r\n<div class="w3-example">\r\n\r\nElement name\r\n<div class="w3-code notranslate">\r\n<div class="htmlHigh">&lt;w3-test-directive&gt;&lt;/w3-test-directive&gt;</div>\r\n</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n<div class="w3-example">\r\n\r\nAttribute\r\n<div class="w3-code notranslate">\r\n<div class="htmlHigh">&lt;div w3-test-directive&gt;&lt;/div&gt;</div>\r\n</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n<div class="w3-example">\r\n\r\nClass\r\n<div class="w3-code notranslate">\r\n<div class="htmlHigh">&lt;div class="w3-test-directive"&gt;&lt;/div&gt;</div>\r\n</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n<div class="w3-example">\r\n\r\nComment\r\n<div class="w3-code notranslate">\r\n<div class="htmlHigh">&lt;!-- directive: w3-test-directive --&gt;</div>\r\n</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n\r\n<hr />\r\n\r\n<h2>Restrictions</h2>\r\nYou can restrict your directives to only be invoked by some of the methods.\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\nBy adding a <code>restrict</code> property with the value <code>"A"</code>, the directive can only be invoked by attributes:\r\n<div class="w3-code notranslate">\r\n<div class="jsHigh">var app = angular.module("myApp", []);\r\napp.directive("w3TestDirective", function() {\r\nreturn {\r\nrestrict : "A",\r\ntemplate : "&lt;h1&gt;Made by a directive!&lt;/h1&gt;"\r\n};\r\n});</div>\r\n</div>\r\n</div>\r\n<div class="w3-example"></div>\r\nThe legal restrict values are:\r\n<ul>\r\n 	<li><code>E</code> for Element name</li>\r\n 	<li><code>A</code> for Attribute</li>\r\n 	<li><code>C</code> for Class</li>\r\n 	<li><code>M</code> for Comment</li>\r\n</ul>\r\nBy default the value is <code>EA</code>, meaning that both Element names and attribute names can invoke the directive.', 'Angular Directives', '', 'inherit', 'closed', 'closed', '', '120-revision-v1', '', '', '2016-05-21 14:29:45', '2016-05-21 14:29:45', '', 120, 'http://localhost/invatacel/2016/05/21/120-revision-v1/', 0, 'revision', '', 0),
(136, 1, '2016-05-21 14:30:23', '2016-05-21 14:30:23', '<p class="intro">The ng-model directive binds the value of HTML controls (input, select, textarea) to application data.</p>\r\n\r\n\r\n<hr />\r\n\r\n<h2>The ng-model Directive</h2>\r\nWith the <code>ng-model</code> directive you can bind the value of an input field to a variable created in AngularJS.\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate htmlHigh">&lt;div ng-app="myApp" ng-controller="myCtrl"&gt;\r\nName: &lt;input ng-model="name"&gt;\r\n&lt;/div&gt;\r\n\r\n&lt;script&gt;\r\nvar app = angular.module(''myApp'', []);\r\napp.controller(''myCtrl'', function($scope) {\r\n$scope.name = "John Doe";\r\n});\r\n&lt;/script&gt;</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n\r\n<hr />\r\n\r\n<h2>Two-Way Binding</h2>\r\nThe binding goes both ways. If the user changes the value inside the input field, the AngularJS property will also change its value:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate htmlHigh">&lt;div ng-app="myApp" ng-controller="myCtrl"&gt;\r\nName: &lt;input ng-model="name"&gt;\r\n&lt;h1&gt;You entered: {{name}}&lt;/h1&gt;\r\n&lt;/div&gt;</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n\r\n<hr />\r\n\r\n<h2>Validate User Input</h2>\r\nThe <code>ng-model</code> directive can provide type validation for application data (number, e-mail, required):\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate htmlHigh">&lt;form ng-app="" name="myForm"&gt;\r\nEmail:\r\n&lt;input type="email" name="myAddress" ng-model="text"&gt;\r\n&lt;span ng-show="myForm.myAddress.$error.email"&gt;Not a valid e-mail address&lt;/span&gt;\r\n&lt;/form&gt;</div>\r\n</div>\r\n<div class="w3-example"></div>\r\nIn the example above, the span will be displayed only if the expression in the <code>ng-show</code> attribute returns <code>true</code>.\r\n<table class="lamp">\r\n<tbody>\r\n<tr>\r\n<th><img src="http://www.w3schools.com/images/lamp.jpg" alt="Note" /></th>\r\n<td>If the property in the <code>ng-model</code> attribute does not exist, AngularJS will create one for you.</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n\r\n<hr />\r\n\r\n<h2>Application Status</h2>\r\nThe <code>ng-model</code> directive can provide status for application data (invalid, dirty, touched, error):\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate htmlHigh">&lt;form ng-app="" name="myForm" ng-init="myText = ''post@myweb.com''"&gt;\r\nEmail:\r\n&lt;input type="email" name="myAddress" ng-model="myText" required&gt;\r\n&lt;h1&gt;Status&lt;/h1&gt;\r\n{{myForm.myAddress.$valid}}\r\n{{myForm.myAddress.$dirty}}\r\n{{myForm.myAddress.$touched}}\r\n&lt;/form&gt;</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n\r\n<hr />\r\n\r\n<h2>CSS Classes</h2>\r\nThe <code>ng-model</code> directive provides CSS classes for HTML elements, depending on their status:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate">\r\n<div class="htmlHigh">&lt;style&gt;</div>\r\n<div class="cssHigh">input.ng-invalid {\r\nbackground-color: lightblue;\r\n}</div>\r\n<div class="htmlHigh">&lt;/style&gt;\r\n&lt;body&gt;\r\n\r\n&lt;form ng-app="" name="myForm"&gt;\r\nEnter your name:\r\n&lt;input name="myAddress" ng-model="text" required&gt;\r\n&lt;/form&gt;</div>\r\n</div>\r\n</div>\r\n<div class="w3-example"></div>\r\nThe <code>ng-model</code> directive adds/removes the following classes, according to the status of the form field:\r\n<ul>\r\n 	<li>ng-empty</li>\r\n 	<li>ng-not-empty</li>\r\n 	<li>ng-touched</li>\r\n 	<li>ng-untouched</li>\r\n 	<li>ng-valid</li>\r\n 	<li>ng-invalid</li>\r\n 	<li>ng-dirty</li>\r\n 	<li>ng-pending</li>\r\n 	<li>ng-pristine</li>\r\n</ul>', 'Angular Model', '', 'inherit', 'closed', 'closed', '', '121-revision-v1', '', '', '2016-05-21 14:30:23', '2016-05-21 14:30:23', '', 121, 'http://localhost/invatacel/2016/05/21/121-revision-v1/', 0, 'revision', '', 0),
(137, 1, '2016-05-21 14:30:50', '2016-05-21 14:30:50', 'Data binding in AngularJS is the synchronization between the model and the view.\r\n\r\n<hr />\r\n\r\n<h2>Data Model</h2>\r\nAngularJS applications usually have a data model. The data model is a collection of data available for the application.\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate jsHigh">var app = angular.module(''myApp'', []);\r\napp.controller(''myCtrl'', function($scope) {\r\n$scope.firstname = "John";\r\n$scope.lastname = "Doe";\r\n});</div>\r\n</div>\r\n\r\n<hr />\r\n\r\n<h2>HTML View</h2>\r\nThe HTML container where the AngularJS application is displayed, is called the view.\r\n\r\nThe view has access to the model, and there are several ways of displaying model data in the view.\r\n\r\nYou can use the <code>ng-bind</code> directive, which will bind the innerHTML of the element to the specified model property:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate htmlHigh">&lt;p ng-bind="firstname"&gt;&lt;/p&gt;</div>\r\n</div>\r\n<div class="w3-example"></div>\r\nYou can also use double braces <code>{{ }}</code> to display content from the model:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate htmlHigh">&lt;p&gt;First name: {{firstname}}&lt;/p&gt;</div>\r\n</div>\r\n<div class="w3-example"></div>\r\nOr you can use the <code>ng-model</code> directive on HTML controls to bind the model to the view.\r\n\r\n<hr />\r\n\r\n<h2>The <code>ng-model</code> Directive</h2>\r\nUse the <code>ng-model</code> directive to bind data from the model to the view on HTML controls (input, select, textarea)\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate htmlHigh">&lt;input ng-model="firstname"&gt;</div>\r\n</div>\r\n<div class="w3-example"></div>\r\nThe <code>ng-model</code> directive provides a two-way binding between the model and the view.\r\n\r\n<hr />\r\n\r\n<h2>Two-way Binding</h2>\r\nData binding in AngularJS is the synchronization between the model and the view.\r\n\r\nWhen data in the <em>model</em> changes, the <em>view</em> reflects the change, and when data in the <em>view</em> changes, the <em>model</em> is updated as well. This happens immediately and automatically, which makes sure that the model and the view is updated at all times.\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate">\r\n<div class="htmlHigh">&lt;div ng-app="myApp" ng-controller="myCtrl"&gt;\r\nName: &lt;input ng-model="firstname"&gt;\r\n&lt;h1&gt;{{firstname}}&lt;/h1&gt;\r\n&lt;/div&gt;\r\n\r\n&lt;script&gt;</div>\r\n<div class="jsHigh">var app = angular.module(''myApp'', []);\r\napp.controller(''myCtrl'', function($scope) {\r\n$scope.firstname = "John";\r\n$scope.lastname = "Doe";\r\n});</div>\r\n<div class="htmlHigh">&lt;/script&gt;</div>\r\n</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n\r\n<hr />\r\n\r\n<h2>AngularJS Controller</h2>\r\nApplications in AngularJS are controlled by controllers. Read about controllers in the <a href="http://www.w3schools.com/angular/angular_controllers.asp">AngularJS Controllers</a> chapter.\r\n\r\nBecause of the immediate synchronization of the model and the view, the controller can be completely separated from the view, and simply concentrate on the model data. Thanks to the data binding in AngularJS, the view will reflect any changes made in the controller.\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate">\r\n<div class="htmlHigh">&lt;div ng-app="myApp" ng-controller="myCtrl"&gt;\r\n&lt;h1 ng-click="changeName()"&gt;{{firstname}}&lt;/h1&gt;\r\n&lt;/div&gt;\r\n\r\n&lt;script&gt;</div>\r\n<div class="jsHigh">var app = angular.module(''myApp'', []);\r\napp.controller(''myCtrl'', function($scope) {\r\n$scope.changeName = function() {\r\n$scope.firstname = "Nelly";\r\n}\r\n});</div>\r\n<div class="htmlHigh">&lt;/script&gt;</div>\r\n</div>\r\n</div>', 'Angular Data Binding', '', 'inherit', 'closed', 'closed', '', '122-revision-v1', '', '', '2016-05-21 14:30:50', '2016-05-21 14:30:50', '', 122, 'http://localhost/invatacel/2016/05/21/122-revision-v1/', 0, 'revision', '', 0),
(138, 1, '2016-05-21 14:31:13', '2016-05-21 14:31:13', '<p class="intro">AngularJS controllers <strong>control the data</strong> of AngularJS applications.</p>\r\n<p class="intro">AngularJS controllers are regular <strong>JavaScript Objects</strong>.</p>\r\n\r\n\r\n<hr />\r\n\r\n<h2>AngularJS Controllers</h2>\r\nAngularJS applications are controlled by controllers.\r\n\r\nThe <strong>ng-controller</strong> directive defines the application controller.\r\n\r\nA controller is a <strong>JavaScript Object</strong>, created by a standard JavaScript <strong>object constructor</strong>.\r\n<div class="w3-example">\r\n<h3>AngularJS Example</h3>\r\n<div class="w3-code notranslate htmlHigh">&lt;div ng-app="myApp" ng-controller="myCtrl"&gt;\r\n\r\nFirst Name: &lt;input type="text" ng-model="firstName"&gt;&lt;br&gt;\r\nLast Name: &lt;input type="text" ng-model="lastName"&gt;&lt;br&gt;\r\n&lt;br&gt;\r\nFull Name: {{firstName + " " + lastName}}\r\n\r\n&lt;/div&gt;\r\n\r\n&lt;script&gt;\r\nvar app = angular.module(''myApp'', []);\r\napp.controller(''myCtrl'', function($scope) {\r\n$scope.firstName = "John";\r\n$scope.lastName = "Doe";\r\n});\r\n&lt;/script&gt;</div>\r\n</div>\r\n<div class="w3-example"></div>\r\nApplication explained:\r\n\r\nThe AngularJS application is defined by  <strong>ng-app="myApp"</strong>. The application runs inside the &lt;div&gt;.\r\n\r\nThe <strong>ng-controller="myCtrl"</strong> attribute is an AngularJS directive. It defines a controller.\r\n\r\nThe <strong>myCtrl</strong> function is a JavaScript function.\r\n\r\nAngularJS will invoke the controller with a <strong>$scope</strong> object.\r\n\r\nIn AngularJS, $scope is the application object (the owner of application variables and functions).\r\n\r\nThe controller creates two properties (variables) in the scope (<strong>firstName</strong> and <strong>lastName</strong>).\r\n\r\nThe <strong>ng-model</strong> directives bind the input fields to the controller properties (firstName and lastName).\r\n\r\n<hr />\r\n\r\n<h2>Controller Methods</h2>\r\nThe example above demonstrated a controller object with two properties: lastName and firstName.\r\n\r\nA controller can also have methods (variables as functions):\r\n<div class="w3-example">\r\n<h3>AngularJS Example</h3>\r\n<div class="w3-code notranslate htmlHigh">&lt;div ng-app="myApp" ng-controller="personCtrl"&gt;\r\n\r\nFirst Name: &lt;input type="text" ng-model="firstName"&gt;&lt;br&gt;\r\nLast Name: &lt;input type="text" ng-model="lastName"&gt;&lt;br&gt;\r\n&lt;br&gt;\r\nFull Name: {{fullName()}}\r\n\r\n&lt;/div&gt;\r\n\r\n&lt;script&gt;\r\nvar app = angular.module(''myApp'', []);\r\napp.controller(''personCtrl'', function($scope) {\r\n$scope.firstName = "John";\r\n$scope.lastName = "Doe";\r\n$scope.fullName = function() {\r\nreturn $scope.firstName + " " + $scope.lastName;\r\n};\r\n});\r\n&lt;/script&gt;</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n\r\n<hr />\r\n\r\n<h2>Controllers In External Files</h2>\r\nIn larger applications, it is common to store controllers in external files.\r\n\r\nJust copy the code between the &lt;script&gt; tags into an external file named <a href="http://www.w3schools.com/angular/personController.js" target="_blank">personController.js</a>:\r\n<div class="w3-example">\r\n<h3>AngularJS Example</h3>\r\n<div class="w3-code notranslate htmlHigh">&lt;div ng-app="myApp" ng-controller="personCtrl"&gt;\r\n\r\nFirst Name: &lt;input type="text" ng-model="firstName"&gt;&lt;br&gt;\r\nLast Name: &lt;input type="text" ng-model="lastName"&gt;&lt;br&gt;\r\n&lt;br&gt;\r\nFull Name: {{fullName()}}\r\n\r\n&lt;/div&gt;\r\n\r\n&lt;script src="personController.js"&gt;&lt;/script&gt;</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n\r\n<hr />\r\n\r\n<h2>Another Example</h2>\r\nFor the next example we will create a new controller file:\r\n<div class="w3-example">\r\n<div class="w3-code notranslate htmlHigh">angular.module(''myApp'', []).controller(''namesCtrl'', function($scope) {\r\n$scope.names = [\r\n{name:''Jani'',country:''Norway''},\r\n{name:''Hege'',country:''Sweden''},\r\n{name:''Kai'',country:''Denmark''}\r\n];\r\n});</div>\r\n</div>\r\nSave the file as  <a href="http://www.w3schools.com/angular/namesController.js" target="_blank">namesController.js</a>:\r\n\r\nAnd then use the controller file in an application:\r\n<div class="w3-example">\r\n<h3>AngularJS Example</h3>\r\n<div class="w3-code notranslate htmlHigh">&lt;div ng-app="myApp" ng-controller="namesCtrl"&gt;\r\n\r\n&lt;ul&gt;\r\n&lt;li ng-repeat="x in names"&gt;\r\n{{ x.name + '', '' + x.country }}\r\n&lt;/li&gt;\r\n&lt;/ul&gt;\r\n\r\n&lt;/div&gt;\r\n\r\n&lt;script src="namesController.js"&gt;&lt;/script&gt;</div>\r\n</div>', 'Angular Controllers', '', 'inherit', 'closed', 'closed', '', '123-revision-v1', '', '', '2016-05-21 14:31:13', '2016-05-21 14:31:13', '', 123, 'http://localhost/invatacel/2016/05/21/123-revision-v1/', 0, 'revision', '', 0),
(139, 1, '2016-05-21 14:31:47', '2016-05-21 14:31:47', '<p class="intro">The scope is the binding part between the HTML (view) and the JavaScript (controller).</p>\r\n<p class="intro">The scope is an object with the available properties and methods.</p>\r\n<p class="intro">The scope is available for both the view and the controller.</p>\r\n\r\n\r\n<hr />\r\n\r\n<h2>How to Use the Scope?</h2>\r\nWhen you make a controller in AngularJS, you pass the <code>$scope</code> object as an argument:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\nProperties made in the controller, can be referred to in the view:\r\n<div class="w3-code notranslate">\r\n<div class="htmlHigh">&lt;div ng-app="myApp" ng-controller="myCtrl"&gt;\r\n\r\n&lt;h1&gt;{{carname}}&lt;/h1&gt;\r\n\r\n&lt;/div&gt;\r\n\r\n&lt;script&gt;</div>\r\n<div class="jsHigh">var app = angular.module(''myApp'', []);\r\n\r\napp.controller(''myCtrl'', function($scope) {\r\n$scope.carname = "Volvo";\r\n});</div>\r\n<div class="htmlHigh">&lt;/script&gt;</div>\r\n</div>\r\n</div>\r\n<div class="w3-example"></div>\r\nWhen adding properties to the <code>$scope</code> object in the controller, the view (HTML) gets access to these properties.\r\n\r\nIn the view, you do not use the prefix <code>$scope</code>, you just refer to a propertyname, like <code>{{carname}}</code>.\r\n\r\n<hr />\r\n\r\n<h2>Understanding the Scope</h2>\r\nIf we consider an AngularJS application to consist of:\r\n<ul>\r\n 	<li>View, which is the HTML.</li>\r\n 	<li>Model, which is the data available for the current view.</li>\r\n 	<li>Controller, which is the JavaScript function that makes/changes/removes/controls the data.</li>\r\n</ul>\r\nThen the scope is the Model.\r\n\r\nThe scope is a JavaScript object with properties and methods, which are available for both the view and the controller.\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\nIf you make changes in the view, the model and the controller will be updated:\r\n<div class="w3-code notranslate">\r\n<div class="htmlHigh">&lt;div ng-app="myApp" ng-controller="myCtrl"&gt;\r\n\r\n&lt;input ng-model="name"&gt;\r\n\r\n&lt;h1&gt;My name is {{name}}&lt;/h1&gt;\r\n\r\n&lt;/div&gt;\r\n\r\n&lt;script&gt;</div>\r\n<div class="jsHigh">var app = angular.module(''myApp'', []);\r\n\r\napp.controller(''myCtrl'', function($scope) {\r\n$scope.name = "John Doe";\r\n});</div>\r\n<div class="htmlHigh">&lt;/script&gt;</div>\r\n</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n\r\n<hr />\r\n\r\n<h2>Know Your Scope</h2>\r\nIt is important to know which scope you are dealing with, at any time.\r\n\r\nIn the two examples above there is only one scope, so knowing your scope is not an issue, but for larger applications there can be sections in the HTML DOM which can only access certain scopes.\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\nWhen dealing with the <code>ng-repeat</code> directive, each repetition has access to the current repetition object:\r\n<div class="w3-code notranslate">\r\n<div class="htmlHigh">&lt;div ng-app="myApp" ng-controller="myCtrl"&gt;\r\n\r\n&lt;ul&gt;\r\n&lt;li ng-repeat="x in names"&gt;{{x}}&lt;/li&gt;\r\n&lt;/ul&gt;\r\n\r\n&lt;/div&gt;\r\n\r\n&lt;script&gt;</div>\r\n<div class="jsHigh">var app = angular.module(''myApp'', []);\r\n\r\napp.controller(''myCtrl'', function($scope) {\r\n$scope.names = ["Emil", "Tobias", "Linus"];\r\n});</div>\r\n<div class="htmlHigh">&lt;/script&gt;</div>\r\n</div>\r\n</div>\r\n<div class="w3-example"></div>\r\nEach <code>&lt;li&gt;</code> element has access to the current repetition object, in this case a string, which is referred to by using <code>x</code>.\r\n\r\n<hr />\r\n\r\n<h2>Root Scope</h2>\r\nAll applications have a <code>$rootScope</code> which is the scope created on the HTML element that contains the <code>ng-app</code> directive.\r\n\r\nThe rootScope is available in the entire application.\r\n\r\nIf a variable has the same name in both the current scope and in the rootScope, the application use the one in the current scope.\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\nA variable named "color" exists in both the controller''s scope and in the rootScope:\r\n<div class="w3-code notranslate">\r\n<div class="htmlHigh">&lt;body ng-app="myApp"&gt;\r\n\r\n&lt;p&gt;The rootScope''s favorite color:&lt;/p&gt;\r\n&lt;h1&gt;{{color}}&lt;/h1&gt;\r\n\r\n&lt;div ng-controller="myCtrl"&gt;\r\n&lt;p&gt;The scope of the controller''s favorite color:&lt;/p&gt;\r\n&lt;h1&gt;{{color}}&lt;/h1&gt;\r\n&lt;/div&gt;\r\n\r\n&lt;p&gt;The rootScope''s favorite color is still:&lt;/p&gt;\r\n&lt;h1&gt;{{color}}&lt;/h1&gt;\r\n\r\n&lt;script&gt;</div>\r\n<div class="jsHigh">var app = angular.module(''myApp'', []);\r\napp.run(function($rootScope) {\r\n$rootScope.color = ''blue'';\r\n});\r\napp.controller(''myCtrl'', function($scope) {\r\n$scope.color = "red";\r\n});</div>\r\n<div class="htmlHigh">&lt;/script&gt;\r\n&lt;/body&gt;</div>\r\n</div>\r\n</div>', 'Angular Scopes', '', 'inherit', 'closed', 'closed', '', '124-revision-v1', '', '', '2016-05-21 14:31:47', '2016-05-21 14:31:47', '', 124, 'http://localhost/invatacel/2016/05/21/124-revision-v1/', 0, 'revision', '', 0),
(140, 1, '2016-05-21 14:32:17', '2016-05-21 14:32:17', '<p class="intro">Filters can be added in AngularJS to format data.</p>\r\n\r\n\r\n<hr />\r\n\r\n<h2>AngularJS Filters</h2>\r\nAngularJS provides filters to transform data:\r\n<ul>\r\n 	<li><code>currency</code> Format a number to a currency format.</li>\r\n 	<li><code>date</code> Format a date to a specified format.</li>\r\n 	<li><code>filter</code> Select a subset of items from an array.</li>\r\n 	<li><code>json</code> Format an object to a JSON string.</li>\r\n 	<li><code>limitTo</code> Limits an array/string, into a specified number of elements/characters.</li>\r\n 	<li><code>lowercase</code> Format a string to lower case.</li>\r\n 	<li><code>number</code> Format a number to a string.</li>\r\n 	<li><code>orderBy</code> Orders an array by an expression.</li>\r\n 	<li><code>uppercase</code> Format a string to upper case.</li>\r\n</ul>\r\n\r\n<hr />\r\n\r\n<h2>Adding Filters to Expressions</h2>\r\nFilters can be added to expressions by using the pipe character <code>|</code>, followed by a filter.\r\n\r\nThe <code>uppercase</code> filter format strings to upper case:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate htmlHigh">&lt;div ng-app="myApp" ng-controller="personCtrl"&gt;\r\n\r\n&lt;p&gt;The name is {{ lastName | uppercase }}&lt;/p&gt;\r\n\r\n&lt;/div&gt;</div>\r\n</div>\r\n<div class="w3-example"></div>\r\nThe <code>lowercase</code> filter format strings to lower case:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate htmlHigh">&lt;div ng-app="myApp" ng-controller="personCtrl"&gt;\r\n\r\n&lt;p&gt;The name is {{ lastName | lowercase }}&lt;/p&gt;\r\n\r\n&lt;/div&gt;</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n\r\n<hr />\r\n\r\n<h2>Adding Filters to Directives</h2>\r\nFilters are added to directives, like <code>ng-repeat</code>, by using the pipe character <code>|</code>, followed by a filter:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\nThe <code>orderBy</code> filter sorts an array:\r\n<div class="w3-code notranslate htmlHigh">&lt;div ng-app="myApp" ng-controller="namesCtrl"&gt;\r\n\r\n&lt;ul&gt;\r\n&lt;li ng-repeat="x in names | orderBy:''country''"&gt;\r\n{{ x.name + '', '' + x.country }}\r\n&lt;/li&gt;\r\n&lt;/ul&gt;\r\n\r\n&lt;/div&gt;</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n\r\n<hr />\r\n\r\n<h2>The currency Filter</h2>\r\nThe <code>currency</code> filter formats a number as currency:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate htmlHigh">&lt;div ng-app="myApp" ng-controller="costCtrl"&gt;\r\n\r\n&lt;h1&gt;Price: {{ price | currency }}&lt;/h1&gt;\r\n\r\n&lt;/div&gt;</div>\r\n</div>\r\n<div class="w3-example"></div>\r\nRead more about the currency filter in our <a href="http://www.w3schools.com/angular/ng_filter_currency.asp">AngularJS currency Filter Reference</a>\r\n\r\n<hr />\r\n\r\n<h2>The filter Filter</h2>\r\nThe <code>filter</code> filter selects a subset of an array.\r\n\r\nThe <code>filter</code> filter can only be used on arrays, and it returns an array containing only the matching items.\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\nReturn the names that contains the letter "i":\r\n<div class="w3-code notranslate htmlHigh">&lt;div ng-app="myApp" ng-controller="namesCtrl"&gt;\r\n\r\n&lt;ul&gt;\r\n&lt;li ng-repeat="x in names | filter : ''i''"&gt;\r\n{{ x }}\r\n&lt;/li&gt;\r\n&lt;/ul&gt;\r\n\r\n&lt;/div&gt;</div>\r\n</div>\r\n<div class="w3-example"></div>\r\nRead more about the filter filter in our <a href="http://www.w3schools.com/angular/ng_filter_filter.asp">AngularJS filter Filter Reference</a>\r\n\r\n<hr />\r\n\r\n<h2>Filter an Array Based on User Input</h2>\r\nBy setting the <code>ng-model</code> directive on an input field, we can use the value of the input field as an expression in a filter.\r\n\r\nType a letter in the input field, and the list will shrink/grow depending on the match:\r\n<div class="ng-scope">\r\n<div class="ng-scope"><input class="ng-pristine ng-untouched ng-valid" type="text" />\r\n<ul>\r\n 	<li class="ng-binding ng-scope">Jani</li>\r\n 	<li class="ng-binding ng-scope">Carl</li>\r\n 	<li class="ng-binding ng-scope">Margareth</li>\r\n 	<li class="ng-binding ng-scope">Hege</li>\r\n 	<li class="ng-binding ng-scope">Joe</li>\r\n 	<li class="ng-binding ng-scope">Gustav</li>\r\n 	<li class="ng-binding ng-scope">Birgit</li>\r\n 	<li class="ng-binding ng-scope">Mary</li>\r\n 	<li class="ng-binding ng-scope">Kai</li>\r\n</ul>\r\n</div>\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate htmlHigh">&lt;div ng-app="myApp" ng-controller="namesCtrl"&gt;\r\n\r\n&lt;p&gt;&lt;input type="text" ng-model="test"&gt;&lt;/p&gt;\r\n\r\n&lt;ul&gt;\r\n&lt;li ng-repeat="x in names | filter : test"&gt;\r\n{{ x }}\r\n&lt;/li&gt;\r\n&lt;/ul&gt;\r\n\r\n&lt;/div&gt;</div>\r\n</div>\r\n</div>\r\n<div class="ng-scope">\r\n<div class="w3-example"></div>\r\n\r\n<hr />\r\n\r\n<h2>Sort an Array Based on User Input</h2>\r\nClick the table headers to change the sort order::\r\n<div class="ng-scope">\r\n<table class="w3-table-all">\r\n<tbody>\r\n<tr>\r\n<th>Name</th>\r\n<th>Country</th>\r\n</tr>\r\n<tr class="ng-scope">\r\n<td class="ng-binding">Jani</td>\r\n<td class="ng-binding">Norway</td>\r\n</tr>\r\n<tr class="ng-scope">\r\n<td class="ng-binding">Carl</td>\r\n<td class="ng-binding">Sweden</td>\r\n</tr>\r\n<tr class="ng-scope">\r\n<td class="ng-binding">Margareth</td>\r\n<td class="ng-binding">England</td>\r\n</tr>\r\n<tr class="ng-scope">\r\n<td class="ng-binding">Hege</td>\r\n<td class="ng-binding">Norway</td>\r\n</tr>\r\n<tr class="ng-scope">\r\n<td class="ng-binding">Joe</td>\r\n<td class="ng-binding">Denmark</td>\r\n</tr>\r\n<tr class="ng-scope">\r\n<td class="ng-binding">Gustav</td>\r\n<td class="ng-binding">Sweden</td>\r\n</tr>\r\n<tr class="ng-scope">\r\n<td class="ng-binding">Birgit</td>\r\n<td class="ng-binding">Denmark</td>\r\n</tr>\r\n<tr class="ng-scope">\r\n<td class="ng-binding">Mary</td>\r\n<td class="ng-binding">England</td>\r\n</tr>\r\n<tr class="ng-scope">\r\n<td class="ng-binding">Kai</td>\r\n<td class="ng-binding">Norway</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n</div>\r\n</div>\r\nBy adding the <code>ng-click</code> directive on the table headers, we can run a function that changes the sorting order of the array:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate htmlHigh">&lt;div ng-app="myApp" ng-controller="namesCtrl"&gt;\r\n\r\n&lt;table border="1" width="100%"&gt;\r\n&lt;tr&gt;\r\n&lt;th ng-click="orderByMe(''name'')"&gt;Name&lt;/th&gt;\r\n&lt;th ng-click="orderByMe(''country'')"&gt;Country&lt;/th&gt;\r\n&lt;/tr&gt;\r\n&lt;tr ng-repeat="x in names | orderBy:myOrderBy"&gt;\r\n&lt;td&gt;{{x.name}}&lt;/td&gt;\r\n&lt;td&gt;{{x.country}}&lt;/td&gt;\r\n&lt;/tr&gt;\r\n&lt;/table&gt;\r\n\r\n&lt;/div&gt;\r\n\r\n&lt;script&gt;\r\nangular.module(''myApp'', []).controller(''namesCtrl'', function($scope) {\r\n$scope.names = [\r\n{name:''Jani'',country:''Norway''},\r\n{name:''Carl'',country:''Sweden''},\r\n{name:''Margareth'',country:''England''},\r\n{name:''Hege'',country:''Norway''},\r\n{name:''Joe'',country:''Denmark''},\r\n{name:''Gustav'',country:''Sweden''},\r\n{name:''Birgit'',country:''Denmark''},\r\n{name:''Mary'',country:''England''},\r\n{name:''Kai'',country:''Norway''}\r\n];\r\n$scope.orderByMe = function(x) {\r\n$scope.myOrderBy = x;\r\n}\r\n});\r\n&lt;/script&gt;</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n\r\n<hr />\r\n\r\n<h2>Custom Filters</h2>\r\nYou can make your own filters by registering a new filter factory function with your module:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\nMake a custom filter called "myFormat":\r\n<div class="w3-code notranslate">\r\n<div class="htmlHigh">&lt;ul ng-app="myApp" ng-controller="namesCtrl"&gt;\r\n&lt;li ng-repeat="x in names"&gt;\r\n{{x | <strong>myFormat</strong>}}\r\n&lt;/li&gt;\r\n&lt;/ul&gt;\r\n\r\n&lt;script&gt;</div>\r\n<div class="jsHigh">var app = angular.module(''myApp'', []);\r\napp.filter(''<strong>myFormat</strong>'', function() {\r\nreturn function(x) {\r\nvar i, c, txt = "";\r\nfor (i = 0; i &lt; x.length; i++) {\r\nc = x[i];\r\nif (i % 2 == 0) {\r\nc = c.toUpperCase();\r\n}\r\ntxt += c;\r\n}\r\nreturn txt;\r\n};\r\n});\r\napp.controller(''namesCtrl'', function($scope) {\r\n$scope.names = [''Jani'', ''Carl'', ''Margareth'', ''Hege'', ''Joe'', ''Gustav'', ''Birgit'', ''Mary'', ''Kai''];\r\n});</div>\r\n<div class="htmlHigh">&lt;/script&gt;</div>\r\n</div>\r\n</div>', 'Angular Filters', '', 'inherit', 'closed', 'closed', '', '125-revision-v1', '', '', '2016-05-21 14:32:17', '2016-05-21 14:32:17', '', 125, 'http://localhost/invatacel/2016/05/21/125-revision-v1/', 0, 'revision', '', 0);
INSERT INTO `wp_posts` (`ID`, `post_author`, `post_date`, `post_date_gmt`, `post_content`, `post_title`, `post_excerpt`, `post_status`, `comment_status`, `ping_status`, `post_password`, `post_name`, `to_ping`, `pinged`, `post_modified`, `post_modified_gmt`, `post_content_filtered`, `post_parent`, `guid`, `menu_order`, `post_type`, `post_mime_type`, `comment_count`) VALUES
(141, 1, '2016-05-21 14:32:42', '2016-05-21 14:32:42', '<p class="intro"><strong>$http</strong> is an AngularJS service for reading data from remote servers.</p>\r\n\r\n\r\n<hr />\r\n\r\n<h2>AngularJS $http</h2>\r\nThe AngularJS <code>$http</code> service makes a request to the server, and returns a response.\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\nMake a simple request to the server, and display the result in a header:\r\n<div class="w3-code notranslate">\r\n<div class="htmlHigh">&lt;div ng-app="myApp" ng-controller="myCtrl"&gt;\r\n\r\n&lt;p&gt;Today''s welcome message is:&lt;/p&gt;\r\n&lt;h1&gt;{{myWelcome}}&lt;/h1&gt;\r\n\r\n&lt;/div&gt;\r\n\r\n&lt;script&gt;</div>\r\n<div class="jsHigh">var app = angular.module(''myApp'', []);\r\napp.controller(''myCtrl'', function($scope, $http) {\r\n$http.get("welcome.htm")\r\n.then(function(response) {\r\n$scope.myWelcome = response.data;\r\n});\r\n});</div>\r\n<div class="htmlHigh">&lt;/script&gt;</div>\r\n</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n\r\n<hr />\r\n\r\n<h2>Methods</h2>\r\nThe example above uses the <code>.get</code> method of the <code>$http</code> service.\r\n\r\nThe .get method is a shortcut method of the $http service. There are several shortcut methods:\r\n<ul>\r\n 	<li><code>.delete()</code></li>\r\n 	<li><code>.get()</code></li>\r\n 	<li><code>.head()</code></li>\r\n 	<li><code>.jsonp()</code></li>\r\n 	<li><code>.patch()</code></li>\r\n 	<li><code>.post()</code></li>\r\n 	<li><code>.put()</code></li>\r\n</ul>\r\nThe methods above are all shortcuts of calling the $http service:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate jsHigh">var app = angular.module(''myApp'', []);\r\napp.controller(''myCtrl'', function($scope, $http) {\r\n$http({\r\nmethod : "GET",\r\nurl : "welcome.htm"\r\n}).then(function mySucces(response) {\r\n$scope.myWelcome = response.data;\r\n}, function myError(response) {\r\n$scope.myWelcome = response.statusText;\r\n});\r\n});</div>\r\n</div>\r\n<div class="w3-example"></div>\r\nThe example above executes the $http service with an object as an argument. The object is specifying the HTTP method, the url, what to do on success, and what to do on failure.\r\n\r\n<hr />\r\n\r\n<h2>Properties</h2>\r\nThe response from the server is an object with these properties:\r\n<ul>\r\n 	<li><code>.config</code> the object used to generate the request.</li>\r\n 	<li><code>.data</code> a string, or an object, carrying the response from the server.</li>\r\n 	<li><code>.headers</code> a function to use to get header information.</li>\r\n 	<li><code>.status</code> a number defining the HTTP status.</li>\r\n 	<li><code>.statusText</code> a string defining the HTTP status.</li>\r\n</ul>\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate jsHigh">var app = angular.module(''myApp'', []);\r\napp.controller(''myCtrl'', function($scope, $http) {\r\n$http.get("welcome.htm")\r\n.then(function(response) {\r\n$scope.content = response.data;\r\n$scope.statuscode = response.status;\r\n$scope.statustext = response.statustext;\r\n});\r\n});</div>\r\n</div>\r\n<div class="w3-example"></div>\r\nTo handle errors, add one more functions to the <code>.then</code> method:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate jsHigh">var app = angular.module(''myApp'', []);\r\napp.controller(''myCtrl'', function($scope, $http) {\r\n$http.get("wrongfilename.htm")\r\n.then(function(response) {\r\n//First function handles success\r\n$scope.content = response.data;\r\n}, function(response) {\r\n//Second function handles error\r\n$scope.content = "Something went wrong";\r\n});\r\n});</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n\r\n<hr />\r\n\r\n<h2>JSON</h2>\r\n<div class="ng-scope">\r\n<div class="ng-scope">\r\n\r\nThe data you get from the response is expected to be in JSON format.\r\n\r\nJSON is a great way of transporting data, and it is easy to use within AngularJS, or any other JavaScript.\r\n\r\nExample: On the server we have a file that returns a JSON object containing 15 customers, all wrapped in array called <code>records</code>.\r\n\r\n<a>Take a look at the JSON object.</a>\r\n\r\n</div>\r\n</div>\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\nThe <code>ng-repeat</code> directive is perfect for looping through an array:\r\n<div class="w3-code notranslate">\r\n<div class="htmlHigh">&lt;div ng-app="myApp" ng-controller="customersCtrl"&gt;\r\n\r\n&lt;ul&gt;\r\n&lt;li ng-repeat="x in myData"&gt;\r\n{{ x.Name + '', '' + x.Country }}\r\n&lt;/li&gt;\r\n&lt;/ul&gt;\r\n\r\n&lt;/div&gt;\r\n\r\n&lt;script&gt;</div>\r\n<div class="jsHigh">var app = angular.module(''myApp'', []);\r\napp.controller(''customersCtrl'', function($scope, $http) {\r\n$http.get("customers.php").then(function(response) {\r\n$scope.myData = response.data.records;\r\n});\r\n});</div>\r\n<div class="htmlHigh">&lt;/script&gt;</div>\r\n</div>\r\n</div>\r\n<div class="w3-example"></div>\r\nApplication explained:\r\n\r\nThe application defines the <code>customersCtrl</code> controller, with a <code>$scope</code> and <code>$http</code> object.\r\n\r\n<code>$http</code> is an <strong>XMLHttpRequest object</strong> for requesting external data.\r\n\r\n<code>$http.get()</code> reads <strong>JSON data</strong> from <a href="http://www.w3schools.com/angular/customers.php" target="_blank">http://www.w3schools.com/angular/customers.php</a>.\r\n\r\nOn success, the controller creates a property, <code>myData</code>, in the scope, with JSON data from the server.', 'Angular Http', '', 'inherit', 'closed', 'closed', '', '126-revision-v1', '', '', '2016-05-21 14:32:42', '2016-05-21 14:32:42', '', 126, 'http://localhost/invatacel/2016/05/21/126-revision-v1/', 0, 'revision', '', 0),
(142, 1, '2016-05-21 14:33:11', '2016-05-21 14:33:11', '<p class="intro">AngularJS lets you create dropdown lists based on items in an array, or an object.</p>\r\n\r\n\r\n<hr />\r\n\r\n<h2>Creating a Select Box Using ng-options</h2>\r\nIf you want to create a dropdown list, based on an object or an array in AngularJS, you should use the <code>ng-options</code> directive:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate">\r\n<div class="htmlHigh">&lt;div ng-app="myApp" ng-controller="myCtrl"&gt;\r\n\r\n&lt;select ng-model="selectedName" ng-options="x for x in names"&gt;\r\n&lt;/select&gt;\r\n\r\n&lt;/div&gt;\r\n\r\n&lt;script&gt;</div>\r\n<div class="jsHigh">var app = angular.module(''myApp'', []);\r\napp.controller(''myCtrl'', function($scope) {\r\n$scope.names = ["Emil", "Tobias", "Linus"];\r\n});</div>\r\n<div class="htmlHigh">&lt;/script&gt;</div>\r\n</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n\r\n<hr />\r\n\r\n<h2>ng-options vs ng-repeat</h2>\r\nYou can also use the <code>ng-repeat</code> directive to make the same dropdown list:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate">\r\n<div class="htmlHigh">&lt;select&gt;\r\n&lt;option ng-repeat="x in names"&gt;{{x}}&lt;/option&gt;\r\n&lt;/select&gt;</div>\r\n</div>\r\n</div>\r\n<div class="w3-example"></div>\r\nBecause the <code>ng-repeat</code> directive repeats a block of HTML code for each item in an array, it can be used to create options in a dropdown list, but the <code>ng-options</code> directive was made especially for filling a dropdown list with options, and has at least one important advantage:\r\n\r\nDropdowns made with <code>ng-options</code> allows the selected value to be an <strong>object</strong>, while dropdowns made from <code>ng-repeat</code> has to be a string.\r\n<h2>What Do I Use?</h2>\r\nAssume you have an array of objects:\r\n<div class="w3-example">\r\n<div class="w3-code notranslate jsHigh">$scope.cars = [\r\n{model : "Ford Mustang", color : "red"},\r\n{model : "Fiat 500", color : "white"},\r\n{model : "Volvo XC90", color : "black"}\r\n];</div>\r\n</div>\r\nThe <code>ng-repeat</code> directive has its limitations, the selected value must be a string:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\nUsing <code>ng-repeat</code>:\r\n<div class="w3-code notranslate">\r\n<div class="htmlHigh">&lt;select ng-model="selectedCar"&gt;\r\n&lt;option ng-repeat="x in cars" value="{{x.model}}"&gt;{{x.model}}&lt;/option&gt;\r\n&lt;/select&gt;\r\n\r\n&lt;h1&gt;You selected: {{selectedCar}}&lt;/h1&gt;</div>\r\n</div>\r\n</div>\r\n<div class="w3-example"></div>\r\nWhen using the <code>ng-options</code> directive, the selected value can be an object:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\nUsing <code>ng-options</code>:\r\n<div class="w3-code notranslate">\r\n<div class="htmlHigh">&lt;select ng-model="selectedCar" ng-options="x.model for x in cars"&gt;\r\n&lt;/select&gt;\r\n\r\n&lt;h1&gt;You selected: {{selectedCar.model}}&lt;/h1&gt;\r\n&lt;p&gt;Its color is: {{selectedCar.color}}&lt;/p&gt;</div>\r\n</div>\r\n</div>\r\n<div class="w3-example"></div>\r\nWhen the selected value can be an object, it can hold more information, and your application can be more flexible.\r\n\r\nWe will use the <code>ng-options</code> directive in this tutorial.\r\n\r\n<hr />\r\n\r\n<h2>The Data Source as an Object</h2>\r\nIn the previous examples the data source was an array, but we can also use an object.\r\n\r\nAssume you have an object with key-value pairs:\r\n<div class="w3-example">\r\n<div class="w3-code notranslate jsHigh">$scope.cars = {\r\ncar01 : "Ford",\r\ncar02 : "Fiat",\r\ncar03 : "Volvo"\r\n};</div>\r\n</div>\r\nThe expression in the <code>ng-options</code> attribute is a bit different for objects:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\nUsing an object as the data source, <code>x</code> represents the key, and <code>y</code> represents the value:\r\n<div class="w3-code notranslate">\r\n<div class="htmlHigh">&lt;select ng-model="selectedCar" ng-options="<strong>x for (x, y) in cars</strong>"&gt;\r\n&lt;/select&gt;\r\n\r\n&lt;h1&gt;You selected: {{selectedCar}}&lt;/h1&gt;</div>\r\n</div>\r\n</div>\r\n<div class="w3-example"></div>\r\nThe selected value will always be the <strong>value</strong> in a key-<strong>value</strong> pair.\r\n\r\nThe <strong>value</strong> in a key-<strong>value</strong> pair can also be an object:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\nThe selected value will still be the <strong>value</strong> in a key-<strong>value</strong> pair, only this time it is an object:\r\n<div class="w3-code notranslate">\r\n<div class="jsHigh">$scope.cars = {\r\ncar01 : {brand : "Ford", model : "Mustang", color : "red"},\r\ncar02 : {brand : "Fiat", model : "500", color : "white"},\r\ncar03 : {brand : "Volvo", model : "XC90", color : "black"}\r\n};</div>\r\n</div>\r\n</div>\r\n<div class="w3-example"></div>\r\nThe options in the dropdown list does not have be the <strong>key</strong> in a <strong>key</strong>-value pair, it can also be the value, or a property of the value object:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate">\r\n<div class="htmlHigh">&lt;select ng-model="selectedCar" ng-options="<strong>y.brand</strong> for (x, y) in cars"&gt;\r\n&lt;/select&gt;</div>\r\n</div>\r\n</div>', 'Angular Select', '', 'inherit', 'closed', 'closed', '', '127-revision-v1', '', '', '2016-05-21 14:33:11', '2016-05-21 14:33:11', '', 127, 'http://localhost/invatacel/2016/05/21/127-revision-v1/', 0, 'revision', '', 0),
(143, 1, '2016-05-21 14:33:44', '2016-05-21 14:33:44', '<p class="intro">AngularJS is perfect for displaying data from a Database. Just make sure the data is in JSON format.</p>\r\n\r\n\r\n<hr />\r\n\r\n<h2>Fetching Data From a PHP Server Running MySQL</h2>\r\n<div class="w3-example">\r\n<h3>AngularJS Example</h3>\r\n<div class="w3-code notranslate htmlHigh">&lt;div ng-app="myApp" ng-controller="customersCtrl"&gt;\r\n\r\n&lt;table&gt;\r\n&lt;tr ng-repeat="x in names"&gt;\r\n&lt;td&gt;{{ x.Name }}&lt;/td&gt;\r\n&lt;td&gt;{{ x.Country }}&lt;/td&gt;\r\n&lt;/tr&gt;\r\n&lt;/table&gt;\r\n\r\n&lt;/div&gt;\r\n\r\n&lt;script&gt;\r\nvar app = angular.module(''myApp'', []);\r\napp.controller(''customersCtrl'', function($scope, $http) {\r\n$http.get("http://www.w3schools.com/angular/customers_mysql.php")\r\n.then(function (response) {$scope.names = response.data.records;});\r\n});\r\n&lt;/script&gt;</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n\r\n<hr />\r\n\r\n<h2>Fetching Data From an ASP.NET Server Running SQL</h2>\r\n<div class="w3-example">\r\n<h3>AngularJS Example</h3>\r\n<div class="w3-code notranslate htmlHigh">&lt;div ng-app="myApp" ng-controller="customersCtrl"&gt;\r\n\r\n&lt;table&gt;\r\n&lt;tr ng-repeat="x in names"&gt;\r\n&lt;td&gt;{{ x.Name }}&lt;/td&gt;\r\n&lt;td&gt;{{ x.Country }}&lt;/td&gt;\r\n&lt;/tr&gt;\r\n&lt;/table&gt;\r\n\r\n&lt;/div&gt;\r\n\r\n&lt;script&gt;\r\nvar app = angular.module(''myApp'', []);\r\napp.controller(''customersCtrl'', function($scope, $http) {\r\n$http.get("http://www.w3schools.com/angular/customers_sql.aspx")\r\n.then(function (response) {$scope.names = response.data.records;});\r\n});\r\n&lt;/script&gt;</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n\r\n<hr />\r\n\r\n<h2>Server Code Examples</h2>\r\nThe following section is a listing of the server code used to fetch SQL data.\r\n<ol>\r\n 	<li>Using PHP and MySQL. Returning JSON.</li>\r\n 	<li>Using PHP and MS Access. Returning JSON.</li>\r\n 	<li>Using ASP.NET, VB, and MS Access. Returning JSON.</li>\r\n 	<li>Using ASP.NET, Razor, and SQL Lite. Returning JSON.</li>\r\n</ol>\r\n\r\n<hr />\r\n\r\n<h2>Cross-Site HTTP Requests</h2>\r\nRequests for data from a different server (than the requesting page), are called <strong>cross-site</strong> HTTP requests.\r\n\r\nCross-site requests are common on the web. Many pages load CSS, images, and scripts from different servers.\r\n\r\nIn modern browsers, cross-site HTTP requests <strong>from scripts</strong> are restricted to <strong>same site</strong> for security reasons.\r\n\r\nThe following line, in our PHP examples, has been added to allow cross-site access.\r\n<div class="w3-example">\r\n<div class="w3-code notranslate">header("Access-Control-Allow-Origin: *");</div>\r\n</div>\r\n\r\n<hr />\r\n\r\n<h2>1. Server Code PHP and MySQL</h2>\r\n<div class="w3-example">\r\n<div class="w3-code notranslate">&lt;?php\r\nheader("Access-Control-Allow-Origin: *");\r\nheader("Content-Type: application/json; charset=UTF-8");\r\n\r\n$conn = new mysqli("myServer", "myUser", "myPassword", "Northwind");\r\n\r\n$result = $conn-&gt;query("SELECT CompanyName, City, Country FROM Customers");\r\n\r\n$outp = "";\r\nwhile($rs = $result-&gt;fetch_array(MYSQLI_ASSOC)) {\r\nif ($outp != "") {$outp .= ",";}\r\n$outp .= ''{"Name":"''  . $rs["CompanyName"] . ''",'';\r\n$outp .= ''"City":"''   . $rs["City"]        . ''",'';\r\n$outp .= ''"Country":"''. $rs["Country"]     . ''"}'';\r\n}\r\n$outp =''{"records":[''.$outp.'']}'';\r\n$conn-&gt;close();\r\n\r\necho($outp);\r\n?&gt;</div>\r\n</div>\r\n\r\n<hr />\r\n\r\n<h2>2. Server Code PHP and MS Access</h2>\r\n<div class="w3-example">\r\n<div class="w3-code notranslate">&lt;?php\r\nheader("Access-Control-Allow-Origin: *");\r\nheader("Content-Type: application/json; charset=ISO-8859-1");\r\n\r\n$conn = new COM("ADODB.Connection");\r\n$conn-&gt;open("PROVIDER=Microsoft.Jet.OLEDB.4.0;Data Source=Northwind.mdb");\r\n\r\n$rs = $conn-&gt;execute("SELECT CompanyName, City, Country FROM Customers");\r\n\r\n$outp = "";\r\nwhile (!$rs-&gt;EOF) {\r\nif ($outp != "") {$outp .= ",";}\r\n$outp .= ''{"Name":"''  . $rs["CompanyName"] . ''",'';\r\n$outp .= ''"City":"''   . $rs["City"]        . ''",'';\r\n$outp .= ''"Country":"''. $rs["Country"]     . ''"}'';\r\n$rs-&gt;MoveNext();\r\n}\r\n$outp =''{"records":[''.$outp.'']}'';\r\n\r\n$conn-&gt;close();\r\n\r\necho ($outp);\r\n?&gt;</div>\r\n</div>\r\n\r\n<hr />\r\n\r\n<h2>3. Server Code ASP.NET, VB and MS Access</h2>\r\n<div class="w3-example">\r\n<div class="w3-code notranslate">&lt;%@ Import Namespace="System.IO"%&gt;\r\n&lt;%@ Import Namespace="System.Data"%&gt;\r\n&lt;%@ Import Namespace="System.Data.OleDb"%&gt;\r\n&lt;%\r\nResponse.AppendHeader("Access-Control-Allow-Origin", "*")\r\nResponse.AppendHeader("Content-type", "application/json")\r\nDim conn As OleDbConnection\r\nDim objAdapter As OleDbDataAdapter\r\nDim objTable As DataTable\r\nDim objRow As DataRow\r\nDim objDataSet As New DataSet()\r\nDim outp\r\nDim c\r\nconn = New OledbConnection("Provider=Microsoft.Jet.OLEDB.4.0;data source=Northwind.mdb")\r\nobjAdapter = New OledbDataAdapter("SELECT CompanyName, City, Country FROM Customers", conn)\r\nobjAdapter.Fill(objDataSet, "myTable")\r\nobjTable=objDataSet.Tables("myTable")\r\n\r\noutp = ""\r\nc = chr(34)\r\nfor each x in objTable.Rows\r\nif outp &lt;&gt; "" then outp = outp &amp; ","\r\noutp = outp &amp; "{" &amp; c &amp; "Name"    &amp; c &amp; ":" &amp; c &amp; x("CompanyName") &amp; c &amp; ","\r\noutp = outp &amp;       c &amp; "City"    &amp; c &amp; ":" &amp; c &amp; x("City")        &amp; c &amp; ","\r\noutp = outp &amp;       c &amp; "Country" &amp; c &amp; ":" &amp; c &amp; x("Country")     &amp; c &amp; "}"\r\nnext\r\n\r\noutp ="{" &amp; c &amp; "records" &amp; c &amp; ":[" &amp; outp &amp; "]}"\r\nresponse.write(outp)\r\nconn.close\r\n%&gt;</div>\r\n</div>\r\n\r\n<hr />\r\n\r\n<h2>4. Server Code ASP.NET, Razor C# and SQL Lite</h2>\r\n<div class="w3-example">\r\n<div class="w3-code notranslate">@{\r\nResponse.AppendHeader("Access-Control-Allow-Origin", "*")\r\nResponse.AppendHeader("Content-type", "application/json")\r\nvar db = Database.Open("Northwind");\r\nvar query = db.Query("SELECT CompanyName, City, Country FROM Customers");\r\nvar outp =""\r\nvar c = chr(34)\r\n}\r\n@foreach(var row in query)\r\n{\r\nif outp &lt;&gt; "" then outp = outp + ","\r\noutp = outp + "{" + c + "Name"    + c + ":" + c + @row.CompanyName + c + ","\r\noutp = outp +       c + "City"    + c + ":" + c + @row.City        + c + ","\r\noutp = outp +       c + "Country" + c + ":" + c + @row.Country     + c + "}"\r\n}\r\noutp ="{" + c + "records" + c + ":[" + outp + "]}"\r\n@outp</div>\r\n</div>', 'Angular SQL', '', 'inherit', 'closed', 'closed', '', '128-revision-v1', '', '', '2016-05-21 14:33:44', '2016-05-21 14:33:44', '', 128, 'http://localhost/invatacel/2016/05/21/128-revision-v1/', 0, 'revision', '', 0),
(144, 1, '2016-05-21 14:34:07', '2016-05-21 14:34:07', '<p class="intro">AngularJS has directives for binding application data to the attributes of HTML DOM elements.</p>\r\n\r\n\r\n<hr />\r\n\r\n<h2>The ng-disabled Directive</h2>\r\nThe <strong>ng-disabled</strong> directive binds AngularJS application data to the disabled attribute of HTML elements.\r\n<div class="w3-example">\r\n<h3>AngularJS Example</h3>\r\n<div class="w3-code notranslate htmlHigh">&lt;div ng-app="" ng-init="mySwitch=true"&gt;\r\n\r\n&lt;p&gt;\r\n&lt;button ng-disabled="mySwitch"&gt;Click Me!&lt;/button&gt;\r\n&lt;/p&gt;\r\n\r\n&lt;p&gt;\r\n&lt;input type="checkbox" ng-model="mySwitch"&gt;Button\r\n&lt;/p&gt;\r\n\r\n&lt;p&gt;\r\n{{ mySwitch }}\r\n&lt;/p&gt;\r\n\r\n&lt;/div&gt;</div>\r\n</div>\r\n<div class="w3-example"></div>\r\nApplication explained:\r\n\r\nThe <strong>ng-disabled</strong> directive binds the application data <strong>mySwitch</strong> to the HTML button''s <strong>disabled</strong> attribute.\r\n\r\nThe <strong>ng-model</strong> directive binds the value of the HTML checkbox element to the value of <strong>mySwitch</strong>.\r\n\r\nIf the value of <strong>mySwitch</strong> evaluates to <strong>true</strong>, the button will be disabled:\r\n<div class="w3-example">\r\n<div class="w3-code notranslate htmlHigh">&lt;p&gt;\r\n&lt;button disabled&gt;Click Me!&lt;/button&gt;\r\n&lt;/p&gt;</div>\r\n</div>\r\nIf the value of <strong>mySwitch</strong> evaluates to <strong>false</strong>, the button will not be disabled:\r\n<div class="w3-example">\r\n<div class="w3-code notranslate htmlHigh">&lt;p&gt;\r\n&lt;button&gt;Click Me!&lt;/button&gt;\r\n&lt;/p&gt;</div>\r\n</div>\r\n\r\n<hr />\r\n\r\n<h2>The ng-show Directive</h2>\r\nThe <strong>ng-show</strong> directive shows or hides an HTML element.\r\n<div class="w3-example">\r\n<h3>AngularJS Example</h3>\r\n<div class="w3-code notranslate htmlHigh">&lt;div ng-app=""&gt;\r\n\r\n&lt;p ng-show="true"&gt;I am visible.&lt;/p&gt;\r\n\r\n&lt;p ng-show="false"&gt;I am not visible.&lt;/p&gt;\r\n\r\n&lt;/div&gt;</div>\r\n</div>\r\n<div class="w3-example"></div>\r\nThe ng-show directive shows (or hides) an HTML element based on the <strong> value</strong> of ng-show.\r\n\r\nYou can use any expression that evaluates to true or false:\r\n<div class="w3-example">\r\n<h3>AngularJS Example</h3>\r\n<div class="w3-code notranslate htmlHigh">&lt;div ng-app="" ng-init="hour=13"&gt;\r\n\r\n&lt;p ng-show="hour &gt; 12"&gt;I am visible.&lt;/p&gt;\r\n\r\n&lt;/div&gt;</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n<table class="lamp">\r\n<tbody>\r\n<tr>\r\n<th><img src="http://www.w3schools.com/images/lamp.jpg" alt="Note" /></th>\r\n<td>In the next chapter, there are more examples, using the click of a button to hide HTML elements.</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n\r\n<hr />\r\n\r\n<h2>The ng-hide Directive</h2>\r\nThe <strong>ng-hide</strong> directive hides or shows an HTML element.\r\n<div class="w3-example">\r\n<h3>AngularJS Example</h3>\r\n<div class="w3-code notranslate htmlHigh">&lt;div ng-app=""&gt;\r\n\r\n&lt;p ng-hide="true"&gt;I am not visible.&lt;/p&gt;\r\n\r\n&lt;p ng-hide="false"&gt;I am visible.&lt;/p&gt;\r\n\r\n&lt;/div&gt;</div>\r\n</div>', 'Angular DOM', '', 'inherit', 'closed', 'closed', '', '129-revision-v1', '', '', '2016-05-21 14:34:07', '2016-05-21 14:34:07', '', 129, 'http://localhost/invatacel/2016/05/21/129-revision-v1/', 0, 'revision', '', 0),
(145, 1, '2016-05-21 14:34:27', '2016-05-21 14:34:27', '<p class="intro">AngularJS has its own HTML events directives.</p>\r\n\r\n\r\n<hr />\r\n\r\n<h2>AngularJS Events</h2>\r\nYou can add AngularJS event listeners to your HTML elements by using one or more of these directives:\r\n<ul>\r\n 	<li><code>ng-blur</code></li>\r\n 	<li><code>ng-change</code></li>\r\n 	<li><code>ng-click</code></li>\r\n 	<li><code>ng-copy</code></li>\r\n 	<li><code>ng-cut</code></li>\r\n 	<li><code>ng-dblclick</code></li>\r\n 	<li><code>ng-focus</code></li>\r\n 	<li><code>ng-keydown</code></li>\r\n 	<li><code>ng-keypress</code></li>\r\n 	<li><code>ng-keyup</code></li>\r\n 	<li><code>ng-mousedown</code></li>\r\n 	<li><code>ng-mouseenter</code></li>\r\n 	<li><code>ng-mouseleave</code></li>\r\n 	<li><code>ng-mousemove</code></li>\r\n 	<li><code>ng-mouseover</code></li>\r\n 	<li><code>ng-mouseup</code></li>\r\n 	<li><code>ng-paste</code></li>\r\n</ul>\r\nThe event directives allows us to run AngularJS functions at certain user events.\r\n\r\nAn AngularJS event will not overwrite an HTML event, both events will be executed.\r\n\r\n<hr />\r\n\r\n<h2>Mouse Events</h2>\r\nMouse events occur when the cursor moves over an element, in this order:\r\n<ol>\r\n 	<li>ng-mouseenter</li>\r\n 	<li>ng-mouseover</li>\r\n 	<li>ng-mousemove</li>\r\n 	<li>ng-mouseleave</li>\r\n</ol>\r\nOr when a mouse button is clicked on an element, in this order:\r\n<ol>\r\n 	<li>ng-mousedown</li>\r\n 	<li>ng-mouseup</li>\r\n 	<li>ng-click</li>\r\n</ol>\r\nYou can add mouse events on any HTML element.\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\nIncrease the count variable when the mouse moves over the H1 element:\r\n<div class="w3-code notranslate htmlHigh">&lt;div ng-app="myApp" ng-controller="myCtrl"&gt;\r\n\r\n&lt;h1 ng-mousemove="count = count + 1"&gt;Mouse over me!&lt;/h1&gt;\r\n\r\n&lt;h2&gt;{{ count }}&lt;/h2&gt;\r\n\r\n&lt;/div&gt;\r\n&lt;script&gt;\r\nvar app = angular.module(''myApp'', []);\r\napp.controller(''myCtrl'', function($scope) {\r\n$scope.count = 0;\r\n});\r\n&lt;/script&gt;</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n\r\n<hr />\r\n\r\n<h2>The ng-click Directive</h2>\r\nThe <code>ng-click</code> directive defines AngularJS code that will be executed when the element is being clicked.\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate htmlHigh">&lt;div ng-app="myApp" ng-controller="myCtrl"&gt;\r\n\r\n&lt;button ng-click="count = count + 1"&gt;Click me!&lt;/button&gt;\r\n\r\n&lt;p&gt;{{ count }}&lt;/p&gt;\r\n\r\n&lt;/div&gt;\r\n&lt;script&gt;\r\nvar app = angular.module(''myApp'', []);\r\napp.controller(''myCtrl'', function($scope) {\r\n$scope.count = 0;\r\n});\r\n&lt;/script&gt;</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n\r\n<hr />\r\n\r\nYou can also refer to a function:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate htmlHigh">&lt;div ng-app="myApp" ng-controller="myCtrl"&gt;\r\n\r\n&lt;button ng-click="myFunction()"&gt;Click me!&lt;/button&gt;\r\n\r\n&lt;p&gt;{{ count }}&lt;/p&gt;\r\n\r\n&lt;/div&gt;\r\n&lt;script&gt;\r\nvar app = angular.module(''myApp'', []);\r\napp.controller(''myCtrl'', function($scope) {\r\n$scope.count = 0;\r\n$scope.myFunction = function() {\r\n$scope.count++;\r\n}\r\n});\r\n&lt;/script&gt;</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n\r\n<hr />\r\n\r\n<h2>Toggle, True/False</h2>\r\nIf you want to show a section of HTML code when a button is clicked, and hide when the button is clicked again, like a dropdown menu, make the button behave like a toggle switch:\r\n<div class="ng-scope"></div>\r\n<div class="ng-scope"></div>\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate htmlHigh">&lt;div ng-app="myApp" ng-controller="myCtrl"&gt;\r\n\r\n&lt;button ng-click="myFunc()"&gt;Click Me!&lt;/button&gt;\r\n\r\n&lt;div ng-show="showMe"&gt;\r\n&lt;h1&gt;Menu:&lt;/h1&gt;\r\n&lt;div&gt;Pizza&lt;/div&gt;\r\n&lt;div&gt;Pasta&lt;/div&gt;\r\n&lt;div&gt;Pesce&lt;/div&gt;\r\n&lt;/div&gt;\r\n\r\n&lt;/div&gt;\r\n&lt;script&gt;\r\nvar app = angular.module(''myApp'', []);\r\napp.controller(''myCtrl'', function($scope) {\r\n$scope.showMe = false;\r\n$scope.myFunc = function() {\r\n$scope.showMe = !$scope.showMe;\r\n}\r\n});\r\n&lt;/script&gt;</div>\r\n</div>\r\n<div class="w3-example"></div>\r\nThe <code>showMe</code> variable starts out as the Boolean value <code>false</code>.\r\n\r\nThe <code>myFunc</code> function sets the <code>showMe</code> variable to the opposite of what it is, by using the <code>!</code> (not) operator.\r\n\r\n<hr />\r\n\r\n<h2>$event Object</h2>\r\nYou can pass the <code>$event</code> object as an argument when calling the function.\r\n\r\nThe <code>$event</code> object contains the browser''s event object:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate htmlHigh">&lt;div ng-app="myApp" ng-controller="myCtrl"&gt;\r\n\r\n&lt;h1 ng-mousemove="myFunc($event)"&gt;Mouse Over Me!&lt;/h1&gt;\r\n\r\n&lt;p&gt;Coordinates: {{x + '', '' + y}}&lt;/p&gt;\r\n\r\n&lt;/div&gt;\r\n&lt;script&gt;\r\nvar app = angular.module(''myApp'', []);\r\napp.controller(''myCtrl'', function($scope) {\r\n$scope.myFunc = function(myE) {\r\n$scope.x = myE.clientX;\r\n$scope.y = myE.clientY;\r\n}\r\n});\r\n&lt;/script&gt;</div>\r\n</div>', 'Angular Events', '', 'inherit', 'closed', 'closed', '', '130-revision-v1', '', '', '2016-05-21 14:34:27', '2016-05-21 14:34:27', '', 130, 'http://localhost/invatacel/2016/05/21/130-revision-v1/', 0, 'revision', '', 0),
(146, 1, '2016-05-21 14:35:00', '2016-05-21 14:35:00', 'An animation is when the transformation of an HTML element gives you an illusion of motion.\r\n<div class="w3-example">\r\n<h3>Example:</h3>\r\nCheck the checkbox to hide the DIV:\r\n<div class="w3-code notranslate htmlHigh">&lt;body ng-app="ngAnimate"&gt;\r\n\r\nHide the DIV: &lt;input type="checkbox" ng-model="myCheck"&gt;\r\n\r\n&lt;div ng-hide="myCheck"&gt;&lt;/div&gt;\r\n\r\n&lt;/body&gt;</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n<table class="lamp">\r\n<tbody>\r\n<tr>\r\n<th><img src="http://www.w3schools.com/images/lamp.jpg" alt="Note" /></th>\r\n<td>Applications should not be filled with animations, but some animations can make the application easier to understand.</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n\r\n<hr />\r\n\r\n<h2>What do I Need?</h2>\r\nTo make your applications ready for animations, you must include the AngularJS Animate library:\r\n<div class="w3-example">\r\n<div class="w3-code notranslate htmlHigh">&lt;script src="http://ajax.googleapis.com/ajax/libs/angularjs/1.4.8/angular-animate.js"&gt;&lt;/script&gt;</div>\r\n</div>\r\nThen you must refer to the <code>ngAnimate</code> module in your application:\r\n<div class="w3-example">\r\n<div class="w3-code notranslate htmlHigh">&lt;body ng-app="ngAnimate"&gt;</div>\r\n</div>\r\nOr if your application has a name, add <code>ngAnimate</code> as a dependency in your application module:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate">\r\n<div class="htmlHigh">&lt;body ng-app="myApp"&gt;\r\n\r\n&lt;h1&gt;Hide the DIV: &lt;input type="checkbox" ng-model="myCheck"&gt;&lt;/h1&gt;\r\n\r\n&lt;div ng-hide="myCheck"&gt;&lt;/div&gt;\r\n\r\n&lt;script&gt;</div>\r\n<div class="jsHigh">var app = angular.module(''myApp'', [''ngAnimate'']);</div>\r\n<div class="htmlHigh">&lt;/script&gt;</div>\r\n</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n\r\n<hr />\r\n\r\n<h2>What Does ngAnimate Do?</h2>\r\nThe ngAnimate module adds and removes classes.\r\n\r\nThe ngAnimate module does not animate your HTML elements, but when ngAnimate notice certain events, like hide or show of an HTML element, the element gets some pre-defined classes which can be used to make animations.\r\n\r\nThe directives in AngularJS who add/remove classes are:\r\n<ul>\r\n 	<li><code>ng-show</code></li>\r\n 	<li><code>ng-hide</code></li>\r\n 	<li><code>ng-class</code></li>\r\n 	<li><code>ng-view</code></li>\r\n 	<li><code>ng-include</code></li>\r\n 	<li><code>ng-repeat</code></li>\r\n 	<li><code>ng-if</code></li>\r\n 	<li><code>ng-switch</code></li>\r\n</ul>\r\nThe <code>ng-show</code> and <code>ng-hide</code> directives adds or removes a <code>ng-hide</code> class value.\r\n\r\nThe other directives adds a <code>ng-enter</code> class value when they enter the DOM, and a <code>ng-leave</code> attribute when they are removed from the DOM.\r\n\r\nThe <code>ng-repeat</code> directive also adds a <code>ng-move</code> class value when the HTML element changes position.\r\n\r\nIn addition, <em>during</em> the animation, the HTML element will have a set of class values, which will be removed when the animation has finished. Example: the <code>ng-hide</code> directive will add these class values:\r\n<ul>\r\n 	<li><code>ng-animate</code></li>\r\n 	<li><code>ng-hide-animate</code></li>\r\n 	<li><code>ng-hide-add</code> (if the element will be hidden)</li>\r\n 	<li><code>ng-hide-remove</code> (if the element will be showed)</li>\r\n 	<li><code>ng-hide-add-active</code> (if the element will be hidden)</li>\r\n 	<li><code>ng-hide-remove-active</code> (if the element will be showed)</li>\r\n</ul>\r\n\r\n<hr />\r\n\r\n<h2>Animations Using CSS</h2>\r\nWe can use CSS transitions or CSS animations to animate HTML elements. This tutorial will show you both.\r\n\r\nTo learn more about CSS Animation, study our <a href="http://www.w3schools.com/css/css3_transitions.asp">CSS Transition Tutorial</a> and our <a href="http://www.w3schools.com/css/css3_animations.asp">CSS Animation Tutorial</a>.\r\n\r\n<hr />\r\n\r\n<h2>CSS Transitions</h2>\r\nCSS transitions allows you to change CSS property values smoothly, from one value to another, over a given duration:\r\n<div class="w3-example">\r\n<h3>Example:</h3>\r\nWhen the DIV element gets the <code>.ng-hide</code> class, the transition will take 0.5 seconds, and the height will smoothly change from 100px to 0:\r\n<div class="w3-code notranslate htmlHigh">&lt;style&gt;\r\ndiv {\r\ntransition: all linear 0.5s;\r\nbackground-color: lightblue;\r\nheight: 100px;\r\n}\r\n.ng-hide {\r\nheight: 0;\r\n}\r\n&lt;/style&gt;</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n\r\n<hr />\r\n\r\n<h2>CSS Animations</h2>\r\nCSS Animations allows you to change CSS property values smoothly, from one value to another, over a given duration:\r\n<div class="w3-example">\r\n<h3>Example:</h3>\r\nWhen the DIV element gets the <code>.ng-hide</code> class, the <code>myChange</code> animation will run, which will smoothly change the height from 100px to 0:\r\n<div class="w3-code notranslate htmlHigh">&lt;style&gt;\r\n@keyframes myChange {\r\nfrom {\r\nheight: 100px;\r\n} to {\r\nheight: 0;\r\n}\r\n}\r\ndiv {\r\nheight: 100px;\r\nbackground-color: lightblue;\r\n}\r\ndiv.ng-hide {\r\nanimation: 0.5s myChange;\r\n}\r\n&lt;/style&gt;</div>\r\n</div>', 'Angular Animations', '', 'inherit', 'closed', 'closed', '', '131-revision-v1', '', '', '2016-05-21 14:35:00', '2016-05-21 14:35:00', '', 131, 'http://localhost/invatacel/2016/05/21/131-revision-v1/', 0, 'revision', '', 0),
(147, 1, '2016-05-21 14:35:27', '2016-05-21 14:35:27', '<p class="intro">It is time to create a real AngularJS Application.</p>\r\n\r\n\r\n<hr />\r\n\r\n<h2>Make a Shopping List</h2>\r\nLets use some of the AngularJS features to make a shopping list, were you can add or remove items:\r\n<div class="w3-card-2 ng-scope"><header class="w3-container w3-light-grey w3-padding-hor-16">\r\n<h3>My Shopping List</h3>\r\n</header>\r\n<ul class="w3-ul">\r\n 	<li class="w3-padding-hor-16 ng-binding ng-scope">Milk<span class="w3-right w3-margin-right">×</span></li>\r\n 	<li class="w3-padding-hor-16 ng-binding ng-scope">Bread<span class="w3-right w3-margin-right">×</span></li>\r\n 	<li class="w3-padding-hor-16 ng-binding ng-scope">Cheese<span class="w3-right w3-margin-right">×</span></li>\r\n</ul>\r\n<div class="w3-container w3-light-grey w3-padding-hor-16">\r\n<div class="w3-row w3-margin-top">\r\n<div class="w3-col s10"><input class="w3-input w3-border w3-padding ng-pristine ng-untouched ng-valid" type="text" placeholder="Add shopping items here" /></div>\r\n<div class="w3-col s2"></div>\r\n</div>\r\n</div>\r\n</div>\r\n<div class="w3-card-2 ng-scope"></div>\r\n&nbsp;\r\n\r\n<hr />\r\n\r\n<h2>Application Explained</h2>\r\n<h3>Step 1. Getting Started:</h3>\r\nStart by making an application called <code>myShoppingList</code>, and add a controller named <code>myCtrl</code> to it.\r\n\r\nThe controller adds an array named <code>products</code> to the current <code>$scope</code>.\r\n\r\nIn the HTML, we use the <code>ng-repeat</code> directive to display a list using the items in the array.\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\nSo far we have made an HTML list based on the items of an array:\r\n<div class="w3-code notranslate">\r\n<div class="htmlHigh">&lt;script&gt;</div>\r\n<div class="jsHigh">var app = angular.module("myShoppingList", []);\r\napp.controller("myCtrl", function($scope) {\r\n$scope.products = ["Milk", "Bread", "Cheese"];\r\n});</div>\r\n<div class="htmlHigh">&lt;/script&gt;\r\n\r\n&lt;div ng-app="myShoppingList" ng-controller="myCtrl"&gt;\r\n&lt;ul&gt;\r\n&lt;li ng-repeat="x in products"&gt;{{x}}&lt;/li&gt;\r\n&lt;/ul&gt;\r\n&lt;/div&gt;</div>\r\n</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n\r\n<hr />\r\n\r\n<h3>Step 2. Adding Items:</h3>\r\nIn the HTML, add a text field, and bind it to the application with the <code>ng-model</code> directive.\r\n\r\nIn the controller, make a function named <code>addItem</code>, and use the value of the <code>addMe</code> input field to add an item to the <code>products</code> array.\r\n\r\nAdd a button, and give it an <code>ng-click</code> directive that will run the <code>addItem</code> function when the button is clicked.\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\nNow we can add items to our shopping list:\r\n<div class="w3-code notranslate">\r\n<div class="htmlHigh">&lt;script&gt;</div>\r\n<div class="jsHigh">var app = angular.module("myShoppingList", []);\r\napp.controller("myCtrl", function($scope) {\r\n$scope.products = ["Milk", "Bread", "Cheese"];\r\n<strong>    $scope.addItem = function () {\r\n$scope.products.push($scope.addMe);\r\n}</strong>\r\n});</div>\r\n<div class="htmlHigh">&lt;/script&gt;\r\n\r\n&lt;div ng-app="myShoppingList" ng-controller="myCtrl"&gt;\r\n&lt;ul&gt;\r\n&lt;li ng-repeat="x in products"&gt;{{x}}&lt;/li&gt;\r\n&lt;/ul&gt;\r\n<strong>    &lt;input ng-model="addMe"&gt;\r\n&lt;button ng-click="addItem()"&gt;Add&lt;/button&gt;\r\n</strong>&lt;/div&gt;</div>\r\n</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n\r\n<hr />\r\n\r\n<h3>Step 3. Removing Items:</h3>\r\nWe also want to be able to remove items from the shopping list.\r\n\r\nIn the controller, make a function named <code>removeItem</code>, which takes the index of the item you want to remove, as a paramter\r\n\r\nIn the HTML, make a <code>&lt;span&gt;</code> element for each item, and give them an <code>ng-click</code> directive which calls the <code>removeItem</code> function with the current <code>$index</code>.\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\nNow we can remove items from our shopping list:\r\n<div class="w3-code notranslate">\r\n<div class="htmlHigh">&lt;script&gt;</div>\r\n<div class="jsHigh">var app = angular.module("myShoppingList", []);\r\napp.controller("myCtrl", function($scope) {\r\n$scope.products = ["Milk", "Bread", "Cheese"];\r\n$scope.addItem = function () {\r\n$scope.products.push($scope.addMe);\r\n}\r\n<strong>    $scope.removeItem = function (x) {\r\n$scope.products.splice(x, 1);\r\n}</strong>\r\n});</div>\r\n<div class="htmlHigh">&lt;/script&gt;\r\n\r\n&lt;div ng-app="myShoppingList" ng-controller="myCtrl"&gt;\r\n&lt;ul&gt;\r\n&lt;li ng-repeat="x in products"&gt;\r\n{{x}}<strong>\r\n&lt;span ng-click="removeItem($index)"&gt;&amp;times;&lt;/span&gt;\r\n</strong>&lt;/li&gt;\r\n&lt;/ul&gt;\r\n&lt;input ng-model="addMe"&gt;\r\n&lt;button ng-click="addItem()"&gt;Add&lt;/button&gt;\r\n&lt;/div&gt;</div>\r\n</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n\r\n<hr />\r\n\r\n<h3>Step 4. Error Handling:</h3>\r\nThe application has some errors, like if you try to add the same item twice, the application crashes. Also, it should not be allowed to add empty items.\r\n\r\nWe will fix that by checking the value before adding new items.\r\n\r\nIn the HTML, we will add a container for error messages, and write an error message when someone tries to add an existing item.\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\nA shopping list, with the possibility to write error messages:\r\n<div class="w3-code notranslate">\r\n<div class="htmlHigh">&lt;script&gt;</div>\r\n<div class="jsHigh">var app = angular.module("myShoppingList", []);\r\napp.controller("myCtrl", function($scope) {\r\n$scope.products = ["Milk", "Bread", "Cheese"];\r\n$scope.addItem = function () {\r\n<strong>        $scope.errortext = "";\r\nif (!$scope.addMe) {return;}\r\nif ($scope.products.indexOf($scope.addMe) == -1) {\r\n</strong>            $scope.products.push($scope.addMe);\r\n<strong>        } else {\r\n$scope.errortext = "The item is already in your shopping list.";\r\n}\r\n</strong>    }\r\n$scope.removeItem = function (x) {\r\n<strong>        $scope.errortext = "";\r\n</strong>        $scope.products.splice(x, 1);\r\n}\r\n});</div>\r\n<div class="htmlHigh">&lt;/script&gt;\r\n\r\n&lt;div ng-app="myShoppingList" ng-controller="myCtrl"&gt;\r\n&lt;ul&gt;\r\n&lt;li ng-repeat="x in products"&gt;\r\n{{x}}<strong>\r\n</strong>            &lt;span ng-click="removeItem($index)"&gt;&amp;times;&lt;/span&gt;\r\n<strong>        </strong>&lt;/li&gt;\r\n&lt;/ul&gt;\r\n&lt;input ng-model="addMe"&gt;\r\n&lt;button ng-click="addItem()"&gt;Add&lt;/button&gt;\r\n<strong>&lt;p&gt;{{errortext}}&lt;/p&gt;</strong>\r\n&lt;/div&gt;</div>\r\n</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n\r\n<hr />\r\n\r\n<h3>Step 5. Design:</h3>\r\nThe application works, but could use a better design. We use the W3.CSS stylesheet to style our application.\r\n\r\nAdd the W3.CSS stylesheet, and include the proper classes throughout the application, and the result will be the same as the shopping list at the top of this page.\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\nStyle your application using the W3.CSS stylesheet:\r\n<div class="w3-code notranslate">\r\n<div class="htmlHigh">&lt;link rel="stylesheet" href="http://www.w3schools.com/lib/w3.css"&gt;</div>\r\n</div>\r\n</div>', 'Angular Application', '', 'inherit', 'closed', 'closed', '', '132-revision-v1', '', '', '2016-05-21 14:35:27', '2016-05-21 14:35:27', '', 132, 'http://localhost/invatacel/2016/05/21/132-revision-v1/', 0, 'revision', '', 0),
(148, 1, '2016-05-21 14:41:33', '2016-05-21 14:41:33', '<h2>JavaScript Can Change HTML Content</h2>\r\nOne of many HTML methods is <strong>getElementById()</strong>.\r\n\r\nThis example uses the method to "find" an HTML element (with id="demo"), and changes the element content (<strong>innerHTML</strong>) to "Hello JavaScript":', 'JS Introduction', '', 'inherit', 'closed', 'closed', '', '65-revision-v1', '', '', '2016-05-21 14:41:33', '2016-05-21 14:41:33', '', 65, 'http://localhost/invatacel/2016/05/21/65-revision-v1/', 0, 'revision', '', 0),
(191, 1, '2016-05-21 14:49:30', '2016-05-21 14:49:30', '<p class="intro">JavaScript can be placed in the &lt;body&gt; and the &lt;head&gt; sections of an HTML page.</p>\r\n\r\n\r\n<hr />\r\n\r\n<h2>The &lt;script&gt; Tag</h2>\r\nIn HTML, JavaScript code must be inserted between &lt;script&gt; and &lt;/script&gt; tags.\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate htmlHigh">&lt;script&gt;\r\ndocument.getElementById("demo").innerHTML = "My First JavaScript";\r\n&lt;/script&gt;</div>\r\n</div>\r\n<table class="lamp">\r\n<tbody>\r\n<tr>\r\n<th><img src="http://www.w3schools.com/images/lamp.jpg" alt="Note" /></th>\r\n<td>Older examples may use a type attribute: &lt;script type="text/javascript"&gt;.\r\nThe type attribute is not required. JavaScript is the default scripting language in HTML.</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n\r\n<hr />\r\n\r\n<h2>JavaScript Functions and Events</h2>\r\nA JavaScript <strong>function</strong> is a block of JavaScript code, that can be executed when "asked" for.\r\n\r\nFor example, a function can be executed when an <b>event</b> occurs, like when the user clicks a button.\r\n\r\nYou will learn much more about functions and events in later chapters.\r\n\r\n<hr />\r\n\r\n<h2>JavaScript in &lt;head&gt; or &lt;body&gt;</h2>\r\nYou can place any number of scripts in an HTML document.\r\n\r\nScripts can be placed in the &lt;body&gt;, or in the &lt;head&gt; section of an HTML page, or in both.\r\n<table class="lamp">\r\n<tbody>\r\n<tr>\r\n<th><img src="http://www.w3schools.com/images/lamp.jpg" alt="Note" /></th>\r\n<td>Keeping all code in one place, is always a good habit.</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n\r\n<hr />\r\n\r\n<h2>JavaScript in &lt;head&gt;</h2>\r\nIn this example, a JavaScript function is placed in the &lt;head&gt; section of an HTML page.\r\n\r\nThe function is invoked (called) when a button is clicked:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate htmlHigh">&lt;!DOCTYPE html&gt;\r\n&lt;html&gt;&lt;head&gt;\r\n&lt;script&gt;\r\nfunction myFunction() {\r\ndocument.getElementById("demo").innerHTML = "Paragraph changed.";\r\n}\r\n&lt;/script&gt;\r\n&lt;/head&gt;&lt;body&gt;\r\n\r\n&lt;h1&gt;My Web Page&lt;/h1&gt;\r\n\r\n&lt;p id="demo"&gt;A Paragraph&lt;/p&gt;\r\n\r\n&lt;button type="button" onclick="myFunction()"&gt;Try it&lt;/button&gt;\r\n\r\n&lt;/body&gt;\r\n&lt;/html&gt;\r\n\r\n</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n\r\n<hr />\r\n\r\n<h2>JavaScript in &lt;body&gt;</h2>\r\nIn this example, a JavaScript function is placed in the &lt;body&gt; section of an HTML page.\r\n\r\nThe function is invoked (called) when a button is clicked:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate htmlHigh">&lt;!DOCTYPE html&gt;\r\n&lt;html&gt;\r\n&lt;body&gt;&lt;h1&gt;My Web Page&lt;/h1&gt;\r\n\r\n&lt;p id="demo"&gt;A Paragraph&lt;/p&gt;\r\n\r\n&lt;button type="button" onclick="myFunction()"&gt;Try it&lt;/button&gt;\r\n\r\n&lt;script&gt;\r\nfunction myFunction() {\r\ndocument.getElementById("demo").innerHTML = "Paragraph changed.";\r\n}\r\n&lt;/script&gt;\r\n\r\n&lt;/body&gt;\r\n&lt;/html&gt;\r\n\r\n</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n<table class="lamp">\r\n<tbody>\r\n<tr>\r\n<th><img src="http://www.w3schools.com/images/lamp.jpg" alt="Note" /></th>\r\n<td>It is a good idea to place scripts at the bottom of the &lt;body&gt; element.\r\nThis can improve page load, because script compilation can slow down the display.</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n\r\n<hr />\r\n\r\n<h2>External JavaScript</h2>\r\nScripts can also be placed in external files:\r\n<div class="w3-example">\r\n<h3>myScript.js</h3>\r\n<div class="w3-code notranslate jsHigh">function myFunction() {\r\ndocument.getElementById("demo").innerHTML = "Paragraph changed.";\r\n}</div>\r\n</div>\r\nExternal scripts are practical when the same code is used in many different web pages.\r\n\r\nJavaScript files have the file extension<strong> .js</strong>.\r\n\r\nTo use an external script, put the name of the script file in the src (source) attribute of a &lt;script&gt; tag:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate htmlHigh">&lt;!DOCTYPE html&gt;\r\n&lt;html&gt;\r\n&lt;body&gt;\r\n&lt;script src="myScript.js"&gt;&lt;/script&gt;\r\n&lt;/body&gt;\r\n&lt;/html&gt;</div>\r\n</div>\r\n<div class="w3-example"></div>\r\nYou can place an external script reference in &lt;head&gt; or &lt;body&gt; as you like.\r\n\r\nThe script will behave as if it was located exactly where the &lt;script&gt; tag is located.\r\n<table class="lamp">\r\n<tbody>\r\n<tr>\r\n<th><img src="http://www.w3schools.com/images/lamp.jpg" alt="Note" /></th>\r\n<td>External scripts cannot contain &lt;script&gt; tags.</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n\r\n<hr />\r\n\r\n<h2>External JavaScript Advantages</h2>\r\nPlacing JavaScripts in external files has some advantages:\r\n<ul>\r\n 	<li>It separates HTML and code</li>\r\n 	<li>It makes HTML and JavaScript easier to read and maintain</li>\r\n 	<li>Cached JavaScript files can speed up page loads</li>\r\n</ul>', 'JS Where To', '', 'publish', 'closed', 'closed', '', 'js-where-to', '', '', '2016-05-21 14:54:13', '2016-05-21 14:54:13', '', 0, 'http://localhost/invatacel/lessons/js-where-to/', 0, 'lp_lesson', '', 0);
INSERT INTO `wp_posts` (`ID`, `post_author`, `post_date`, `post_date_gmt`, `post_content`, `post_title`, `post_excerpt`, `post_status`, `comment_status`, `ping_status`, `post_password`, `post_name`, `to_ping`, `pinged`, `post_modified`, `post_modified_gmt`, `post_content_filtered`, `post_parent`, `guid`, `menu_order`, `post_type`, `post_mime_type`, `comment_count`) VALUES
(192, 1, '2016-05-21 14:49:46', '2016-05-21 14:49:46', '<p class="intro">JavaScript does NOT have any built-in print or display functions.</p>\r\n\r\n\r\n<hr />\r\n\r\n<h2>JavaScript Display Possibilities</h2>\r\nJavaScript can "display" data in different ways:\r\n<ul>\r\n 	<li>Writing into an alert box, using <strong>window.alert()</strong>.</li>\r\n 	<li>Writing into the HTML output using <strong>document.write()</strong>.</li>\r\n 	<li>Writing into an HTML element, using <strong>innerHTML</strong>.</li>\r\n 	<li>Writing into the browser console, using <strong>console.log()</strong>.</li>\r\n</ul>\r\n\r\n<hr />\r\n\r\n<h2>Using window.alert()</h2>\r\nYou can use an alert box to display data:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate htmlHigh">&lt;!DOCTYPE html&gt;\r\n&lt;html&gt;\r\n&lt;body&gt;\r\n\r\n&lt;h1&gt;My First Web Page&lt;/h1&gt;\r\n&lt;p&gt;My first paragraph.&lt;/p&gt;\r\n\r\n&lt;script&gt;\r\nwindow.alert(5 + 6);\r\n&lt;/script&gt;\r\n\r\n&lt;/body&gt;\r\n&lt;/html&gt;</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n\r\n<hr />\r\n\r\n<h2>Using document.write()</h2>\r\nFor testing purposes, it is convenient to use <strong>document.write()</strong>:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate htmlHigh">&lt;!DOCTYPE html&gt;\r\n&lt;html&gt;\r\n&lt;body&gt;\r\n\r\n&lt;h1&gt;My First Web Page&lt;/h1&gt;\r\n&lt;p&gt;My first paragraph.&lt;/p&gt;\r\n\r\n&lt;script&gt;\r\ndocument.write(5 + 6);\r\n&lt;/script&gt;\r\n\r\n&lt;/body&gt;\r\n&lt;/html&gt;</div>\r\n</div>\r\n<div class="w3-example"></div>\r\nUsing document.write() after an HTML document is fully loaded, will <strong>delete all existing HTML</strong>:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate htmlHigh">&lt;!DOCTYPE html&gt;\r\n&lt;html&gt;\r\n&lt;body&gt;\r\n\r\n&lt;h1&gt;My First Web Page&lt;/h1&gt;\r\n&lt;p&gt;My first paragraph.&lt;/p&gt;\r\n\r\n&lt;button onclick="document.write(5 + 6)"&gt;Try it&lt;/button&gt;\r\n\r\n&lt;/body&gt;\r\n&lt;/html&gt;</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n<table class="lamp">\r\n<tbody>\r\n<tr>\r\n<th><img src="http://www.w3schools.com/images/lamp.jpg" alt="Note" /></th>\r\n<td>The document.write() method should be used only for testing.</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n\r\n<hr />\r\n\r\n<h2>Using innerHTML</h2>\r\nTo access an HTML element, JavaScript can use the <strong>document.getElementById(id)</strong> method.\r\n\r\nThe <strong>id</strong> attribute defines the HTML element. The <strong>innerHTML</strong> property defines the HTML content:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate htmlHigh">&lt;!DOCTYPE html&gt;\r\n&lt;html&gt;\r\n&lt;body&gt;\r\n\r\n&lt;h1&gt;My First Web Page&lt;/h1&gt;\r\n&lt;p&gt;My First Paragraph&lt;/p&gt;\r\n\r\n&lt;p id="demo"&gt;&lt;/p&gt;\r\n\r\n&lt;script&gt;\r\ndocument.getElementById("demo").innerHTML = 5 + 6;\r\n&lt;/script&gt;\r\n\r\n&lt;/body&gt;\r\n&lt;/html&gt;</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n<table class="lamp">\r\n<tbody>\r\n<tr>\r\n<th><img src="http://www.w3schools.com/images/lamp.jpg" alt="Note" /></th>\r\n<td>To "display data" in HTML, (in most cases) you will set the value of an innerHTML property.</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n\r\n<hr />\r\n\r\n<h2>Using console.log()</h2>\r\nIn your browser, you can use the <strong>console.log()</strong> method to display data.\r\n\r\nActivate the browser console with F12, and select "Console" in the menu.\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate htmlHigh">&lt;!DOCTYPE html&gt;\r\n&lt;html&gt;\r\n&lt;body&gt;\r\n\r\n&lt;h1&gt;My First Web Page&lt;/h1&gt;\r\n&lt;p&gt;My first paragraph.&lt;/p&gt;\r\n\r\n&lt;script&gt;\r\nconsole.log(5 + 6);\r\n&lt;/script&gt;\r\n\r\n&lt;/body&gt;\r\n&lt;/html&gt;</div>\r\n</div>', 'JS Output', '', 'publish', 'closed', 'closed', '', 'js-output', '', '', '2016-05-21 14:54:21', '2016-05-21 14:54:21', '', 0, 'http://localhost/invatacel/lessons/js-output/', 0, 'lp_lesson', '', 0),
(193, 1, '2016-05-21 14:49:51', '2016-05-21 14:49:51', '<p class="intro">JavaScript <strong>syntax</strong> is the set of rules, how JavaScript programs are constructed.</p>\r\n\r\n\r\n<hr />\r\n\r\n<h2>JavaScript Programs</h2>\r\nA <strong>computer program</strong> is a list of "instructions" to be "executed" by the computer.\r\n\r\nIn a programming language, these program instructions are called <strong>statements</strong>.\r\n\r\nJavaScript is a <strong>programming language</strong>.\r\n\r\nJavaScript statements are separated by <strong>semicolons</strong>.\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate jsHigh">var x = 5;\r\nvar y = 6;\r\nvar z = x + y;</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n<table class="lamp">\r\n<tbody>\r\n<tr>\r\n<th><img src="http://www.w3schools.com/images/lamp.jpg" alt="Note" /></th>\r\n<td>In HTML, JavaScript programs can be executed by the web browser.</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n\r\n<hr />\r\n\r\n<h2>JavaScript Statements</h2>\r\nJavaScript statements are composed of:\r\n\r\nValues, Operators, Expressions, Keywords, and Comments.\r\n\r\n<hr />\r\n\r\n<h2>JavaScript Values</h2>\r\nThe JavaScript syntax defines two types of values: Fixed values and variable values.\r\n\r\nFixed values are called <strong>literals</strong>. Variable values are called <strong>variables</strong>.\r\n\r\n<hr />\r\n\r\n<h2>JavaScript Literals</h2>\r\nThe most important rules for writing fixed values are:\r\n\r\n<strong>Numbers</strong> are written with or without decimals:\r\n<div class="w3-example">\r\n<div class="w3-code notranslate jsHigh">10.50\r\n\r\n1001</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n<strong>Strings</strong> are text, written within double or single quotes:\r\n<div class="w3-example">\r\n<div class="w3-code notranslate jsHigh">"John Doe"\r\n\r\n''John Doe''</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n\r\n<hr />\r\n\r\n<h2>JavaScript Variables</h2>\r\nIn a programming language, <strong>variables</strong> are used to <strong>store</strong> data values.\r\n\r\nJavaScript uses the <strong>var </strong> keyword to <strong>declare</strong> variables.\r\n\r\nAn <strong>equal sign</strong> is used to <strong>assign values</strong> to variables.\r\n\r\nIn this example, x is defined as a variable. Then, x is assigned (given) the value 6:\r\n<div class="w3-example">\r\n<div class="w3-code notranslate jsHigh">var x;\r\n\r\nx = 6;</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n\r\n<hr />\r\n\r\n<h2>JavaScript Operators</h2>\r\nJavaScript uses an <strong>assignment operator</strong> ( = ) to <strong>assign</strong> values to variables:\r\n<div class="w3-example">\r\n<div class="w3-code notranslate jsHigh">var x = 5;\r\nvar y = 6;</div>\r\n</div>\r\n<div class="w3-example"></div>\r\nJavaScript uses <strong>arithmetic operators</strong> ( + - *  / ) to <strong>compute</strong> values:\r\n<div class="w3-example">\r\n<div class="w3-code notranslate jsHigh">(5 + 6) * 10</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n\r\n<hr />\r\n\r\n<h2>JavaScript Expressions</h2>\r\nAn expression is a combination of values, variables, and operators, which computes to a value.\r\n\r\nThe computation is called an evaluation.\r\n\r\nFor example, 5 * 10 evaluates to 50:\r\n<div class="w3-example">\r\n<div class="w3-code notranslate jsHigh">5 * 10</div>\r\n</div>\r\n<div class="w3-example"></div>\r\nExpressions can also contain variable values:\r\n<div class="w3-example">\r\n<div class="w3-code notranslate jsHigh">x * 10</div>\r\n</div>\r\n<div class="w3-example"></div>\r\nThe values can be of various types, such as numbers and strings.\r\n\r\nFor example, "John" + " " + "Doe", evaluates to "John Doe":\r\n<div class="w3-example">\r\n<div class="w3-code notranslate jsHigh">"John" + " " + "Doe"</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n\r\n<hr />\r\n\r\n<h2>JavaScript Keywords</h2>\r\nJavaScript <strong>keywords</strong> are used to identify actions to be performed.\r\n\r\nThe <strong>var</strong> keyword tells the browser to create a new variable:\r\n<div class="w3-example">\r\n<div class="w3-code notranslate jsHigh">var x = 5 + 6;\r\nvar y = x * 10;</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n\r\n<hr />\r\n\r\n<h2>JavaScript Comments</h2>\r\nNot all JavaScript statements are "executed".\r\n\r\nCode after double slashes <strong>//</strong> or between <strong>/*</strong> and <strong>*/</strong> is treated as a <strong>comment</strong>.\r\n\r\nComments are ignored, and will not be executed:\r\n<div class="w3-example">\r\n<div class="w3-code notranslate jsHigh">var x = 5;   // I will be executed\r\n\r\n// var x = 6;   I will NOT be executed</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n\r\n<hr />\r\n\r\n<h2>JavaScript Identifiers</h2>\r\nIdentifiers are names.\r\n\r\nIn JavaScript, identifiers are used to name variables (and keywords, and functions, and labels).\r\n\r\nThe rules for legal names are much the same in most programming languages.\r\n\r\nIn JavaScript, the first character must be a letter, an underscore (_), or a dollar sign ($).\r\n\r\nSubsequent characters may be letters, digits, underscores, or dollar signs.\r\n<table class="lamp">\r\n<tbody>\r\n<tr>\r\n<th><img src="http://www.w3schools.com/images/lamp.jpg" alt="Note" /></th>\r\n<td>Numbers are not allowed as the first character.\r\nThis way JavaScript can easily distinguish identifiers from numbers.</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n\r\n<hr />\r\n\r\n<h2>JavaScript is Case Sensitive</h2>\r\nAll JavaScript identifiers are <strong>case sensitive</strong>.\r\n\r\nThe variables <strong>lastName</strong> and <strong>lastname</strong>, are two different variables.\r\n<div class="w3-example">\r\n<div class="w3-code notranslate jsHigh">lastName = "Doe";\r\nlastname = "Peterson";</div>\r\n</div>\r\n<div class="w3-example"></div>\r\nJavaScript does not interpret <strong>VAR</strong> or <strong>Var</strong> as the keyword <strong>var</strong>.\r\n\r\n<hr />\r\n\r\n<h2>JavaScript and Camel Case</h2>\r\nHistorically, programmers have used three ways of joining multiple words into one variable name:\r\n\r\n<strong>Hyphens:</strong>\r\n\r\nfirst-name, last-name, master-card, inter-city.\r\n\r\n<strong>Underscore:</strong>\r\n\r\nfirst_name, last_name, master_card, inter_city.\r\n\r\n<strong>Camel Case:</strong>\r\n\r\nFirstName, LastName, MasterCard, InterCity.\r\n\r\n<img src="http://www.w3schools.com/js/pic_camelcase.jpg" alt="camelCase" />\r\n\r\nIn programming languages, especially in JavaScript, camel case often starts with a lowercase letter:\r\n\r\nfirstName, lastName, masterCard, interCity.\r\n<table class="lamp">\r\n<tbody>\r\n<tr>\r\n<th><img src="http://www.w3schools.com/images/lamp.jpg" alt="Note" /></th>\r\n<td>Hyphens are not allowed in JavaScript. It is reserved for subtractions.</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n\r\n<hr />\r\n\r\n<h2>JavaScript Character Set</h2>\r\nJavaScript uses the <strong>Unicode</strong> character set.\r\n\r\nUnicode covers (almost) all the characters, punctuations, and symbols in the world.\r\n\r\nFor a closer look, please study our <a href="http://www.w3schools.com/charsets/ref_html_utf8.asp">Complete Unicode Reference</a>.', 'JS Syntax', '', 'publish', 'closed', 'closed', '', 'js-syntax', '', '', '2016-05-21 14:54:46', '2016-05-21 14:54:46', '', 0, 'http://localhost/invatacel/lessons/js-syntax/', 0, 'lp_lesson', '', 0),
(194, 1, '2016-05-21 14:50:00', '2016-05-21 14:50:00', 'In HTML, JavaScript statements are "instructions" to be "executed" by the web browser.\r\n\r\n<hr />\r\n\r\n<h2>JavaScript Statements</h2>\r\nThis statement tells the browser to write "Hello Dolly." inside an HTML element with id="demo":\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate jsHigh">document.getElementById("demo").innerHTML = "Hello Dolly.";</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n\r\n<hr />\r\n\r\n<h2>JavaScript Programs</h2>\r\nMost JavaScript programs contain many JavaScript statements.\r\n\r\nThe statements are executed, one by one, in the same order as they are written.\r\n\r\nIn this example x, y, and z are given values, and finally z is displayed:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate jsHigh">var x = 5;\r\nvar y = 6;\r\nvar z = x + y;\r\ndocument.getElementById("demo").innerHTML = z;</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n<table class="lamp">\r\n<tbody>\r\n<tr>\r\n<th><img src="http://www.w3schools.com/images/lamp.jpg" alt="Note" /></th>\r\n<td>JavaScript programs (and JavaScript statements) are often called JavaScript code.</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n\r\n<hr />\r\n\r\n<h2>Semicolons ;</h2>\r\nSemicolons separate JavaScript statements.\r\n\r\nAdd a semicolon at the end of each executable statement:\r\n<div class="w3-example">\r\n<div class="w3-code notranslate jsHigh">a = 5;\r\nb = 6;\r\nc = a + b;</div>\r\n</div>\r\n<div class="w3-example"></div>\r\nWhen separated by semicolons, multiple statements on one line are allowed:\r\n<div class="w3-example">\r\n<div class="w3-code notranslate jsHigh">a = 5; b = 6; c = a + b;</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n<table class="lamp">\r\n<tbody>\r\n<tr>\r\n<th><img src="http://www.w3schools.com/images/lamp.jpg" alt="Note" /></th>\r\n<td>On the web, you might see examples without semicolons.\r\nEnding statements with semicolon is not required, but highly recommended.</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n\r\n<hr />\r\n\r\n<h2>JavaScript White Space</h2>\r\nJavaScript ignores multiple spaces. You can add white space to your script to make it more readable.\r\n\r\nThe following lines are equivalent:\r\n<div class="w3-example">\r\n<div class="w3-code notranslate jsHigh">var person = "Hege";\r\nvar person="Hege";</div>\r\n</div>\r\nA good practice is to put spaces around operators ( = + - * / ):\r\n<div class="w3-example">\r\n<div class="w3-code notranslate jsHigh">var x = y + z;</div>\r\n</div>\r\n\r\n<hr />\r\n\r\n<h2>JavaScript Line Length and Line Breaks</h2>\r\nFor best readability, programmers often like to avoid code lines longer than 80 characters.\r\n\r\nIf a JavaScript statement does not fit on one line, the best place to break it, is after an operator:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate jsHigh">document.getElementById("demo").innerHTML =\r\n"Hello Dolly.";</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n\r\n<hr />\r\n\r\n<h2>JavaScript Code Blocks</h2>\r\nJavaScript statements can be grouped together in code blocks, inside curly brackets {...}.\r\n\r\nThe purpose of code blocks is to define statements to be executed together.\r\n\r\nOne place you will find statements grouped together in blocks, are in JavaScript functions:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate jsHigh">function myFunction() {\r\ndocument.getElementById("demo").innerHTML = "Hello Dolly.";\r\ndocument.getElementById("myDIV").innerHTML = "How are you?";\r\n}</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n<table class="lamp">\r\n<tbody>\r\n<tr>\r\n<th><img src="http://www.w3schools.com/images/lamp.jpg" alt="Note" /></th>\r\n<td>In this tutorial we use 4 spaces of indentation for code blocks.\r\nYou will learn more about functions later in this tutorial.</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n\r\n<hr />\r\n\r\n<h2>JavaScript Keywords</h2>\r\nJavaScript statements often start with a <strong>keyword</strong> to identify the JavaScript action to be performed.\r\n\r\nHere is a list of some of the keywords you will learn about in this tutorial:\r\n<table class="w3-table-all">\r\n<tbody>\r\n<tr>\r\n<th>Keyword</th>\r\n<th>Description</th>\r\n</tr>\r\n<tr>\r\n<td>break</td>\r\n<td>Terminates a switch or a loop</td>\r\n</tr>\r\n<tr>\r\n<td>continue</td>\r\n<td>Jumps out of a loop and starts at the top</td>\r\n</tr>\r\n<tr>\r\n<td>debugger</td>\r\n<td>Stops the execution of JavaScript, and calls (if available) the debugging function</td>\r\n</tr>\r\n<tr>\r\n<td>do ... while</td>\r\n<td>Executes a block of statements, and repeats the block, while a condition is true</td>\r\n</tr>\r\n<tr>\r\n<td>for</td>\r\n<td>Marks a block of statements to be executed, as long as a condition is true</td>\r\n</tr>\r\n<tr>\r\n<td>function</td>\r\n<td>Declares a function</td>\r\n</tr>\r\n<tr>\r\n<td>if ... else</td>\r\n<td>Marks a block of statements to be executed, depending on a condition</td>\r\n</tr>\r\n<tr>\r\n<td>return</td>\r\n<td>Exits a function</td>\r\n</tr>\r\n<tr>\r\n<td>switch</td>\r\n<td>Marks a block of statements to be executed, depending on different cases</td>\r\n</tr>\r\n<tr>\r\n<td>try ... catch</td>\r\n<td>Implements error handling to a block of statements</td>\r\n</tr>\r\n<tr>\r\n<td>var</td>\r\n<td>Declares a variable</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n<table class="lamp">\r\n<tbody>\r\n<tr>\r\n<th><img src="http://www.w3schools.com/images/lamp.jpg" alt="Note" /></th>\r\n<td>JavaScript keywords are reserved words. Reserved words cannot be used as names for variables.</td>\r\n</tr>\r\n</tbody>\r\n</table>', 'JS Statements', '', 'publish', 'closed', 'closed', '', 'js-statements', '', '', '2016-05-21 14:55:05', '2016-05-21 14:55:05', '', 0, 'http://localhost/invatacel/lessons/js-statements/', 0, 'lp_lesson', '', 0),
(195, 1, '2016-05-21 14:50:07', '2016-05-21 14:50:07', '<p class="intro">JavaScript comments can be used to explain JavaScript code, and to make it more readable.</p>\r\n<p class="intro">JavaScript comments can also be used to prevent execution, when testing alternative code.</p>\r\n\r\n\r\n<hr />\r\n\r\n<h2>Single Line Comments</h2>\r\nSingle line comments start with //.\r\n\r\nAny text between // and the end of the line, will be ignored by JavaScript (will not be executed).\r\n\r\nThis example uses a single line comment before each line, to explain the code:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate jsHigh">// Change heading:\r\ndocument.getElementById("myH").innerHTML = "My First Page";\r\n// Change paragraph:\r\ndocument.getElementById("myP").innerHTML = "My first paragraph.";</div>\r\n</div>\r\n<div class="w3-example"></div>\r\nThis example uses a single line comment at the end of each line, to explain the code:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate jsHigh">var x = 5;      // Declare x, give it the value of 5\r\nvar y = x + 2;  // Declare y, give it the value of x + 2</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n\r\n<hr />\r\n\r\n<h2>Multi-line Comments</h2>\r\nMulti-line comments start with /* and end with */.\r\n\r\nAny text between /* and */ will be ignored by JavaScript.\r\n\r\nThis example uses a multi-line comment (a comment block) to explain the code:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate jsHigh">/*\r\nThe code below will change\r\nthe heading with id = "myH"\r\nand the paragraph with id = "myP"\r\nin my web page:\r\n*/\r\ndocument.getElementById("myH").innerHTML = "My First Page";\r\ndocument.getElementById("myP").innerHTML = "My first paragraph.";</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n<table class="lamp">\r\n<tbody>\r\n<tr>\r\n<th><img src="http://www.w3schools.com/images/lamp.jpg" alt="Note" /></th>\r\n<td>It is most common to use single line comments.\r\nBlock comments are often used for formal documentation.</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n\r\n<hr />\r\n\r\n<h2>Using Comments to Prevent Execution</h2>\r\nUsing comments to prevent execution of code, is suitable for code testing.\r\n\r\nAdding // in front of a code line changes the code lines from an executable line to a comment.\r\n\r\nThis example uses // to prevent execution of one of the code lines:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate jsHigh">//document.getElementById("myH").innerHTML = "My First Page";\r\ndocument.getElementById("myP").innerHTML = "My first paragraph.";</div>\r\n</div>\r\n<div class="w3-example"></div>\r\nThis example uses a comment block to prevent execution of multiple lines:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate jsHigh">/*\r\ndocument.getElementById("myH").innerHTML = "My First Page";\r\ndocument.getElementById("myP").innerHTML = "My first paragraph.";\r\n*/</div>\r\n</div>', 'JS Comments', '', 'publish', 'closed', 'closed', '', 'js-comments', '', '', '2016-05-21 14:55:23', '2016-05-21 14:55:23', '', 0, 'http://localhost/invatacel/lessons/js-comments/', 0, 'lp_lesson', '', 0),
(196, 1, '2016-05-21 14:50:13', '2016-05-21 14:50:13', '<h2>JavaScript Variables</h2>\r\nJavaScript variables are containers for storing data values.\r\n\r\nIn this example, x, y, and z, are variables:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate jsHigh">var x = 5;\r\nvar y = 6;\r\nvar z = x + y;</div>\r\n</div>\r\n<div class="w3-example"></div>\r\nFrom the example above, you can expect:\r\n<ul>\r\n 	<li>x stores the value 5</li>\r\n 	<li>y stores the value 6</li>\r\n 	<li>z stores the value 11</li>\r\n</ul>\r\n\r\n<hr />\r\n\r\n<h2>Much Like Algebra</h2>\r\nIn this example, price1, price2, and total, are variables:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate jsHigh">var price1 = 5;\r\nvar price2 = 6;\r\nvar total = price1 + price2;</div>\r\n</div>\r\n<div class="w3-example"></div>\r\nIn programming, just like in algebra, we use variables (like price1) to hold values.\r\n\r\nIn programming, just like in algebra, we use variables in expressions (total = price1 + price2).\r\n\r\nFrom the example above, you can calculate the total to be 11.\r\n<table class="lamp">\r\n<tbody>\r\n<tr>\r\n<th><img src="http://www.w3schools.com/images/lamp.jpg" alt="Note" /></th>\r\n<td>JavaScript variables are containers for storing data values.</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n\r\n<hr />\r\n\r\n<h2>JavaScript Identifiers</h2>\r\nAll JavaScript <strong>variables</strong> must be <strong>identified</strong> with <strong>unique names</strong>.\r\n\r\nThese unique names are called <strong>identifiers</strong>.\r\n\r\nIdentifiers can be short names (like x and y), or more descriptive names (age, sum, totalVolume).\r\n\r\nThe general rules for constructing names for variables (unique identifiers) are:\r\n<ul>\r\n 	<li>Names can contain letters, digits, underscores, and dollar signs.</li>\r\n 	<li>Names must begin with a letter</li>\r\n 	<li>Names can also begin with $ and _ (but we will not use it in this tutorial)</li>\r\n 	<li>Names are case sensitive (y and Y are different variables)</li>\r\n 	<li>Reserved words (like JavaScript keywords) cannot be used as names</li>\r\n</ul>\r\n<table class="lamp">\r\n<tbody>\r\n<tr>\r\n<th><img src="http://www.w3schools.com/images/lamp.jpg" alt="Note" /></th>\r\n<td>JavaScript identifiers are case-sensitive.</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n\r\n<hr />\r\n\r\n<h2>The Assignment Operator</h2>\r\nIn JavaScript, the equal sign (=) is an "assignment" operator, not an "equal to" operator.\r\n\r\nThis is different from algebra. The following does not make sense in algebra:\r\n<div class="w3-example">\r\n<div class="w3-code notranslate jsHigh">x = x + 5</div>\r\n</div>\r\nIn JavaScript, however, it makes perfect sense: it assigns the value of x + 5 to x.\r\n\r\n(It calculates the value of x + 5 and puts the result into x. The value of x is incremented by 5.)\r\n<table class="lamp">\r\n<tbody>\r\n<tr>\r\n<th><img src="http://www.w3schools.com/images/lamp.jpg" alt="Note" /></th>\r\n<td>The "equal to" operator is written like == in JavaScript.</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n\r\n<hr />\r\n\r\n<h2>JavaScript Data Types</h2>\r\nJavaScript variables can hold numbers like 100, and text values like "John Doe".\r\n\r\nIn programming, text values are called text strings.\r\n\r\nJavaScript can handle many types of data, but for now, just think of numbers and strings.\r\n\r\nStrings are written inside double or single quotes. Numbers are written without quotes.\r\n\r\nIf you put quotes around a number, it will be treated as a text string.\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate jsHigh">var pi = 3.14;\r\nvar person = "John Doe";\r\nvar answer = ''Yes I am!'';</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n\r\n<hr />\r\n\r\n<h2>Declaring (Creating) JavaScript Variables</h2>\r\nCreating a variable in JavaScript is called "declaring" a variable.\r\n\r\nYou declare a JavaScript variable with the <b>var</b> keyword:\r\n<div class="w3-example">\r\n<div class="w3-code notranslate jsHigh">var carName;</div>\r\n</div>\r\nAfter the declaration, the variable has no value. (Technically it has the value of <strong>undefined</strong>)\r\n\r\nTo <strong>assign</strong> a value to the variable, use the equal sign:\r\n<div class="w3-example">\r\n<div class="w3-code notranslate jsHigh">carName = "Volvo";</div>\r\n</div>\r\nYou can also assign a value to the variable when you declare it:\r\n<div class="w3-example">\r\n<div class="w3-code notranslate jsHigh">var carName = "Volvo";</div>\r\n</div>\r\nIn the example below, we create a variable called carName and assign the value "Volvo" to it.\r\n\r\nThen we "output" the value inside an HTML paragraph with id="demo":\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate htmlHigh">&lt;p id="demo"&gt;&lt;/p&gt;\r\n\r\n&lt;script&gt;\r\nvar carName = "Volvo";\r\ndocument.getElementById("demo").innerHTML = carName;\r\n&lt;/script&gt;</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n<table class="lamp">\r\n<tbody>\r\n<tr>\r\n<th><img src="http://www.w3schools.com/images/lamp.jpg" alt="Note" /></th>\r\n<td>It''s a good programming practice to declare all variables at the beginning of a script.</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n\r\n<hr />\r\n\r\n<h2>One Statement, Many Variables</h2>\r\nYou can declare many variables in one statement.\r\n\r\nStart the statement with <b>var</b> and separate the variables by <strong>comma</strong>:\r\n<div class="w3-example">\r\n<div class="w3-code notranslate jsHigh">var person = "John Doe", carName = "Volvo", price = 200;</div>\r\n</div>\r\n<div class="w3-example"></div>\r\nA declaration can span multiple lines:\r\n<div class="w3-example">\r\n<div class="w3-code notranslate jsHigh">var person = "John Doe",\r\ncarName = "Volvo",\r\nprice = 200;</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n\r\n<hr />\r\n\r\n<h2>Value = undefined</h2>\r\nIn computer programs, variables are often declared without a value. The value can be something that has to be calculated, or something that will be provided later, like user input.\r\n\r\nA variable declared without a value will have the value <b> undefined</b>.\r\n\r\nThe variable carName will have the value undefined after the execution of this statement:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate jsHigh">var carName;</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n\r\n<hr />\r\n\r\n<h2>Re-Declaring JavaScript Variables</h2>\r\nIf you re-declare a JavaScript variable, it will not lose its value.\r\n\r\nThe variable carName will still have the value "Volvo" after the execution of these statements:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate jsHigh">var carName = "Volvo";\r\nvar carName;</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n\r\n<hr />\r\n\r\n<h2>JavaScript Arithmetic</h2>\r\nAs with algebra, you can do arithmetic with JavaScript variables, using operators like = and +:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate jsHigh">var x = 5 + 2 + 3;</div>\r\n</div>\r\n<div class="w3-example"></div>\r\nYou can also add strings, but strings will be concatenated (added end-to-end):\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate jsHigh">var x = "John" + " " + "Doe";</div>\r\n</div>\r\n<div class="w3-example"></div>\r\nAlso try this:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate jsHigh">var x = "5" + 2 + 3;</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n<table class="lamp">\r\n<tbody>\r\n<tr>\r\n<th><img src="http://www.w3schools.com/images/lamp.jpg" alt="Note" /></th>\r\n<td>If you add a number to a string, the number will be treated as string, and concatenated.</td>\r\n</tr>\r\n</tbody>\r\n</table>', 'JS Variables', '', 'publish', 'closed', 'closed', '', 'js-variables', '', '', '2016-05-21 14:55:46', '2016-05-21 14:55:46', '', 0, 'http://localhost/invatacel/lessons/js-variables/', 0, 'lp_lesson', '', 0),
(197, 1, '2016-05-21 14:50:20', '2016-05-21 14:50:20', '<h3>Example</h3>\r\nAssign values to variables and add them together:\r\n<div class="w3-code notranslate jsHigh">var x = 5;         // assign the value 5 to x\r\nvar y = 2;         // assign the value 2 to y\r\nvar z = x + y;     // assign the value 7 to z (x + y)</div>\r\n<div class="w3-example"></div>\r\n\r\n<hr />\r\n\r\n<h2>JavaScript Arithmetic Operators</h2>\r\nArithmetic operators are used to perform arithmetic on numbers (literals or variables).\r\n<table class="w3-table-all notranslate">\r\n<tbody>\r\n<tr>\r\n<th>Operator</th>\r\n<th>Description</th>\r\n</tr>\r\n<tr>\r\n<td>+</td>\r\n<td>Addition</td>\r\n</tr>\r\n<tr>\r\n<td>-</td>\r\n<td>Subtraction</td>\r\n</tr>\r\n<tr>\r\n<td>*</td>\r\n<td>Multiplication</td>\r\n</tr>\r\n<tr>\r\n<td>/</td>\r\n<td>Division</td>\r\n</tr>\r\n<tr>\r\n<td>%</td>\r\n<td>Modulus</td>\r\n</tr>\r\n<tr>\r\n<td>++</td>\r\n<td>Increment</td>\r\n</tr>\r\n<tr>\r\n<td>--</td>\r\n<td>Decrement</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\nThe <strong>addition</strong> operator (+) adds numbers:\r\n<div class="w3-example">\r\n<h3>Adding</h3>\r\n<div class="w3-code notranslate jsHigh">var x = 5;\r\nvar y = 2;\r\nvar z = x + y;</div>\r\n</div>\r\n<div class="w3-example"></div>\r\nThe <strong>multiplication</strong> operator (*) multiplies numbers.\r\n<div class="w3-example">\r\n<h3>Multiplying</h3>\r\n<div class="w3-code notranslate jsHigh">var x = 5;\r\nvar y = 2;\r\nvar z = x * y;</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n<table class="lamp">\r\n<tbody>\r\n<tr>\r\n<th><img src="http://www.w3schools.com/images/lamp.jpg" alt="Note" /></th>\r\n<td>You will learn more about JavaScript operators in the next chapters.</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n\r\n<hr />\r\n\r\n<h2>JavaScript Assignment Operators</h2>\r\nAssignment operators assign values to JavaScript variables.\r\n<table class="w3-table-all notranslate">\r\n<tbody>\r\n<tr>\r\n<th>Operator</th>\r\n<th>Example</th>\r\n<th>Same As</th>\r\n</tr>\r\n<tr>\r\n<td>=</td>\r\n<td>x = y</td>\r\n<td>x = y</td>\r\n</tr>\r\n<tr>\r\n<td>+=</td>\r\n<td>x += y</td>\r\n<td>x = x + y</td>\r\n</tr>\r\n<tr>\r\n<td>-=</td>\r\n<td>x -= y</td>\r\n<td>x = x - y</td>\r\n</tr>\r\n<tr>\r\n<td>*=</td>\r\n<td>x *= y</td>\r\n<td>x = x * y</td>\r\n</tr>\r\n<tr>\r\n<td>/=</td>\r\n<td>x /= y</td>\r\n<td>x = x / y</td>\r\n</tr>\r\n<tr>\r\n<td>%=</td>\r\n<td>x %= y</td>\r\n<td>x = x % y</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\nThe <strong>assignment</strong> operator (=) assigns a value to a variable.\r\n<div class="w3-example">\r\n<h3>Assignment</h3>\r\n<div class="w3-code notranslate jsHigh">var x = 10;</div>\r\n</div>\r\n<div class="w3-example"></div>\r\nThe <strong>addition assignment</strong> operator (+=) adds a value to a variable.\r\n<div class="w3-example">\r\n<h3>Assignment</h3>\r\n<div class="w3-code notranslate jsHigh">var x = 10;\r\nx += 5;</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n\r\n<hr />\r\n\r\n<h2>JavaScript String Operators</h2>\r\nThe + operator can also be used to add (concatenate) strings.\r\n<table class="lamp">\r\n<tbody>\r\n<tr>\r\n<th><img src="http://www.w3schools.com/images/lamp.jpg" alt="Note" /></th>\r\n<td>When used on strings, the + operator is called the concatenation operator.</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate jsHigh">txt1 = "John";\r\ntxt2 = "Doe";\r\ntxt3 = txt1 + " " + txt2;</div>\r\nThe result of <strong>txt3</strong> will be:\r\n<div class="w3-code notranslate">John Doe</div>\r\n</div>\r\n<div class="w3-example"></div>\r\nThe += assignment operator can also be used to add (concatenate) strings:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate jsHigh">txt1 = "What a very ";\r\ntxt1 += "nice day";</div>\r\nThe result of <strong>txt1</strong> will be:\r\n<div class="w3-code notranslate">What a very nice day</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n\r\n<hr />\r\n\r\n<h2>Adding Strings and Numbers</h2>\r\nAdding two numbers, will return the sum, but adding a number and a string will return a string:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate jsHigh">x = 5 + 5;\r\ny = "5" + 5;\r\nz = "Hello" + 5;</div>\r\nThe result of <em>x</em>,<em> y</em>, and <em>z</em> will be:\r\n<div class="w3-code notranslate">10\r\n55\r\nHello5</div>\r\n</div>\r\n<div class="w3-example"></div>\r\nThe rule is: <b>If you add a number and a string, the result will be a string!</b>\r\n\r\n<hr />\r\n\r\n<h2>JavaScript Comparison and Logical Operators</h2>\r\n<div class="table-responsive">\r\n<table class="w3-table-all notranslate">\r\n<tbody>\r\n<tr>\r\n<th>Operator</th>\r\n<th>Description</th>\r\n</tr>\r\n<tr>\r\n<td>==</td>\r\n<td>equal to</td>\r\n</tr>\r\n<tr>\r\n<td>===</td>\r\n<td>equal value and equal type</td>\r\n</tr>\r\n<tr>\r\n<td>!=</td>\r\n<td>not equal</td>\r\n</tr>\r\n<tr>\r\n<td>!==</td>\r\n<td>not equal value or not equal type</td>\r\n</tr>\r\n<tr>\r\n<td>&gt;</td>\r\n<td>greater than</td>\r\n</tr>\r\n<tr>\r\n<td>&lt;</td>\r\n<td>less than</td>\r\n</tr>\r\n<tr>\r\n<td>&gt;=</td>\r\n<td>greater than or equal to</td>\r\n</tr>\r\n<tr>\r\n<td>&lt;=</td>\r\n<td>less than or equal to</td>\r\n</tr>\r\n<tr>\r\n<td>?</td>\r\n<td>ternary operator</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n</div>\r\n<table class="lamp">\r\n<tbody>\r\n<tr>\r\n<th><img src="http://www.w3schools.com/images/lamp.jpg" alt="Note" /></th>\r\n<td>Comparison and logical operators are described in the <strong>JS Comparisons</strong> chapter.</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n\r\n<hr />\r\n\r\n<h2>JavaScript Type Operators</h2>\r\n<div class="table-responsive">\r\n<table class="w3-table-all notranslate">\r\n<tbody>\r\n<tr>\r\n<th>Operator</th>\r\n<th>Description</th>\r\n</tr>\r\n<tr>\r\n<td>typeof</td>\r\n<td>Returns the type of a variable</td>\r\n</tr>\r\n<tr>\r\n<td>instanceof</td>\r\n<td>Returns true if an object is an instance of an object type</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n</div>\r\n<table class="lamp">\r\n<tbody>\r\n<tr>\r\n<th><img src="http://www.w3schools.com/images/lamp.jpg" alt="Note" /></th>\r\n<td>Type operators are described in the <strong>JS Type Conversion</strong> chapter.</td>\r\n</tr>\r\n</tbody>\r\n</table>', 'JS Operators', '', 'publish', 'closed', 'closed', '', 'js-operators', '', '', '2016-05-21 14:56:09', '2016-05-21 14:56:09', '', 0, 'http://localhost/invatacel/lessons/js-operators/', 0, 'lp_lesson', '', 0),
(198, 1, '2016-05-21 14:50:41', '2016-05-21 14:50:41', '<p class="intro">A typical thing to do with numbers is arithmetic.</p>\r\n\r\n\r\n<hr />\r\n\r\n<h2>JavaScript Arithmetic Operators</h2>\r\nArithmetic operators perform arithmetic on numbers (literals or variables).\r\n<table class="w3-table-all notranslate">\r\n<tbody>\r\n<tr>\r\n<th>Operator</th>\r\n<th>Description</th>\r\n</tr>\r\n<tr>\r\n<td>+</td>\r\n<td>Addition</td>\r\n</tr>\r\n<tr>\r\n<td>-</td>\r\n<td>Subtraction</td>\r\n</tr>\r\n<tr>\r\n<td>*</td>\r\n<td>Multiplication</td>\r\n</tr>\r\n<tr>\r\n<td>/</td>\r\n<td>Division</td>\r\n</tr>\r\n<tr>\r\n<td>%</td>\r\n<td>Modulus</td>\r\n</tr>\r\n<tr>\r\n<td>++</td>\r\n<td>Increment</td>\r\n</tr>\r\n<tr>\r\n<td>--</td>\r\n<td>Decrement</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n\r\n<hr />\r\n\r\n<h2>Arithmetic Operations</h2>\r\nA typical arithmetic operation operates on two numbers.\r\n\r\nThe two numbers can be literals:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate jsHigh">var x = 100 + 50;</div>\r\n</div>\r\n<div class="w3-example"></div>\r\nor variables:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate jsHigh">var x = a + b;</div>\r\n</div>\r\n<div class="w3-example"></div>\r\nor expressions:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate jsHigh">var x = (100 + 50) * a;</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n\r\n<hr />\r\n\r\n<h2>Operators and Operands</h2>\r\nThe numbers (in an arithmetic operation) are called <strong>operands</strong>.\r\n\r\nThe operation (to be performed between the two operands) is defined by an <strong>operator</strong>.\r\n<table class="w3-table-all">\r\n<tbody>\r\n<tr>\r\n<th>Operand</th>\r\n<th>Operator</th>\r\n<th>Operand</th>\r\n</tr>\r\n<tr>\r\n<td>100</td>\r\n<td>+</td>\r\n<td>50</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\nThe <strong>addition</strong> operator (+) adds numbers:\r\n<div class="w3-example">\r\n<h3>Adding</h3>\r\n<div class="w3-code notranslate jsHigh">var x = 5;\r\nvar y = 2;\r\nvar z = x + y;</div>\r\n</div>\r\n<div class="w3-example"></div>\r\nThe <strong>subtraction</strong> operator (-) subtracts numbers.\r\n<div class="w3-example">\r\n<h3>Subtracting</h3>\r\n<div class="w3-code notranslate jsHigh">var x = 5;\r\nvar y = 2;\r\nvar z = x - y;</div>\r\n</div>\r\n<div class="w3-example"></div>\r\nThe <strong>multiplication</strong> operator (*) multiplies numbers.\r\n<div class="w3-example">\r\n<h3>Multiplying</h3>\r\n<div class="w3-code notranslate jsHigh">var x = 5;\r\nvar y = 2;\r\nvar z = x * y;</div>\r\n</div>\r\n<div class="w3-example"></div>\r\nThe <strong>division</strong> operator (/) divides numbers.\r\n<div class="w3-example">\r\n<h3>Dividing</h3>\r\n<div class="w3-code notranslate jsHigh">var x = 5;\r\nvar y = 2;\r\nvar z = x / y;</div>\r\n</div>\r\n<div class="w3-example"></div>\r\nThe <strong>modular</strong> operator (%) returns the division remainder.\r\n<div class="w3-example">\r\n<h3>Modulus</h3>\r\n<div class="w3-code notranslate jsHigh">var x = 5;\r\nvar y = 2;\r\nvar z = x % y;</div>\r\n</div>\r\n<div class="w3-example"></div>\r\nThe <strong>increment</strong> operator (++) increments numbers.\r\n<div class="w3-example">\r\n<h3>Incrementing</h3>\r\n<div class="w3-code notranslate jsHigh">var x = 5;\r\nx++;\r\nvar z = x;</div>\r\n</div>\r\n<div class="w3-example"></div>\r\nThe <strong>decrement</strong> operator (--) decrements numbers.\r\n<div class="w3-example">\r\n<h3>Decrementing</h3>\r\n<div class="w3-code notranslate jsHigh">var x = 5;\r\nx--;\r\nvar z = x;</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n\r\n<hr />\r\n\r\n<h2>Operator Precedence</h2>\r\nOperator precedence describes the order in which operations are performed in an arithmetic expression.\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate jsHigh">var x = 100 + 50 * 3;</div>\r\n</div>\r\n<div class="w3-example"></div>\r\nIs the result of example above the same as 150 * 3, or is it the same as 100 + 150?\r\n\r\nIs the addition or the multiplication done first?\r\n\r\nAs in traditional school mathematics, the multiplication is done first.\r\n\r\nMultiplication (*) and division (/) have higher <strong>precedence</strong> than addition (+) and subtraction (-).\r\n\r\nAnd (as in school mathematics) the precedence can be changed by using parentheses:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate jsHigh">var x = (100 + 50) * 3;</div>\r\n</div>\r\n<div class="w3-example"></div>\r\nWhen using parentheses, the operations inside the parentheses are computed first.\r\n\r\nWhen many operations have the same precedence (like addition and subtraction), they are computed from left to right:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate jsHigh">var x = 100 + 50 - 3;</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n\r\n<hr />\r\n\r\n<h2>JavaScript Operator Precedence Values</h2>\r\n<table class="w3-table-all">\r\n<tbody>\r\n<tr>\r\n<th>Value</th>\r\n<th>Operator</th>\r\n<th>Description</th>\r\n<th>Example</th>\r\n</tr>\r\n<tr>\r\n<td>19</td>\r\n<td>( )</td>\r\n<td>Expression grouping</td>\r\n<td>(3 + 4)</td>\r\n</tr>\r\n<tr>\r\n<td></td>\r\n<td></td>\r\n<td></td>\r\n<td></td>\r\n</tr>\r\n<tr>\r\n<td>18</td>\r\n<td>.</td>\r\n<td>Member</td>\r\n<td>person.name</td>\r\n</tr>\r\n<tr>\r\n<td>18</td>\r\n<td>[]</td>\r\n<td>Member</td>\r\n<td>person["name"]</td>\r\n</tr>\r\n<tr>\r\n<td></td>\r\n<td></td>\r\n<td></td>\r\n<td></td>\r\n</tr>\r\n<tr>\r\n<td>17</td>\r\n<td>()</td>\r\n<td>Function call</td>\r\n<td>myFunction()</td>\r\n</tr>\r\n<tr>\r\n<td>17</td>\r\n<td>new</td>\r\n<td>Create</td>\r\n<td>new Date()</td>\r\n</tr>\r\n<tr>\r\n<td></td>\r\n<td></td>\r\n<td></td>\r\n<td></td>\r\n</tr>\r\n<tr>\r\n<td>16</td>\r\n<td>++</td>\r\n<td>Postfix Increment</td>\r\n<td>i++</td>\r\n</tr>\r\n<tr>\r\n<td>16</td>\r\n<td>--</td>\r\n<td>Postfix Decrement</td>\r\n<td>i--</td>\r\n</tr>\r\n<tr>\r\n<td></td>\r\n<td></td>\r\n<td></td>\r\n<td></td>\r\n</tr>\r\n<tr>\r\n<td>15</td>\r\n<td>++</td>\r\n<td>Prefix Increment</td>\r\n<td>++i</td>\r\n</tr>\r\n<tr>\r\n<td>15</td>\r\n<td>--</td>\r\n<td>Prefix Decrement</td>\r\n<td>--i</td>\r\n</tr>\r\n<tr>\r\n<td>15</td>\r\n<td>!</td>\r\n<td>Logical not</td>\r\n<td>!(x==y)</td>\r\n</tr>\r\n<tr>\r\n<td>15</td>\r\n<td>typeof</td>\r\n<td>Type</td>\r\n<td>typeof x</td>\r\n</tr>\r\n<tr>\r\n<td></td>\r\n<td></td>\r\n<td></td>\r\n<td></td>\r\n</tr>\r\n<tr>\r\n<td>14</td>\r\n<td>*</td>\r\n<td>Multiplication</td>\r\n<td>10 * 5</td>\r\n</tr>\r\n<tr>\r\n<td>14</td>\r\n<td>/</td>\r\n<td>Division</td>\r\n<td>10 / 5</td>\r\n</tr>\r\n<tr>\r\n<td>14</td>\r\n<td>%</td>\r\n<td>Modulo division</td>\r\n<td>10 % 5</td>\r\n</tr>\r\n<tr class="w3-red">\r\n<td>14</td>\r\n<td>**</td>\r\n<td>Exponentiation</td>\r\n<td>10 ** 2</td>\r\n</tr>\r\n<tr>\r\n<td></td>\r\n<td></td>\r\n<td></td>\r\n<td></td>\r\n</tr>\r\n<tr>\r\n<td>13</td>\r\n<td>+</td>\r\n<td>Addition</td>\r\n<td>10 + 5</td>\r\n</tr>\r\n<tr>\r\n<td>13</td>\r\n<td>-</td>\r\n<td>Subtraction</td>\r\n<td>10 - 5</td>\r\n</tr>\r\n<tr>\r\n<td></td>\r\n<td></td>\r\n<td></td>\r\n<td></td>\r\n</tr>\r\n<tr>\r\n<td>12</td>\r\n<td>&lt;&lt;</td>\r\n<td>Shift left</td>\r\n<td>x &lt;&lt; 2</td>\r\n</tr>\r\n<tr>\r\n<td>12</td>\r\n<td>&gt;&gt;</td>\r\n<td>Shift right</td>\r\n<td>x &gt;&gt; 2</td>\r\n</tr>\r\n<tr>\r\n<td></td>\r\n<td></td>\r\n<td></td>\r\n<td></td>\r\n</tr>\r\n<tr>\r\n<td>11</td>\r\n<td>&lt;</td>\r\n<td>Less than</td>\r\n<td>x &lt; y</td>\r\n</tr>\r\n<tr>\r\n<td>11</td>\r\n<td>&lt;=</td>\r\n<td>Less than or equal</td>\r\n<td>x &lt;= y</td>\r\n</tr>\r\n<tr>\r\n<td>11</td>\r\n<td>&gt;</td>\r\n<td>Greater than</td>\r\n<td>x &gt; y</td>\r\n</tr>\r\n<tr>\r\n<td>11</td>\r\n<td>&gt;=</td>\r\n<td>Greater than or equal</td>\r\n<td>x &gt;= y</td>\r\n</tr>\r\n<tr>\r\n<td></td>\r\n<td></td>\r\n<td></td>\r\n<td></td>\r\n</tr>\r\n<tr>\r\n<td>10</td>\r\n<td>==</td>\r\n<td>Equal</td>\r\n<td>x == y</td>\r\n</tr>\r\n<tr>\r\n<td>10</td>\r\n<td>===</td>\r\n<td>Strict equal</td>\r\n<td>x === y</td>\r\n</tr>\r\n<tr>\r\n<td>10</td>\r\n<td>!=</td>\r\n<td>Unequal</td>\r\n<td>x != y</td>\r\n</tr>\r\n<tr>\r\n<td>10</td>\r\n<td>!==</td>\r\n<td>Strict unequal</td>\r\n<td>x !== y</td>\r\n</tr>\r\n<tr>\r\n<td></td>\r\n<td></td>\r\n<td></td>\r\n<td></td>\r\n</tr>\r\n<tr>\r\n<td>6</td>\r\n<td>&amp;&amp;</td>\r\n<td>And</td>\r\n<td>x &amp;&amp; y</td>\r\n</tr>\r\n<tr>\r\n<td>5</td>\r\n<td>||</td>\r\n<td>Or</td>\r\n<td>x || y</td>\r\n</tr>\r\n<tr>\r\n<td></td>\r\n<td></td>\r\n<td></td>\r\n<td></td>\r\n</tr>\r\n<tr>\r\n<td>3</td>\r\n<td>=</td>\r\n<td>Assignment</td>\r\n<td>x = y</td>\r\n</tr>\r\n<tr>\r\n<td>3</td>\r\n<td>+=</td>\r\n<td>Assignment</td>\r\n<td>x += y</td>\r\n</tr>\r\n<tr>\r\n<td>3</td>\r\n<td>-=</td>\r\n<td>Assignment</td>\r\n<td>x -= y</td>\r\n</tr>\r\n<tr>\r\n<td>3</td>\r\n<td>*=</td>\r\n<td>Assignment</td>\r\n<td>x *= y</td>\r\n</tr>\r\n<tr>\r\n<td>3</td>\r\n<td>/=</td>\r\n<td>Assignment</td>\r\n<td>x /= y</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n<table class="lamp">\r\n<tbody>\r\n<tr>\r\n<th><img src="http://www.w3schools.com/images/lamp.jpg" alt="Note" /></th>\r\n<td>Expressions in parentheses are fully computed before the value is used in the rest of the expression.</td>\r\n</tr>\r\n</tbody>\r\n</table>', 'JS Arithmetic', '', 'publish', 'closed', 'closed', '', 'js-arithmetic', '', '', '2016-05-21 15:04:40', '2016-05-21 15:04:40', '', 0, 'http://localhost/invatacel/lessons/js-arithmetic/', 0, 'lp_lesson', '', 0),
(199, 1, '2016-05-21 14:50:53', '2016-05-21 14:50:53', '<h2>JavaScript Assignment Operators</h2>\r\nAssignment operators assign values to JavaScript variables.\r\n<table class="w3-table-all notranslate">\r\n<tbody>\r\n<tr>\r\n<th>Operator</th>\r\n<th>Example</th>\r\n<th>Same As</th>\r\n</tr>\r\n<tr>\r\n<td>=</td>\r\n<td>x = y</td>\r\n<td>x = y</td>\r\n</tr>\r\n<tr>\r\n<td>+=</td>\r\n<td>x += y</td>\r\n<td>x = x + y</td>\r\n</tr>\r\n<tr>\r\n<td>-=</td>\r\n<td>x -= y</td>\r\n<td>x = x - y</td>\r\n</tr>\r\n<tr>\r\n<td>*=</td>\r\n<td>x *= y</td>\r\n<td>x = x * y</td>\r\n</tr>\r\n<tr>\r\n<td>/=</td>\r\n<td>x /= y</td>\r\n<td>x = x / y</td>\r\n</tr>\r\n<tr>\r\n<td>%=</td>\r\n<td>x %= y</td>\r\n<td>x = x % y</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\nThe = assignment operator assigns a value to a variable.\r\n<div class="w3-example">\r\n<h3>Assignment</h3>\r\n<div class="w3-code notranslate jsHigh">var x = 10;</div>\r\n</div>\r\n<div class="w3-example"></div>\r\nThe += assignment operator adds a value to a variable.\r\n<div class="w3-example">\r\n<h3>Assignment</h3>\r\n<div class="w3-code notranslate jsHigh">var x = 10;\r\nx += 5;</div>\r\n</div>\r\n<div class="w3-example"></div>\r\nThe -= assignment operator subtracts a value from a variable.\r\n<div class="w3-example">\r\n<h3>Assignment</h3>\r\n<div class="w3-code notranslate jsHigh">var x = 10;\r\nx -= 5;</div>\r\n</div>\r\n<div class="w3-example"></div>\r\nThe *= assignment operator multiplies a variable.\r\n<div class="w3-example">\r\n<h3>Assignment</h3>\r\n<div class="w3-code notranslate jsHigh">var x = 10;\r\nx *= 5;</div>\r\n</div>\r\n<div class="w3-example"></div>\r\nThe /= assignment divides a variable.\r\n<div class="w3-example">\r\n<h3>Assignment</h3>\r\n<div class="w3-code notranslate jsHigh">var x = 10;\r\nx /= 5;</div>\r\n</div>\r\n<div class="w3-example"></div>\r\nThe %= assignment operator assigns a remainder to a variable.\r\n<div class="w3-example">\r\n<h3>Assignment</h3>\r\n<div class="w3-code notranslate jsHigh">var x = 10;\r\nx %= 5;</div>\r\n</div>', 'JS Assignment', '', 'publish', 'closed', 'closed', '', 'js-assignment', '', '', '2016-05-21 14:57:03', '2016-05-21 14:57:03', '', 0, 'http://localhost/invatacel/lessons/js-assignment/', 0, 'lp_lesson', '', 0);
INSERT INTO `wp_posts` (`ID`, `post_author`, `post_date`, `post_date_gmt`, `post_content`, `post_title`, `post_excerpt`, `post_status`, `comment_status`, `ping_status`, `post_password`, `post_name`, `to_ping`, `pinged`, `post_modified`, `post_modified_gmt`, `post_content_filtered`, `post_parent`, `guid`, `menu_order`, `post_type`, `post_mime_type`, `comment_count`) VALUES
(200, 1, '2016-05-21 14:51:03', '2016-05-21 14:51:03', '<p class="intro">String, Number, Boolean, Array, Object.</p>\r\n\r\n\r\n<hr />\r\n\r\n<h2>JavaScript Data Types</h2>\r\nJavaScript variables can hold many <strong>data types</strong>: numbers, strings, arrays, objects and more:\r\n<div class="w3-example">\r\n<div class="w3-code notranslate jsHigh">var length = 16;                               // Number\r\nvar lastName = "Johnson";                      // String\r\nvar cars = ["Saab", "Volvo", "BMW"];           // Array\r\nvar x = {firstName:"John", lastName:"Doe"};    // Object</div>\r\n</div>\r\n\r\n<hr />\r\n\r\n<h2>The Concept of Data Types</h2>\r\nIn programming, data types is an important concept.\r\n\r\nTo be able to operate on variables, it is important to know something about the type.\r\n\r\nWithout data types, a computer cannot safely solve this:\r\n<div class="w3-example">\r\n<div class="w3-code notranslate jsHigh">var x = 16 + "Volvo";</div>\r\n</div>\r\nDoes it make any sense to add "Volvo" to sixteen? Will it produce an error or will it produce a result?\r\n\r\nJavaScript will treat the example above as:\r\n<div class="w3-example">\r\n<div class="w3-code notranslate jsHigh">var x = "16" + "Volvo";</div>\r\n</div>\r\n<table class="lamp">\r\n<tbody>\r\n<tr>\r\n<th><img src="http://www.w3schools.com/images/lamp.jpg" alt="Note" /></th>\r\n<td>When adding a number and a string, JavaScript will treat the number as a string.</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate jsHigh">var x = 16 + "Volvo";</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate jsHigh">var x = "Volvo" + 16;</div>\r\n</div>\r\n<div class="w3-example"></div>\r\nJavaScript evaluates expressions from left to right. Different sequences can produce different results:\r\n<div class="w3-example">\r\n<h3>JavaScript:</h3>\r\n<div class="w3-code notranslate jsHigh">var x = 16 + 4 + "Volvo";</div>\r\n<h3>Result:</h3>\r\n<div class="w3-code notranslate jsHigh">20Volvo</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n<div class="w3-example">\r\n<h3>JavaScript:</h3>\r\n<div class="w3-code notranslate jsHigh">var x = "Volvo" + 16 + 4;</div>\r\n<h3>Result:</h3>\r\n<div class="w3-code notranslate jsHigh">Volvo164</div>\r\n</div>\r\n<div class="w3-example"></div>\r\nIn the first example, JavaScript treats 16 and 4 as numbers, until it reaches "Volvo".\r\n\r\nIn the second example, since the first operand is a string, all operands are treated as strings.\r\n\r\n<hr />\r\n\r\n<h2>JavaScript Has Dynamic Types</h2>\r\nJavaScript has dynamic types. This means that the same variable can be used as different types:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate jsHigh">var x;              // Now x is undefined\r\nvar x = 5;           // Now x is a Number\r\nvar x = "John";      // Now x is a String</div>\r\n</div>\r\n\r\n<hr />\r\n\r\n<h2>JavaScript Strings</h2>\r\nA string (or a text string) is a series of characters like "John Doe".\r\n\r\nStrings are written with quotes. You can use single or double quotes:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate jsHigh">var carName = "Volvo XC60";   // Using double quotes\r\nvar carName = ''Volvo XC60'';   // Using single quotes</div>\r\n</div>\r\nYou can use quotes inside a string, as long as they don''t match the quotes surrounding the string:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate jsHigh">var answer = "It''s alright";             // Single quote inside double quotes\r\nvar answer = "He is called ''Johnny''";    // Single quotes inside double quotes\r\nvar answer = ''He is called "Johnny"'';    // Double quotes inside single quotes</div>\r\n</div>\r\nYou will learn more about strings later in this tutorial.\r\n\r\n<hr />\r\n\r\n<h2>JavaScript Numbers</h2>\r\nJavaScript has only one type of numbers.\r\n\r\nNumbers can be written with, or without decimals:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate jsHigh">var x1 = 34.00;     // Written with decimals\r\nvar x2 = 34;        // Written without decimals</div>\r\n</div>\r\nExtra large or extra small numbers can be written with scientific (exponential) notation:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate jsHigh">var y = 123e5;      // 12300000\r\nvar z = 123e-5;     // 0.00123</div>\r\n</div>\r\nYou will learn more about numbers later in this tutorial.\r\n\r\n<hr />\r\n\r\n<h2>JavaScript Booleans</h2>\r\nBooleans can only have two values: true or false.\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate jsHigh">var x = true;\r\nvar y = false;</div>\r\n</div>\r\nBooleans are often used in conditional testing.\r\n\r\nYou will learn more about conditional testing later in this tutorial.\r\n\r\n<hr />\r\n\r\n<h2>JavaScript Arrays</h2>\r\nJavaScript arrays are written with square brackets.\r\n\r\nArray items are separated by commas.\r\n\r\nThe following code declares (creates) an array called cars, containing three items (car names):\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate jsHigh">var cars = ["Saab", "Volvo", "BMW"];</div>\r\n</div>\r\n<div class="w3-example"></div>\r\nArray indexes are zero-based, which means the first item is [0], second is [1], and so on.\r\n\r\nYou will learn more about arrays later in this tutorial.\r\n\r\n<hr />\r\n\r\n<h2>JavaScript Objects</h2>\r\nJavaScript objects are written with curly braces.\r\n\r\nObject properties are written as name:value pairs, separated by commas.\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate jsHigh">var person = {firstName:"John", lastName:"Doe", age:50, eyeColor:"blue"};</div>\r\n</div>\r\n<div class="w3-example"></div>\r\nThe object (person) in the example above has 4 properties: firstName, lastName, age, and eyeColor.\r\n\r\nYou will learn more about objects later in this tutorial.\r\n\r\n<hr />\r\n\r\n<h2>The typeof Operator</h2>\r\nYou can use the JavaScript <strong>typeof</strong> operator to find the type of a JavaScript variable:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate jsHigh">typeof"John"                // Returns string\r\ntypeof 3.14                  // Returns number\r\ntypeof false                 // Returns boolean\r\ntypeof [1,2,3,4]             // Returns object\r\ntypeof {name:''John'', age:34} // Returns object</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n<table class="lamp">\r\n<tbody>\r\n<tr>\r\n<th><img src="http://www.w3schools.com/images/lamp.jpg" alt="Note" /></th>\r\n<td>In JavaScript, an array is a special type of object. Therefore typeof [1,2,3,4] returns object.</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n\r\n<hr />\r\n\r\n<h2>Undefined</h2>\r\nIn JavaScript, a variable without a value, has the value<strong> undefined</strong>. The typeof is also <strong>undefined</strong>.\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate jsHigh">var person;                  // Value is undefined, type is undefined</div>\r\n</div>\r\n<div class="w3-example"></div>\r\nAny variable can be emptied, by setting the value to <strong>undefined</strong>. The type will also be <strong>undefined</strong>.\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate jsHigh">person = undefined;          // Value is undefined, type is undefined</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n\r\n<hr />\r\n\r\n<h2>Empty Values</h2>\r\nAn empty value has nothing to do with undefined.\r\n\r\nAn empty string variable has both a value and a type.\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate jsHigh">var car = "";                // The value is "", the typeof is string</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n\r\n<hr />\r\n\r\n<h2>Null</h2>\r\nIn JavaScript null is "nothing". It is supposed to be something that doesn''t exist.\r\n\r\nUnfortunately, in JavaScript, the data type of null is an object.\r\n<table class="lamp">\r\n<tbody>\r\n<tr>\r\n<th><img src="http://www.w3schools.com/images/lamp.jpg" alt="Note" /></th>\r\n<td>You can consider it a bug in JavaScript that typeof null is an object. It should be null.</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\nYou can empty an object by setting it to null:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate jsHigh">var person = null;           // Value is null, but type is still an object</div>\r\n</div>\r\n<div class="w3-example"></div>\r\nYou can also empty an object by setting it to undefined:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate jsHigh">var person = undefined;     // Value is undefined, type is undefined</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n\r\n<hr />\r\n\r\n<h2>Difference Between Undefined and Null</h2>\r\n<div class="w3-example">\r\n<div class="w3-code notranslate jsHigh">typeof undefined             // undefined\r\ntypeof null                  // object\r\nnull === undefined           // false\r\nnull == undefined            // true</div>\r\n</div>', 'JS Data Types', '', 'publish', 'closed', 'closed', '', 'js-data-types', '', '', '2016-05-21 14:57:28', '2016-05-21 14:57:28', '', 0, 'http://localhost/invatacel/lessons/js-data-types/', 0, 'lp_lesson', '', 0),
(201, 1, '2016-05-21 14:51:10', '2016-05-21 14:51:10', '<p class="intro">A JavaScript function is a block of code designed to perform a particular task.</p>\r\n<p class="intro">A JavaScript function is executed when "something" invokes it (calls it).</p>\r\n\r\n\r\n<hr />\r\n\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate jsHigh">function myFunction(p1, p2) {\r\nreturn p1 * p2;              // The function returns the product of p1 and p2\r\n}</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n\r\n<hr />\r\n\r\n<h2>JavaScript Function Syntax</h2>\r\nA JavaScript function is defined with the <strong>function</strong> keyword, followed by a <strong>name</strong>, followed by parentheses <strong>()</strong>.\r\n\r\nFunction names can contain letters, digits, underscores, and dollar signs (same rules as variables).\r\n\r\nThe parentheses may include parameter names separated by commas:\r\n<strong>(<em>parameter1, parameter2, ...</em>)</strong>\r\n\r\nThe code to be executed, by the function, is placed inside curly brackets: <strong>{}</strong>\r\n<div class="w3-example">\r\n<div class="w3-code notranslate jsHigh">function<em>name</em>(<em>parameter1, parameter2, parameter3</em>) {\r\n<em>code to be executed</em>\r\n}</div>\r\n</div>\r\nFunction <strong>parameters</strong> are the <strong>names</strong> listed in the function definition.\r\n\r\nFunction <strong>arguments</strong> are the real <strong>values</strong> received by the function when it is invoked.\r\n\r\nInside the function, the arguments behave as local variables.\r\n<table class="lamp">\r\n<tbody>\r\n<tr>\r\n<th><img src="http://www.w3schools.com/images/lamp.jpg" alt="Note" /></th>\r\n<td>A Function is much the same as a Procedure or a Subroutine, in other programming languages.</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n\r\n<hr />\r\n\r\n<h2>Function Invocation</h2>\r\nThe code inside the function will execute when "something" <strong>invokes</strong> (calls) the function:\r\n<ul>\r\n 	<li>When an event occurs (when a user clicks a button)</li>\r\n 	<li>When it is invoked (called) from JavaScript code</li>\r\n 	<li>Automatically (self invoked)</li>\r\n</ul>\r\nYou will learn a lot more about function invocation later in this tutorial.\r\n\r\n<hr />\r\n\r\n<h2>Function Return</h2>\r\nWhen JavaScript reaches a <strong>return statement</strong>, the function will stop executing.\r\n\r\nIf the function was invoked from a statement, JavaScript will "return" to execute the code after the invoking statement.\r\n\r\nFunctions often compute a <strong>return value</strong>. The return value is "returned" back to the "caller":\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\nCalculate the product of two numbers, and return the result:\r\n<div class="w3-code notranslate jsHigh">var x = myFunction(4, 3);       // Function is called, return value will end up in x\r\n\r\nfunction myFunction(a, b) {\r\nreturn a * b;                // Function returns the product of a and b\r\n}</div>\r\nThe result in x will be:\r\n<div class="w3-code notranslate">12</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n\r\n<hr />\r\n\r\n<h2>Why Functions?</h2>\r\nYou can reuse code: Define the code once, and use it many times.\r\n\r\nYou can use the same code many times with different arguments, to produce different results.\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\nConvert Fahrenheit to Celsius:\r\n<div class="w3-code notranslate jsHigh">function toCelsius(fahrenheit) {\r\nreturn (5/9) * (fahrenheit-32);\r\n}\r\ndocument.getElementById("demo").innerHTML = toCelsius(77);</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n\r\n<hr />\r\n\r\n<h2>The () Operator Invokes the Function</h2>\r\nUsing the example above, toCelsius refers to the function object, and toCelsius() refers to the function result.\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\nAccessing a function without () will return the function definition:\r\n<div class="w3-code notranslate jsHigh">function toCelsius(fahrenheit) {\r\nreturn (5/9) * (fahrenheit-32);\r\n}\r\ndocument.getElementById("demo").innerHTML = toCelsius;</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n\r\n<hr />\r\n\r\n<h2>Functions Used as Variables</h2>\r\nIn JavaScript, you can use functions the same way as you use variables.\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\nYou can use:\r\n<div class="w3-code notranslate jsHigh">var text = "The temperature is " + toCelsius(77) + " Celsius";</div>\r\nInstead of:\r\n<div class="w3-code notranslate jsHigh">var x = toCelsius(32);\r\nvar text = "The temperature is " + x + " Celsius";</div>\r\n</div>', 'JS Functions', '', 'publish', 'closed', 'closed', '', 'js-functions', '', '', '2016-05-21 14:57:49', '2016-05-21 14:57:49', '', 0, 'http://localhost/invatacel/lessons/js-functions/', 0, 'lp_lesson', '', 0),
(202, 1, '2016-05-21 14:51:18', '2016-05-21 14:51:18', '<p class="intro">JavaScript strings are used for storing and manipulating text.</p>\r\n\r\n\r\n<hr />\r\n\r\n<h2>JavaScript Strings</h2>\r\nA JavaScript string simply stores a series of characters like "John Doe".\r\n\r\nA string can be any text inside quotes. You can use single or double quotes:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate jsHigh">var carname = "Volvo XC60";\r\nvar carname = ''Volvo XC60'';</div>\r\n</div>\r\n<div class="w3-example"></div>\r\nYou can use quotes inside a string, as long as they don''t match the quotes surrounding the string:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate jsHigh">var answer = "It''s alright";\r\nvar answer = "He is called ''Johnny''";\r\nvar answer = ''He is called "Johnny"'';</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n\r\n<hr />\r\n\r\n<h2>String Length</h2>\r\nThe length of a string is found in the built in property <strong>length</strong>:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate jsHigh">var txt = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";\r\nvar sln = txt.length;</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n\r\n<hr />\r\n\r\n<h2>Special Characters</h2>\r\nBecause strings must be written within quotes, JavaScript will misunderstand this string:\r\n<div class="w3-example">\r\n<div class="w3-code notranslate jsHigh">var y = "We are the so-called "Vikings" from the north."</div>\r\n</div>\r\nThe string will be chopped to "We are the so-called ".\r\n\r\nThe solution to avoid this problem, is to use the <strong>\\ escape character</strong>.\r\n\r\nThe backslash escape character turns special characters into string characters:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate"><span class="highELE">var</span> x = <span class="highVAL">''It\\''s alright'';</span>\r\n<span class="highELE">var</span> y = <span class="highVAL">"We are the so-called \\"Vikings\\" from the north."</span></div>\r\n</div>\r\n<div class="w3-example"></div>\r\nThe escape character (\\) can also be used to insert other special characters in a string.\r\n\r\nThis is the list of special characters that can be added to a text string with the backslash sign:\r\n<table class="w3-table-all notranslate">\r\n<tbody>\r\n<tr>\r\n<th>Code</th>\r\n<th>Outputs</th>\r\n</tr>\r\n<tr>\r\n<td>\\''</td>\r\n<td>single quote</td>\r\n</tr>\r\n<tr>\r\n<td>\\"</td>\r\n<td>double quote</td>\r\n</tr>\r\n<tr>\r\n<td>\\\\</td>\r\n<td>backslash</td>\r\n</tr>\r\n<tr>\r\n<td>\\n</td>\r\n<td>new line</td>\r\n</tr>\r\n<tr>\r\n<td>\\r</td>\r\n<td>carriage return</td>\r\n</tr>\r\n<tr>\r\n<td>\\t</td>\r\n<td>tab</td>\r\n</tr>\r\n<tr>\r\n<td>\\b</td>\r\n<td>backspace</td>\r\n</tr>\r\n<tr>\r\n<td>\\f</td>\r\n<td>form feed</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n\r\n<hr />\r\n\r\n<h2>Breaking Long Code Lines</h2>\r\nFor best readability, programmers often like to avoid code lines longer than 80 characters.\r\n\r\nIf a JavaScript statement does not fit on one line, the best place to break it is after an operator:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate jsHigh">document.getElementById("demo").innerHTML =\r\n"Hello Dolly.";</div>\r\n</div>\r\n<div class="w3-example"></div>\r\nYou can also break up a code line <b>within a text string</b> with a single backslash:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate jsHigh">document.getElementById("demo").innerHTML = "Hello \\\r\nDolly!";</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n<table class="lamp">\r\n<tbody>\r\n<tr>\r\n<th><img src="http://www.w3schools.com/images/lamp.jpg" alt="Note" /></th>\r\n<td>The \\ method is not a ECMAScript (JavaScript) standard.\r\nSome browsers do not allow spaces behind the \\ character.</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\nThe safest (but a little slower) way to break a long string is to use string addition:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate jsHigh">document.getElementById("demo").innerHTML = "Hello" +\r\n"Dolly!";</div>\r\n</div>\r\n<div class="w3-example"></div>\r\nYou cannot break up a code line with a backslash:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate jsHigh">document.getElementById("demo").innerHTML = \\\r\n"Hello Dolly!";</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n\r\n<hr />\r\n\r\n<h2>Strings Can be Objects</h2>\r\nNormally, JavaScript strings are primitive values, created from literals: <strong>var firstName = "John"</strong>\r\n\r\nBut strings can also be defined as objects with the keyword new: <strong>var firstName = new String("John")</strong>\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate jsHigh">var x = "John";\r\nvar y = new String("John");\r\n\r\n// typeof x will return string\r\n// typeof y will return object</div>\r\n</div>\r\n<table class="lamp">\r\n<tbody>\r\n<tr>\r\n<th><img src="http://www.w3schools.com/images/lamp.jpg" alt="Note" /></th>\r\n<td>Don''t create strings as objects. It slows down execution speed.\r\nThe <strong>new</strong> keyword complicates the code. This can produce some unexpected results:</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\nWhen using the == equality operator, equal strings looks equal:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate jsHigh">var x = "John";\r\nvar y = new String("John");\r\n\r\n// (x == y) is true because x and y have equal values</div>\r\n</div>\r\n<div class="w3-example"></div>\r\nWhen using the === equality operator, equal strings are not equal, because the === operator expects equality in both type and value.\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate jsHigh">var x = "John";\r\nvar y = new String("John");\r\n\r\n// (x === y) is false because x and y have different types (string and object)</div>\r\n</div>\r\n<div class="w3-example"></div>\r\nOr even worse. Objects cannot be compared:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate jsHigh">var x = new String("John");\r\nvar y = new String("John");\r\n\r\n// (x == y) is false because x and y are different objects\r\n// (x == x) is true because both are the same object</div>\r\n</div>', 'JS Strings', '', 'publish', 'closed', 'closed', '', 'js-strings', '', '', '2016-05-21 14:58:16', '2016-05-21 14:58:16', '', 0, 'http://localhost/invatacel/lessons/js-strings/', 0, 'lp_lesson', '', 0),
(203, 1, '2016-05-21 14:51:25', '2016-05-21 14:51:25', '<p class="intro">JavaScript has only one type of number.</p>\r\n<p class="intro">Numbers can be written with, or without, decimals.</p>\r\n\r\n\r\n<hr />\r\n\r\n<h2>JavaScript Numbers</h2>\r\nJavaScript numbers can be written with, or without decimals:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate jsHigh">var x = 34.00;    // A number with decimals\r\nvar y = 34;       // A number without decimals</div>\r\n</div>\r\nExtra large or extra small numbers can be written with scientific (exponent) notation:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate jsHigh">var x = 123e5;    // 12300000\r\nvar y = 123e-5;   // 0.00123</div>\r\n</div>\r\n\r\n<hr />\r\n\r\n<h2>JavaScript Numbers are Always 64-bit Floating Point</h2>\r\nUnlike many other programming languages, JavaScript does not define different types of numbers, like integers, short, long, floating-point etc.\r\n\r\nJavaScript numbers are always stored as double precision floating point numbers, following the international IEEE 754 standard.\r\n\r\nThis format stores numbers in 64 bits, where the number (the fraction) is stored in bits 0 to 51, the exponent in bits 52 to 62, and the sign in bit 63:\r\n<table class="w3-table-all">\r\n<tbody>\r\n<tr>\r\n<th>Value (aka Fraction/Mantissa)</th>\r\n<th>Exponent</th>\r\n<th>Sign</th>\r\n</tr>\r\n<tr>\r\n<td>52 bits (0 - 51)</td>\r\n<td>11 bits (52 - 62)</td>\r\n<td>1 bit (63)</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n\r\n<hr />\r\n\r\n<h2>Precision</h2>\r\nIntegers (numbers without a period or exponent notation) are considered accurate up to 15 digits.\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate jsHigh">var x = 999999999999999;   // x will be 999999999999999\r\nvar y = 9999999999999999;  // y will be 10000000000000000</div>\r\n</div>\r\n<div class="w3-example"></div>\r\nThe maximum number of decimals is 17, but floating point arithmetic is not always 100% accurate:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate jsHigh">var x = 0.2 + 0.1;         // x will be 0.30000000000000004</div>\r\n</div>\r\nTo solve the problem above, it helps to multiply and divide:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate jsHigh">var x = (0.2 * 10 + 0.1 * 10) / 10;       // x will be 0.3</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n\r\n<hr />\r\n\r\n<h2>Hexadecimal</h2>\r\nJavaScript interprets numeric constants as hexadecimal if they are preceded by 0x.\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate jsHigh">var x = 0xFF;            // x will be 255</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n<table class="lamp">\r\n<tbody>\r\n<tr>\r\n<th><img src="http://www.w3schools.com/images/lamp.jpg" alt="Note" /></th>\r\n<td>Never write a number with a leading zero (like 07).\r\nSome JavaScript versions interpret numbers as octal if they are written with a leading zero.</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\nBy default, Javascript displays numbers as base 10 decimals.\r\n\r\nBut you can use the toString() method to output numbers as base 16 (hex), base 8 (octal), or base 2 (binary).\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate jsHigh">var myNumber = 128;\r\nmyNumber.toString(16);     // returns 80\r\nmyNumber.toString(8);      // returns 200\r\nmyNumber.toString(2);      // returns 10000000</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n\r\n<hr />\r\n\r\n<h2>Infinity</h2>\r\nInfinity (or -Infinity) is the value JavaScript will return if you calculate a number outside the largest possible number.\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate jsHigh">var myNumber = 2;\r\nwhile (myNumber != Infinity) {          // Execute until Infinity\r\nmyNumber = myNumber * myNumber;\r\n}</div>\r\n</div>\r\nDivision by 0 (zero) also generates Infinity:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate jsHigh">var x =  2 / 0;         // x will be Infinity\r\nvar y = -2 / 0;          // y will be -Infinity</div>\r\n</div>\r\n<div class="w3-example"></div>\r\nInfinity is a number: typeOf Infinity returns number.\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate jsHigh">typeofInfinity;        // returns "number"</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n\r\n<hr />\r\n\r\n<h2>NaN - Not a Number</h2>\r\nNaN is a JavaScript reserved word indicating that a value is not a number.\r\n\r\nTrying to do arithmetic with a non-numeric string will result in NaN (Not a Number):\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate jsHigh">var x = 100 / "Apple"; // x will be NaN (Not a Number)</div>\r\n</div>\r\nHowever, if the string contains a numeric value , the result will be a number:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate jsHigh">var x = 100 / "10";    // x will be 10</div>\r\n</div>\r\n<div class="w3-example"></div>\r\nYou can use the global JavaScript function isNaN() to find out if a value is a number.\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate jsHigh">var x = 100 / "Apple";\r\nisNaN(x);               // returns true because x is Not a Number</div>\r\n</div>\r\n<div class="w3-example"></div>\r\nWatch out for NaN. If you use NaN in a mathematical operation, the result will also be NaN:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate jsHigh">var x = NaN;\r\nvar y = 5;\r\nvar z = x + y;         // z will be NaN</div>\r\n</div>\r\n<div class="w3-example"></div>\r\nOr the result might be a concatenation:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate jsHigh">var x = NaN;\r\nvar y = "5";\r\nvar z = x + y;         // z will be NaN5</div>\r\n</div>\r\n<div class="w3-example"></div>\r\nNaN is a number, and typeof NaN returns number:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate jsHigh">typeof NaN;             // returns "number"</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n\r\n<hr />\r\n\r\n<h2>Numbers Can be Objects</h2>\r\nNormally JavaScript numbers are primitive values created from literals: <strong>var x = 123</strong>\r\n\r\nBut numbers can also be defined as objects with the keyword new: <strong>var y = new Number(123)</strong>\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate jsHigh">var x = 123;\r\nvar y = new Number(123);\r\n\r\n// typeof x returns number\r\n// typeof y returns object</div>\r\n</div>\r\n<table class="lamp">\r\n<tbody>\r\n<tr>\r\n<th><img src="http://www.w3schools.com/images/lamp.jpg" alt="Note" /></th>\r\n<td>Don''t create Number objects. It slows down execution speed.\r\nThe <strong>new</strong> keyword complicates the code. This can produce some unexpected results:</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\nWhen using the == equality operator, equal numbers looks equal:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate jsHigh">var x = 500;\r\nvar y = new Number(500);\r\n\r\n// (x == y) is true because x and y have equal values</div>\r\n</div>\r\n<div class="w3-example"></div>\r\nWhen using the === equality operator, equal numbers are not equal, because the === operator expects equality in both type and value.\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate jsHigh">var x = 500;\r\nvar y = new Number(500);\r\n\r\n// (x === y) is false because x and y have different types</div>\r\n</div>\r\n<div class="w3-example"></div>\r\nOr even worse. Objects cannot be compared:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate jsHigh">var x = new Number(500);\r\nvar y = new Number(500);\r\n\r\n// (x == y) is false because objects cannot be compared</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n<table class="lamp">\r\n<tbody>\r\n<tr>\r\n<th><img src="http://www.w3schools.com/images/lamp.jpg" alt="Note" /></th>\r\n<td>JavaScript objects cannot be compared.</td>\r\n</tr>\r\n</tbody>\r\n</table>', 'JS Numbers', '', 'publish', 'closed', 'closed', '', 'js-numbers', '', '', '2016-05-21 14:58:45', '2016-05-21 14:58:45', '', 0, 'http://localhost/invatacel/lessons/js-numbers/', 0, 'lp_lesson', '', 0),
(204, 1, '2016-05-21 14:51:31', '2016-05-21 14:51:31', '<p class="intro">The Math object allows you to perform mathematical tasks on numbers.</p>\r\n\r\n\r\n<hr />\r\n\r\n<h2>The Math Object</h2>\r\nThe Math object allows you to perform mathematical tasks.\r\n\r\nThe Math object includes several mathematical methods.\r\n\r\n<hr />\r\n\r\nOne common use of the Math object is to create a random number:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate jsHigh">Math.random();       // returns a random number</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n<table class="lamp">\r\n<tbody>\r\n<tr>\r\n<th><img src="http://www.w3schools.com/images/lamp.jpg" alt="Note" /></th>\r\n<td> Math has no constructor. No methods have to create a Math object first.</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n\r\n<hr />\r\n\r\n<h2>Math.min() and Math.max()</h2>\r\nMath.min() and Math.max() can be used to find the lowest or highest value in a list of arguments:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate jsHigh">Math.min(0, 150, 30, 20, -8, -200);      // returns -200</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate jsHigh">Math.max(0, 150, 30, 20, -8, -200);      // returns 150</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n\r\n<hr />\r\n\r\n<h2>Math.random()</h2>\r\nMath.random() returns a random number between 0 (inclusive),  and 1 (exclusive):\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate jsHigh">Math.random();              // returns a random number</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n<table class="lamp">\r\n<tbody>\r\n<tr>\r\n<th><img src="http://www.w3schools.com/images/lamp.jpg" alt="Note" /></th>\r\n<td>Math.random() always returns a number lower than 1.</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n\r\n<hr />\r\n\r\n<h2>Math.round()</h2>\r\nMath.round() rounds a number to the nearest integer:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate jsHigh">Math.round(4.7);            // returns 5\r\nMath.round(4.4);            // returns 4</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n\r\n<hr />\r\n\r\n<h2>Math.ceil()</h2>\r\nMath.ceil() rounds a number <strong>up</strong> to the nearest integer:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate jsHigh">Math.ceil(4.4);             // returns 5</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n\r\n<hr />\r\n\r\n<h2>Math.floor()</h2>\r\nMath.floor() rounds a number <strong>down</strong> to the nearest integer:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate jsHigh">Math.floor(4.7);            // returns 4</div>\r\n</div>\r\n<div class="w3-example"></div>\r\nMath.floor() and Math.random() can be used together to return a random number between 0 and 10:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate jsHigh">Math.floor(Math.random() * 11);   // returns a random number between 0 and 10</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n\r\n<hr />\r\n\r\n<h2>Math Constants</h2>\r\nJavaScript provides 8 mathematical constants that can be accessed with the Math object:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate jsHigh">Math.E          // returns Euler''s number\r\nMath.PI         // returns PI\r\nMath.SQRT2      // returns the square root of 2\r\nMath.SQRT1_2    // returns the square root of 1/2\r\nMath.LN2        // returns the natural logarithm of 2\r\nMath.LN10       // returns the natural logarithm of 10\r\nMath.LOG2E      // returns base 2 logarithm of E\r\nMath.LOG10E     // returns base 10 logarithm of E</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n\r\n<hr />\r\n\r\n<h2>Math Object Methods</h2>\r\n<table class="w3-table-all notranslate">\r\n<tbody>\r\n<tr>\r\n<th>Method</th>\r\n<th>Description</th>\r\n</tr>\r\n<tr>\r\n<td>abs(x)</td>\r\n<td>Returns the absolute value of x</td>\r\n</tr>\r\n<tr>\r\n<td>acos(x)</td>\r\n<td>Returns the arccosine of x, in radians</td>\r\n</tr>\r\n<tr>\r\n<td>asin(x)</td>\r\n<td>Returns the arcsine of x, in radians</td>\r\n</tr>\r\n<tr>\r\n<td>atan(x)</td>\r\n<td>Returns the arctangent of x as a numeric value between -PI/2 and PI/2 radians</td>\r\n</tr>\r\n<tr>\r\n<td>atan2(y,x)</td>\r\n<td>Returns the arctangent of the quotient of its arguments</td>\r\n</tr>\r\n<tr>\r\n<td>ceil(x)</td>\r\n<td>Returns x, rounded upwards to the nearest integer</td>\r\n</tr>\r\n<tr>\r\n<td>cos(x)</td>\r\n<td>Returns the cosine of x (x is in radians)</td>\r\n</tr>\r\n<tr>\r\n<td>exp(x)</td>\r\n<td>Returns the value of E<sup>x</sup></td>\r\n</tr>\r\n<tr>\r\n<td>floor(x)</td>\r\n<td>Returns x, rounded downwards to the nearest integer</td>\r\n</tr>\r\n<tr>\r\n<td>log(x)</td>\r\n<td>Returns the natural logarithm (base E) of x</td>\r\n</tr>\r\n<tr>\r\n<td>max(x,y,z,...,n)</td>\r\n<td>Returns the number with the highest value</td>\r\n</tr>\r\n<tr>\r\n<td>min(x,y,z,...,n)</td>\r\n<td>Returns the number with the lowest value</td>\r\n</tr>\r\n<tr>\r\n<td>pow(x,y)</td>\r\n<td>Returns the value of x to the power of y</td>\r\n</tr>\r\n<tr>\r\n<td>random()</td>\r\n<td>Returns a random number between 0 and 1</td>\r\n</tr>\r\n<tr>\r\n<td>round(x)</td>\r\n<td>Rounds x to the nearest integer</td>\r\n</tr>\r\n<tr>\r\n<td>sin(x)</td>\r\n<td>Returns the sine of x (x is in radians)</td>\r\n</tr>\r\n<tr>\r\n<td>sqrt(x)</td>\r\n<td>Returns the square root of x</td>\r\n</tr>\r\n<tr>\r\n<td>tan(x)</td>\r\n<td>Returns the tangent of an angle</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n\r\n<hr />\r\n\r\n<h2>Complete Math Reference</h2>\r\nFor a complete reference, go to our <a href="http://www.w3schools.com/jsref/jsref_obj_math.asp">complete Math object reference</a>.\r\n\r\nThe reference contains descriptions and examples of all Math properties and methods.', 'JS Math', '', 'publish', 'closed', 'closed', '', 'js-math', '', '', '2016-05-21 14:59:06', '2016-05-21 14:59:06', '', 0, 'http://localhost/invatacel/lessons/js-math/', 0, 'lp_lesson', '', 0),
(205, 1, '2016-05-21 14:51:45', '2016-05-21 14:51:45', '<p class="intro">The Date object lets you work with dates (years, months, days, hours, minutes, seconds, and milliseconds)</p>\r\n\r\n\r\n<hr />\r\n\r\n<h2>JavaScript Date Formats</h2>\r\nA JavaScript date can be written as a string:\r\n\r\n<strong>Sat May 21 2016 17:59:08 GMT+0300 (GTB Standard Time)</strong>\r\n\r\nor as a number:\r\n\r\n<strong>1463842748712</strong>\r\n\r\nDates written as numbers, specifies the number of milliseconds since January 1, 1970, 00:00:00.\r\n\r\n<hr />\r\n\r\n<h2>Displaying Dates</h2>\r\nIn this tutorial we use a script to display dates inside a &lt;p&gt; element with id="demo":\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate htmlHigh">&lt;p id="demo"&gt;&lt;/p&gt;\r\n\r\n&lt;script&gt;\r\ndocument.getElementById("demo").innerHTML = Date();\r\n&lt;/script&gt;</div>\r\n</div>\r\n<div class="w3-example"></div>\r\nThe script above says: assign the value of Date() to the content (innerHTML) of the element with id="demo".\r\n<table class="lamp">\r\n<tbody>\r\n<tr>\r\n<th><img src="http://www.w3schools.com/images/lamp.jpg" alt="Note" /></th>\r\n<td>You will learn how to display a date, in a more readable format, at the bottom of this page.</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n\r\n<hr />\r\n\r\n<h2>Creating Date Objects</h2>\r\nThe Date object lets us work with dates.\r\n\r\nA date consists of a year, a month, a day, an hour, a minute, a second, and milliseconds.\r\n\r\nDate objects are created with the <strong>new Date()</strong> constructor.\r\n\r\nThere are <strong>4 ways</strong> of initiating a date:\r\n<div class="w3-example">\r\n<div class="w3-code notranslate jsHigh">new Date()\r\nnew Date(milliseconds)\r\nnew Date(dateString)\r\nnew Date(year, month, day, hours, minutes, seconds, milliseconds)</div>\r\n</div>\r\nUsing new Date(), creates a new date object with the <strong>current date and time</strong>:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate htmlHigh">&lt;script&gt;\r\nvar d = new Date();\r\ndocument.getElementById("demo").innerHTML = d;\r\n&lt;/script&gt;</div>\r\n</div>\r\n<div class="w3-example"></div>\r\nUsing new Date(<strong>date string</strong>), creates a new date object from the <strong>specified date and time</strong>:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate htmlHigh">&lt;script&gt;\r\nvar d = new Date("October 13, 2014 11:13:00");\r\ndocument.getElementById("demo").innerHTML = d;\r\n&lt;/script&gt;</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n<table class="lamp">\r\n<tbody>\r\n<tr>\r\n<th><img src="http://www.w3schools.com/images/lamp.jpg" alt="Note" /></th>\r\n<td>Valid date strings (date formats) are described in the next chapter.</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\nUsing new Date(<strong>number</strong>), creates a new date object as<strong> zero time plus the number</strong>.\r\n\r\nZero time is 01 January 1970 00:00:00 UTC. The number is specified in milliseconds:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate htmlHigh">&lt;script&gt;\r\nvar d = new Date(86400000);\r\ndocument.getElementById("demo").innerHTML = d;\r\n&lt;/script&gt;</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n<table class="lamp">\r\n<tbody>\r\n<tr>\r\n<th><img src="http://www.w3schools.com/images/lamp.jpg" alt="Note" /></th>\r\n<td>JavaScript dates are calculated in milliseconds from 01 January, 1970 00:00:00 Universal Time (UTC). One day contains 86,400,000 millisecond.</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\nUsing new Date(<strong>7 numbers</strong>), creates a new date object with the <strong>specified date and time</strong>:\r\n\r\nThe 7 numbers specify the year, month, day, hour, minute, second, and millisecond, in that order:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate htmlHigh">&lt;script&gt;\r\nvar d = new Date(99,5,24,11,33,30,0);\r\ndocument.getElementById("demo").innerHTML = d;\r\n&lt;/script&gt;</div>\r\n</div>\r\n<div class="w3-example"></div>\r\nVariants of the example above let us omit any of the last 4 parameters:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate htmlHigh">&lt;script&gt;\r\nvar d = new Date(99,5,24);\r\ndocument.getElementById("demo").innerHTML = d;\r\n&lt;/script&gt;</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n<table class="lamp">\r\n<tbody>\r\n<tr>\r\n<th><img src="http://www.w3schools.com/images/lamp.jpg" alt="Note" /></th>\r\n<td>JavaScript counts months from 0 to 11. January is 0. December is 11.</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n\r\n<hr />\r\n\r\n<h2>Date Methods</h2>\r\nWhen a Date object is created, a number of <strong>methods</strong> allow you to operate on it.\r\n\r\nDate methods allow you to get and set the year, month, day, hour, minute, second, and millisecond of objects, using either local time or UTC (universal, or GMT) time.\r\n<table class="lamp">\r\n<tbody>\r\n<tr>\r\n<th><img src="http://www.w3schools.com/images/lamp.jpg" alt="Note" /></th>\r\n<td>Date methods are covered in a later chapter.</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n\r\n<hr />\r\n\r\n<h2>Displaying Dates</h2>\r\nWhen you display a date object in HTML, it is automatically converted to a string, with the <strong>toString()</strong> method.\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate htmlHigh">&lt;p id="demo"&gt;&lt;/p&gt;\r\n\r\n&lt;script&gt;\r\nd = new Date();\r\ndocument.getElementById("demo").innerHTML = d;\r\n&lt;/script&gt;</div>\r\nIs the same as:\r\n<div class="w3-code notranslate htmlHigh">&lt;p id="demo"&gt;&lt;/p&gt;\r\n\r\n&lt;script&gt;\r\nd = new Date();\r\ndocument.getElementById("demo").innerHTML = d.toString();\r\n&lt;/script&gt;</div>\r\n</div>\r\n<div class="w3-example"></div>\r\nThe <strong>toUTCString()</strong> method converts a date to a UTC string (a date display standard).\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate htmlHigh">&lt;script&gt;\r\nvar d = new Date();\r\ndocument.getElementById("demo").innerHTML = d.toUTCString();\r\n&lt;/script&gt;</div>\r\n</div>\r\n<div class="w3-example"></div>\r\nThe <strong>toDateString()</strong> method converts a date to a more readable format:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate htmlHigh">&lt;script&gt;\r\nvar d = new Date();\r\ndocument.getElementById("demo").innerHTML = d.toDateString();\r\n&lt;/script&gt;</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n<table class="lamp">\r\n<tbody>\r\n<tr>\r\n<th><img src="http://www.w3schools.com/images/lamp.jpg" alt="Note" /></th>\r\n<td>Date objects are static, not dynamic. The computer time is ticking, but date objects, once created, are not.</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n\r\n<hr />\r\n\r\n<h2>Time Zones</h2>\r\nWhen setting a date, without specifying the time zone, JavaScript will use the browser''s time zone.\r\n\r\nWhen getting a date, without specifying the time zone, the result is converted to the browser''s time zone.\r\n\r\nIn other words: If a date/time is created in GMT (Greenwich Mean Time), the date/time will be converted to CDT (Central US Daylight Time) if a user browses from central US.\r\n<table class="lamp">\r\n<tbody>\r\n<tr>\r\n<th><img src="http://www.w3schools.com/images/lamp.jpg" alt="Note" /></th>\r\n<td>Read more about time zones in the next chapters.</td>\r\n</tr>\r\n</tbody>\r\n</table>', 'JS Dates', '', 'publish', 'closed', 'closed', '', 'js-dates', '', '', '2016-05-21 14:59:33', '2016-05-21 14:59:33', '', 0, 'http://localhost/invatacel/lessons/js-dates/', 0, 'lp_lesson', '', 0);
INSERT INTO `wp_posts` (`ID`, `post_author`, `post_date`, `post_date_gmt`, `post_content`, `post_title`, `post_excerpt`, `post_status`, `comment_status`, `ping_status`, `post_password`, `post_name`, `to_ping`, `pinged`, `post_modified`, `post_modified_gmt`, `post_content_filtered`, `post_parent`, `guid`, `menu_order`, `post_type`, `post_mime_type`, `comment_count`) VALUES
(206, 1, '2016-05-21 14:51:50', '2016-05-21 14:51:50', '<p class="intro">JavaScript arrays are used to store multiple values in a single variable.</p>\r\n\r\n\r\n<hr />\r\n\r\n<h2>Displaying Arrays</h2>\r\nIn this tutorial we will use a script to display arrays inside a &lt;p&gt; element with id="demo":\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate htmlHigh">\r\n\r\n&lt;p id="demo"&gt;&lt;/p&gt;\r\n\r\n&lt;script&gt;\r\nvar cars = ["Saab", "Volvo", "BMW"];\r\ndocument.getElementById("demo").innerHTML = cars;\r\n&lt;/script&gt;\r\n\r\n</div>\r\n</div>\r\nThe first line (in the script) creates an array named cars.\r\n\r\nThe second line "finds" the element with id="demo", and "displays" the array in the "innerHTML" of it.\r\n\r\n<hr />\r\n\r\n<h2>Try it Yourself</h2>\r\nCreate an array, and assign values to it:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate jsHigh">var cars = ["Saab", "Volvo", "BMW"];</div>\r\n</div>\r\n<div class="w3-example"></div>\r\nSpaces and line breaks are not important. A declaration can span multiple lines:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate jsHigh">var cars = [\r\n"Saab",\r\n"Volvo",\r\n"BMW"\r\n];</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n<table class="lamp">\r\n<tbody>\r\n<tr>\r\n<th><img src="http://www.w3schools.com/images/lamp.jpg" alt="Note" /></th>\r\n<td>Never put a comma after the last element (like "BMW",). The effect is inconsistent across browsers.</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n\r\n<hr />\r\n\r\n<h2>What is an Array?</h2>\r\nAn array is a special variable, which can hold more than one value at a time.\r\n\r\nIf you have a list of items (a list of car names, for example), storing the cars in single variables could look like this:\r\n<div class="w3-code w3-border notranslate">\r\n<div>var car1 = "Saab";\r\nvar car2 = "Volvo";\r\nvar car3 = "BMW";</div>\r\n</div>\r\nHowever, what if you want to loop through the cars and find a specific one? And what if you had not 3 cars, but 300?\r\n\r\nThe solution is an array!\r\n\r\nAn array can hold many values under a single name, and you can access the values by referring to an index number.\r\n\r\n<hr />\r\n\r\n<h2>Creating an Array</h2>\r\nUsing an array literal is the easiest way to create a JavaScript Array.\r\n\r\nSyntax:\r\n<div class="w3-code w3-border notranslate">\r\n<div>var <em>array-name</em> = [<em>item1</em>, <em>item2</em>, ...];</div>\r\n</div>\r\nExample:\r\n<div class="w3-code w3-border notranslate">\r\n<div>var cars = ["Saab", "Volvo", "BMW"];</div>\r\n</div>\r\n\r\n<hr />\r\n\r\n<h2>Using the JavaScript Keyword new</h2>\r\nThe following example also creates an Array, and assigns values to it:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate jsHigh">var cars = new Array("Saab", "Volvo", "BMW");</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n<table class="lamp">\r\n<tbody>\r\n<tr>\r\n<th><img src="http://www.w3schools.com/images/lamp.jpg" alt="Note" /></th>\r\n<td>The two examples above do exactly the same. There is no need to use new Array().\r\nFor simplicity, readability and execution speed, use the first one (the array literal method).</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n\r\n<hr />\r\n\r\n<h2>Access the Elements of an Array</h2>\r\nYou refer to an array element by referring to the <b>index number</b>.\r\n\r\nThis statement accesses the value of the first element in cars:\r\n<div class="w3-code w3-border notranslate">\r\n<div>var name = cars[0];</div>\r\n</div>\r\nThis statement modifies the first element in cars:\r\n<div class="w3-code w3-border notranslate">\r\n<div>cars[0] = "Opel";</div>\r\n</div>\r\n<table class="lamp">\r\n<tbody>\r\n<tr>\r\n<th><img src="http://www.w3schools.com/images/lamp.jpg" alt="Note" /></th>\r\n<td>[0] is the first element in an array. [1] is the second. Array indexes start with 0.</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n\r\n<hr />\r\n\r\n<h2>You Can Have Different Objects in One Array</h2>\r\nJavaScript variables can be objects. Arrays are special kinds of objects.\r\n\r\nBecause of this, you can have variables of different types in the same Array.\r\n\r\nYou can have objects in an Array. You can have functions in an Array. You can have arrays in an Array:\r\n<div class="w3-code w3-border notranslate">\r\n<div>myArray[0] = Date.now;\r\nmyArray[1] = myFunction;\r\nmyArray[2] = myCars;</div>\r\n</div>\r\n\r\n<hr />\r\n\r\n<h2>Arrays are Objects</h2>\r\nArrays are a special type of objects. The <strong>typeof</strong> operator in JavaScript returns "object" for arrays.\r\n\r\nBut, JavaScript arrays are best described as arrays.\r\n\r\nArrays use <strong>numbers</strong> to access its "elements". In this example, person[0] returns John:\r\n<div class="w3-example">\r\n<h3>Array:</h3>\r\n<div class="w3-code notranslate jsHigh">var person = ["John", "Doe", 46];</div>\r\n</div>\r\n<div class="w3-example"></div>\r\nObjects use <strong>names</strong> to access its "members". In this example, person.firstName returns John:\r\n<div class="w3-example">\r\n<h3>Object:</h3>\r\n<div class="w3-code notranslate jsHigh">var person = {firstName:"John", lastName:"Doe", age:46};</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n\r\n<hr />\r\n\r\n<h2>Array Properties and Methods</h2>\r\nThe real strength of JavaScript arrays are the built-in array properties and methods:\r\n<div class="w3-example">\r\n<h3>Examples</h3>\r\n<div class="w3-code notranslate jsHigh">var x = cars.length;        // The length property returns the number of elements in cars\r\nvar y = cars.sort();         // The sort() method sort cars in alphabetical order</div>\r\n</div>\r\nArray methods are covered in the next chapter.\r\n\r\n<hr />\r\n\r\n<h2>The length Property</h2>\r\nThe <strong>length</strong> property of an array returns the length of an array (the number of array elements).\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate jsHigh">var fruits = ["Banana", "Orange", "Apple", "Mango"];\r\nfruits.length;                       // the length of fruits is 4</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n<table class="lamp">\r\n<tbody>\r\n<tr>\r\n<th><img src="http://www.w3schools.com/images/lamp.jpg" alt="Note" /></th>\r\n<td>The length property is always one more than the highest array index.</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n\r\n<hr />\r\n\r\n<h2>Adding Array Elements</h2>\r\nThe easiest way to add a new element to an array is using the push method:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate jsHigh">var fruits = ["Banana", "Orange", "Apple", "Mango"];\r\nfruits.push("Lemon");                // adds a new element (Lemon) to fruits</div>\r\n</div>\r\n<div class="w3-example"></div>\r\nNew element can also be added to an array using the length property:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate jsHigh">var fruits = ["Banana", "Orange", "Apple", "Mango"];\r\nfruits[fruits.length] = "Lemon";     // adds a new element (Lemon) to fruits</div>\r\n</div>\r\n<div class="w3-example"></div>\r\nAdding elements with high indexes can create undefined "holes" in an array:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate jsHigh">var fruits = ["Banana", "Orange", "Apple", "Mango"];\r\nfruits[10] = "Lemon";                // adds a new element (Lemon) to fruits</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n\r\n<hr />\r\n\r\n<h2>Looping Array Elements</h2>\r\nThe best way to loop through an array, is using a "for" loop:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate jsHigh">\r\n\r\nvar fruits, text, fLen, i;\r\n\r\nfruits = ["Banana", "Orange", "Apple", "Mango"];\r\nfLen = fruits.length;\r\ntext = "&lt;ul&gt;";\r\nfor (i = 0; i &lt; fLen; i++) {\r\ntext += "&lt;li&gt;" + fruits[i] + "&lt;/li&gt;";\r\n}\r\n\r\n</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n\r\n<hr />\r\n\r\n<h2>Associative Arrays</h2>\r\nMany programming languages support arrays with named indexes.\r\n\r\nArrays with named indexes are called associative arrays (or hashes).\r\n\r\nJavaScript does <strong>not</strong> support arrays with named indexes.\r\n\r\nIn JavaScript, <strong>arrays</strong> always use <strong>numbered indexes</strong>.\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate jsHigh">var person = [];\r\nperson[0] = "John";\r\nperson[1] = "Doe";\r\nperson[2] = 46;\r\nvar x = person.length;         // person.length will return 3\r\nvar y = person[0];             // person[0] will return "John"</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n<table class="lamp">\r\n<tbody>\r\n<tr>\r\n<th><img src="http://www.w3schools.com/images/lamp.jpg" alt="Note" /></th>\r\n<td><strong>WARNING !!</strong>\r\nIf you use a named index, JavaScript will redefine the array to a standard object.\r\nAfter that, <strong>all array methods and properties will produce incorrect results</strong>.</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n<div class="w3-example">\r\n<h3> Example:</h3>\r\n<div class="w3-code notranslate jsHigh">var person = [];\r\nperson["firstName"] = "John";\r\nperson["lastName"] = "Doe";\r\nperson["age"] = 46;\r\nvar x = person.length;         // person.length will return 0\r\nvar y = person[0];             // person[0] will return undefined</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n\r\n<hr />\r\n\r\n<h2>The Difference Between Arrays and Objects</h2>\r\nIn JavaScript, <strong>arrays</strong> use <strong>numbered indexes</strong>.\r\n\r\nIn JavaScript, <strong>objects</strong> use <strong>named indexes</strong>.\r\n<table class="lamp">\r\n<tbody>\r\n<tr>\r\n<th><img src="http://www.w3schools.com/images/lamp.jpg" alt="Note" /></th>\r\n<td>Arrays are a special kind of objects, with numbered indexes.</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n\r\n<hr />\r\n\r\n<h2>When to Use Arrays. When to use Objects.</h2>\r\n<ul>\r\n 	<li>JavaScript does not support associative arrays.</li>\r\n 	<li>You should use <strong>objects</strong> when you want the element names to be <strong>strings (text)</strong>.</li>\r\n 	<li>You should use <strong>arrays</strong> when you want the element names to be <strong>numbers</strong>.</li>\r\n</ul>\r\n\r\n<hr />\r\n\r\n<h2>Avoid new Array()</h2>\r\nThere is no need to use the JavaScript''s built-in array constructor <strong>new</strong> Array().\r\n\r\n<strong>Use [] instead.</strong>\r\n\r\nThese two different statements both create a new empty array named points:\r\n<div class="w3-example">\r\n<div class="w3-code notranslate jsHigh">var points = new Array();         // Bad\r\nvar points = [];                  // Good</div>\r\n</div>\r\nThese two different statements both create a new array containing 6 numbers:\r\n<div class="w3-example">\r\n<div class="w3-code notranslate jsHigh">var points = new Array(40, 100, 1, 5, 25, 10)  // Bad\r\nvar points = [40, 100, 1, 5, 25, 10];          // Good</div>\r\n</div>\r\n<div class="w3-example"></div>\r\nThe <strong>new</strong> keyword only complicates the code. It can also produce some unexpected results:\r\n<div class="w3-example">\r\n<div class="w3-code notranslate jsHigh">var points = new Array(40, 100);  // Creates an array with two elements (40 and 100)</div>\r\n</div>\r\nWhat if I remove one of the elements?\r\n<div class="w3-example">\r\n<div class="w3-code notranslate jsHigh">var points = new Array(40);       // Creates an array with 40 undefined elements !!!!!</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n\r\n<hr />\r\n\r\n<h2>How to Recognize an Array</h2>\r\nA common question is: How do I know if a variable is an array?\r\n\r\nThe problem is that the JavaScript operator <strong>typeof</strong> returns "object":\r\n<div class="w3-example">\r\n<div class="w3-code notranslate jsHigh">\r\n\r\nvar fruits = ["Banana", "Orange", "Apple", "Mango"];\r\n\r\ntypeof fruits;             // returns object\r\n\r\n</div>\r\n</div>\r\n<div class="w3-example"></div>\r\nThe typeof operator returns object because a JavaScript array is an object.\r\n<h3>Solution 1:</h3>\r\nTo solve this problem ECMAScript 5 defines a new method <strong>Array.isArray()</strong>:\r\n<div class="w3-example">\r\n<div class="w3-code notranslate jsHigh">Array.isArray(fruits);     // returns true</div>\r\n</div>\r\n<div class="w3-example"></div>\r\nThe problem with this solution is that ECMAScript 5 is <strong>not supported in older browsers</strong>.\r\n<h3>Solution 2:</h3>\r\nTo solve this problem you can create your own isArray() function:\r\n<div class="w3-example">\r\n<div class="w3-code notranslate jsHigh">function isArray(x) {\r\nreturn x.constructor.toString().indexOf("Array") &gt; -1;\r\n}</div>\r\n</div>\r\n<div class="w3-example"></div>\r\nThe function above always returns true if the argument is an array.\r\n\r\nOr more precisely: it returns true if the object prototype contains the word "Array".\r\n<h3>Solution 3:</h3>\r\nThe <strong>instanceof</strong> operator returns true if an object is created by a given constructor:\r\n<div class="w3-example">\r\n<div class="w3-code notranslate jsHigh">\r\n\r\nvar fruits = ["Banana", "Orange", "Apple", "Mango"];\r\n\r\nfruits instanceof Array     // returns true\r\n\r\n</div>\r\n</div>', 'JS Array', '', 'publish', 'closed', 'closed', '', 'js-array', '', '', '2016-05-21 15:00:06', '2016-05-21 15:00:06', '', 0, 'http://localhost/invatacel/lessons/js-array/', 0, 'lp_lesson', '', 0),
(207, 1, '2016-05-21 14:52:10', '2016-05-21 14:52:10', '<p class="intro">Conditional statements are used to perform different actions based on different conditions.</p>\r\n\r\n\r\n<hr />\r\n\r\n<h2>Conditional Statements</h2>\r\nVery often when you write code, you want to perform different actions for different decisions.\r\n\r\nYou can use conditional statements in your code to do this.\r\n\r\nIn JavaScript we have the following conditional statements:\r\n<ul>\r\n 	<li>Use<b> if </b>to specify a block of code to be executed, if a specified condition is true</li>\r\n 	<li>Use <b>else</b> to specify a block of code to be executed, if the same condition is false</li>\r\n 	<li>Use <b>else if</b> to specify a new condition to test, if the first condition is false</li>\r\n 	<li>Use <b>switch</b> to specify many alternative blocks of code to be executed</li>\r\n</ul>\r\n\r\n<hr />\r\n\r\n<h2>The if Statement</h2>\r\nUse the <strong>if</strong> statement to specify a block of JavaScript code to be executed if a condition is true.\r\n<h3>Syntax</h3>\r\n<div class="w3-code w3-border notranslate">\r\n<div>if (<i>condition</i>) {\r\n<em>    block of code to be executed if the condition is true\r\n</em>}</div>\r\n</div>\r\n<table class="lamp">\r\n<tbody>\r\n<tr>\r\n<th><img src="http://www.w3schools.com/images/lamp.jpg" alt="Note" /></th>\r\n<td>Note that <strong>if</strong> is in lowercase letters. Uppercase letters (If or IF) will generate a JavaScript error.</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\nMake a "Good day" greeting if the hour is less than 18:00:\r\n<div class="w3-code notranslate jsHigh">if (hour &lt; 18) {\r\ngreeting = "Good day";\r\n}</div>\r\nThe result of greeting will be:\r\n<div class="w3-code notranslate">Good day</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n\r\n<hr />\r\n\r\n<h2>The else Statement</h2>\r\nUse the <strong>else</strong> statement to specify a block of code to be executed if the condition is false.\r\n<div class="w3-code w3-border notranslate">\r\n<div>if (<i>condition</i>) {\r\n<em>    block of code to be executed if the condition is true\r\n</em>} else {\r\n<em>    block of code to be executed if the condition is false\r\n</em>}</div>\r\n</div>\r\n&nbsp;\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\nIf the hour is less than 18, create a "Good day" greeting, otherwise "Good evening":\r\n<div class="w3-code notranslate jsHigh">if (hour &lt; 18) {\r\ngreeting = "Good day";\r\n} else {\r\ngreeting = "Good evening";\r\n}</div>\r\nThe result of greeting will be:\r\n<div class="w3-code notranslate">Good day</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n\r\n<hr />\r\n\r\n<h2>The else if Statement</h2>\r\nUse the <strong>else if</strong> statement to specify a new condition if the first condition is false.\r\n<h3>Syntax</h3>\r\n<div class="w3-code w3-border notranslate">\r\n<div>if (<i>condition1</i>) {\r\n<em>    block of code to be executed if condition1 is true\r\n</em>} else if (<i>condition2</i>) {\r\n<em>    block of code to be executed if the condition1 is false and condition2 is true</em>\r\n} else {\r\n<em>    block of code to be executed if the condition1 is false and condition2 is false\r\n</em>}</div>\r\n</div>\r\n&nbsp;\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\nIf time is less than 10:00, create a "Good morning" greeting, if not, but time is less than 20:00, create a "Good day" greeting, otherwise a "Good evening":\r\n<div class="w3-code notranslate jsHigh">if (time &lt; 10) {\r\ngreeting = "Good morning";\r\n} else if (time &lt; 20) {\r\ngreeting = "Good day";\r\n} else {\r\ngreeting = "Good evening";\r\n}</div>\r\nThe result of greeting will be:\r\n<div class="w3-code notranslate">Good day</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n\r\n<hr />\r\n\r\n&nbsp;', 'JS Conditions', '', 'publish', 'closed', 'closed', '', 'js-conditions', '', '', '2016-05-21 15:02:47', '2016-05-21 15:02:47', '', 0, 'http://localhost/invatacel/lessons/js-conditions/', 0, 'lp_lesson', '', 0),
(208, 1, '2016-05-21 14:52:19', '2016-05-21 14:52:19', '<p class="intro">Comparison and Logical operators are used to test for <em>true</em> or <em>false</em>.</p>\r\n\r\n\r\n<hr />\r\n\r\n<h2>Comparison Operators</h2>\r\nComparison operators are used in logical statements to determine equality or difference between variables or values.\r\n\r\nGiven that <b>x = 5</b>, the table below explains the comparison operators:\r\n<div class="table-responsive">\r\n<table class="w3-table-all notranslate">\r\n<tbody>\r\n<tr>\r\n<th>Operator</th>\r\n<th>Description</th>\r\n<th>Comparing</th>\r\n<th>Returns</th>\r\n<th>Try it</th>\r\n</tr>\r\n<tr>\r\n<td rowspan="3">==</td>\r\n<td rowspan="3">equal to</td>\r\n<td>x == 8</td>\r\n<td>false</td>\r\n<td></td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n</div>\r\n<div class="table-responsive"></div>\r\n<table class="w3-table-all notranslate">\r\n<tbody>\r\n<tr>\r\n<td>x == 5</td>\r\n<td>true</td>\r\n<td></td>\r\n</tr>\r\n<tr>\r\n<td>x == "5"</td>\r\n<td>true</td>\r\n<td></td>\r\n</tr>\r\n<tr>\r\n<td rowspan="2">===</td>\r\n<td rowspan="2">equal value and equal type</td>\r\n<td>x === 5</td>\r\n<td>true</td>\r\n<td></td>\r\n</tr>\r\n<tr>\r\n<td>x === "5"</td>\r\n<td>false</td>\r\n<td></td>\r\n</tr>\r\n<tr>\r\n<td>!=</td>\r\n<td>not equal</td>\r\n<td>x != 8</td>\r\n<td>true</td>\r\n<td></td>\r\n</tr>\r\n<tr>\r\n<td rowspan="3">!==</td>\r\n<td rowspan="3">not equal value or not equal type</td>\r\n<td>x !== 5</td>\r\n<td>false</td>\r\n<td></td>\r\n</tr>\r\n<tr>\r\n<td>x !== "5"</td>\r\n<td>true</td>\r\n<td></td>\r\n</tr>\r\n<tr>\r\n<td>x !== 8</td>\r\n<td>true</td>\r\n<td></td>\r\n</tr>\r\n<tr>\r\n<td>&gt;</td>\r\n<td>greater than</td>\r\n<td>x &gt; 8</td>\r\n<td>false</td>\r\n<td></td>\r\n</tr>\r\n<tr>\r\n<td>&lt;</td>\r\n<td>less than</td>\r\n<td>x &lt; 8</td>\r\n<td>true</td>\r\n<td></td>\r\n</tr>\r\n<tr>\r\n<td>&gt;=</td>\r\n<td>greater than or equal to</td>\r\n<td>x &gt;= 8</td>\r\n<td>false</td>\r\n<td></td>\r\n</tr>\r\n<tr>\r\n<td>&lt;=</td>\r\n<td>less than or equal to</td>\r\n<td>x &lt;= 8</td>\r\n<td>true</td>\r\n<td></td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n\r\n<hr />\r\n\r\n<h2>How Can it be Used</h2>\r\nComparison operators can be used in conditional statements to compare values and take action depending on the result:\r\n<div class="w3-example">\r\n<div class="w3-code notranslate jsHigh">if (age &lt; 18) text = "Too young";</div>\r\n</div>\r\nYou will learn more about the use of conditional statements in the next chapter of this tutorial.\r\n\r\n<hr />\r\n\r\n<h2>Logical Operators</h2>\r\nLogical operators are used to determine the logic between variables or values.\r\n\r\nGiven that <b>x = 6</b> and <b>y = 3</b>, the table below explains the logical operators:\r\n<div class="table-responsive">\r\n<table class="w3-table-all notranslate">\r\n<tbody>\r\n<tr>\r\n<th>Operator</th>\r\n<th>Description</th>\r\n<th>Example</th>\r\n<th>Try it</th>\r\n</tr>\r\n<tr>\r\n<td>&amp;&amp;</td>\r\n<td>and</td>\r\n<td>(x &lt; 10 &amp;&amp; y &gt; 1) is true</td>\r\n<td></td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n</div>\r\n|| or (x == 5 || y == 5) is false ! not !(x == y) is true\r\n<div class="table-responsive"></div>\r\n\r\n<hr />\r\n\r\n<h2>Conditional (Ternary) Operator</h2>\r\nJavaScript also contains a conditional operator that assigns a value to a variable based on some condition.\r\n<h3>Syntax</h3>\r\n<div class="w3-code w3-border notranslate">\r\n<div><em>variablename </em>= (<em>condition</em>) ?<em> value1</em>:<em>value2</em></div>\r\n</div>\r\n<h3>Example</h3>\r\n<div class="w3-example">\r\n<div class="w3-code notranslate jsHigh">var voteable = (age &lt; 18) ? "Too young":"Old enough";</div>\r\n</div>\r\n<div class="w3-example"></div>\r\nIf the variable age is a value below 18, the value of the variable voteable will be "Too young", otherwise the value of voteable will be "Old enough".\r\n\r\n<hr />\r\n\r\n<h2>Comparing Different Types</h2>\r\nComparing data of different types may give unexpected results.\r\n\r\nWhen comparing a string with a number, JavaScript will convert the string to a number when doing the comparison. An empty string converts to 0. A non-numeric string converts to NaN which is always false.\r\n<table class="w3-table-all notranslate">\r\n<tbody>\r\n<tr>\r\n<th>Case</th>\r\n<th>Value</th>\r\n<th>Try</th>\r\n</tr>\r\n<tr>\r\n<td>2 &lt; 12</td>\r\n<td>true</td>\r\n<td></td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n<table class="w3-table-all notranslate">\r\n<tbody>\r\n<tr>\r\n<td>2 &lt; "12"</td>\r\n<td>true</td>\r\n<td></td>\r\n</tr>\r\n<tr>\r\n<td>2 &lt; "John"</td>\r\n<td>false</td>\r\n<td></td>\r\n</tr>\r\n<tr>\r\n<td>2 &gt; "John"</td>\r\n<td>false</td>\r\n<td></td>\r\n</tr>\r\n<tr>\r\n<td>2 == "John"</td>\r\n<td>false</td>\r\n<td></td>\r\n</tr>\r\n<tr>\r\n<td>"2" &lt; "12"</td>\r\n<td>false</td>\r\n<td></td>\r\n</tr>\r\n<tr>\r\n<td>"2" &gt; "12"</td>\r\n<td>true</td>\r\n<td></td>\r\n</tr>\r\n<tr>\r\n<td>"2" == "12"</td>\r\n<td>false</td>\r\n<td></td>\r\n</tr>\r\n</tbody>\r\n</table>\r\nWhen comparing two strings, "2" will be greater than "12", because (alphabetically) 1 is less than 2.\r\n\r\nTo secure a proper result, variables should be converted to the proper type before comparison:\r\n<div class="w3-example">\r\n<div class="w3-code notranslate jsHigh">age = Number(age);\r\nif (isNaN(age)) {\r\nvoteable = "Error in input";\r\n} else {\r\nvoteable = (age &lt; 18) ? "Too young" : "Old enough";\r\n}</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n\r\n<hr />\r\n\r\n<h2>JavaScript Bitwise Operators</h2>\r\nBit operators work on 32-bit numbers.\r\n\r\nAny numeric operand in the operation is converted into a 32-bit number.\r\n\r\nThe result is converted back to a JavaScript number.\r\n<div class="table-responsive">\r\n<table class="w3-table-all notranslate">\r\n<tbody>\r\n<tr>\r\n<th>Operator</th>\r\n<th>Description</th>\r\n<th>Example</th>\r\n<th>Same as</th>\r\n<th>Result</th>\r\n<th>Decimal</th>\r\n</tr>\r\n<tr>\r\n<td>&amp;</td>\r\n<td>AND</td>\r\n<td>x = 5 &amp; 1</td>\r\n<td>0101 &amp; 0001</td>\r\n<td>0001</td>\r\n<td>1</td>\r\n</tr>\r\n<tr>\r\n<td>|</td>\r\n<td>OR</td>\r\n<td>x = 5 | 1</td>\r\n<td>0101 | 0001</td>\r\n<td>0101</td>\r\n<td>5</td>\r\n</tr>\r\n<tr>\r\n<td>~</td>\r\n<td>NOT</td>\r\n<td>x = ~ 5</td>\r\n<td> ~0101</td>\r\n<td>1010</td>\r\n<td>10</td>\r\n</tr>\r\n<tr>\r\n<td>^</td>\r\n<td>XOR</td>\r\n<td>x = 5 ^ 1</td>\r\n<td>0101 ^ 0001</td>\r\n<td>0100</td>\r\n<td>4</td>\r\n</tr>\r\n<tr>\r\n<td>&lt;&lt;</td>\r\n<td>Left shift</td>\r\n<td>x = 5 &lt;&lt; 1</td>\r\n<td>0101 &lt;&lt; 1</td>\r\n<td>1010</td>\r\n<td>10</td>\r\n</tr>\r\n<tr>\r\n<td>&gt;&gt;</td>\r\n<td>Right shift</td>\r\n<td>x = 5 &gt;&gt; 1</td>\r\n<td>0101 &gt;&gt; 1</td>\r\n<td>0010</td>\r\n<td>2</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n</div>\r\n<table class="lamp">\r\n<tbody>\r\n<tr>\r\n<th><img src="http://www.w3schools.com/images/lamp.jpg" alt="Note" /></th>\r\n<td>The table above use 4 bits unsigned examples. But JavaScript uses 32-bit signed numbers. Because of this, in JavaScript, ~ 5 will not return 10. It will return -6:\r\n~00000000000000000000000000000101 will return 11111111111111111111111111111010</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code jsHigh notranslate">x = 5 &amp; 1;</div>\r\nThe result in x:\r\n<div class="w3-code notranslate">1</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code jsHigh notranslate">x = 5 | 1;</div>\r\nThe result in x:\r\n<div class="w3-code notranslate">5</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code jsHigh notranslate">x = 5 &gt;&gt; 1;</div>\r\nThe result in x:\r\n<div class="w3-code notranslate">2</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code jsHigh notranslate">x = 5 &lt;&lt; 1;</div>\r\nThe result in x:\r\n<div class="w3-code notranslate">10</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code jsHigh notranslate">x = ~ 5;</div>\r\nThe result in x:\r\n<div class="w3-code notranslate">-6</div>\r\n</div>', 'JS Comparisions', '', 'publish', 'closed', 'closed', '', 'js-comparisions', '', '', '2016-05-21 15:01:47', '2016-05-21 15:01:47', '', 0, 'http://localhost/invatacel/lessons/js-comparisions/', 0, 'lp_lesson', '', 0),
(209, 1, '2016-05-21 14:52:36', '2016-05-21 14:52:36', '<p class="intro">The switch statement is used to perform different actions based on different conditions.</p>\r\n\r\n\r\n<hr />\r\n\r\n<h2>The JavaScript Switch Statement</h2>\r\nUse the switch statement to select one of many blocks of code to be executed.\r\n<h3>Syntax</h3>\r\n<div class="w3-code w3-border notranslate">\r\n<div>switch(<em>expression</em>) {\r\ncase <em>n</em>:\r\n<em>        code block\r\n</em>        break;\r\ncase <em>n</em>:\r\n<em>        code block\r\n</em>        break;\r\ndefault:\r\n<em>default code block</em>\r\n}</div>\r\n</div>\r\nThis is how it works:\r\n<ul>\r\n 	<li>The switch expression is evaluated once.</li>\r\n 	<li>The value of the expression is compared with the values of each case.</li>\r\n 	<li>If there is a match, the associated block of code is executed.</li>\r\n</ul>\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\nThe getDay() method returns the weekday as a number between 0 and 6. (Sunday=0, Monday=1, Tuesday=2 ..)\r\n\r\nUse the weekday number to calculate weekday name:\r\n<div class="w3-code notranslate jsHigh">switch (new Date().getDay()) {\r\ncase 0:\r\nday = "Sunday";\r\nbreak;\r\ncase 1:\r\nday = "Monday";\r\nbreak;\r\ncase 2:\r\nday = "Tuesday";\r\nbreak;\r\ncase 3:\r\nday = "Wednesday";\r\nbreak;\r\ncase 4:\r\nday = "Thursday";\r\nbreak;\r\ncase 5:\r\nday = "Friday";\r\nbreak;\r\ncase 6:\r\nday = "Saturday";\r\nbreak;\r\n}</div>\r\nThe result of day will be:\r\n<div class="w3-code notranslate">Saturday</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n\r\n<hr />\r\n\r\n<h2>The break Keyword</h2>\r\nWhen the JavaScript code interpreter reaches a <strong>break</strong> keyword, it breaks out of the switch block.\r\n\r\nThis will stop the execution of more code and case testing inside the block.\r\n<table class="lamp">\r\n<tbody>\r\n<tr>\r\n<th><img src="http://www.w3schools.com/images/lamp.jpg" alt="Note" /></th>\r\n<td>When a match is found, and the job is done, it''s time for a break.\r\nThere is no need for more testing.</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n\r\n<hr />\r\n\r\n<h2>The default Keyword</h2>\r\nThe <strong>default</strong> keyword specifies the code to run if there is no case match:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\nThe getDay() method returns the weekday as a number between 0 and 6.\r\n\r\nIf today is neither Saturday (6) nor Sunday (0), write a default message:\r\n<div class="w3-code notranslate jsHigh">switch (new Date().getDay()) {\r\ncase 6:\r\ntext = "Today is Saturday";\r\nbreak;\r\ncase 0:\r\ntext = "Today is Sunday";\r\nbreak;\r\ndefault:\r\ntext = "Looking forward to the Weekend";\r\n}</div>\r\nThe result of text will be:\r\n<div class="w3-code notranslate">Today is Saturday</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n\r\n<hr />\r\n\r\n<h2>Common Code and Fall-Through</h2>\r\nSometimes, in a switch block, you will want different cases to use the same code, or fall-through to a common default.\r\n\r\nNote from the next example, that cases can share the same code block, and that the default case does not have to be the last case in a switch block:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate jsHigh">switch (new Date().getDay()) {\r\ncase 1:\r\ncase 2:\r\ncase 3:\r\ndefault:\r\ntext = "Looking forward to the Weekend";\r\nbreak;\r\ncase 4:\r\ncase 5:\r\ntext = "Soon it is Weekend";\r\nbreak;\r\ncase 0:\r\ncase 6:\r\ntext = "It is Weekend";\r\n}</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n<table class="lamp">\r\n<tbody>\r\n<tr>\r\n<th><img src="http://www.w3schools.com/images/lamp.jpg" alt="Note" /></th>\r\n<td>If default is not the last case in the switch block, remember to end it with a break.</td>\r\n</tr>\r\n</tbody>\r\n</table>', 'JS Switch', '', 'publish', 'closed', 'closed', '', 'js-switch', '', '', '2016-05-21 15:03:24', '2016-05-21 15:03:24', '', 0, 'http://localhost/invatacel/lessons/js-switch/', 0, 'lp_lesson', '', 0),
(210, 1, '2016-05-21 14:52:42', '2016-05-21 14:52:42', '<p class="intro">Loops can execute a block of code a number of times.</p>\r\n\r\n\r\n<hr />\r\n\r\n<h2>JavaScript Loops</h2>\r\nLoops are handy, if you want to run the same code over and over again, each time with a different value.\r\n\r\nOften this is the case when working with arrays:\r\n<div class="w3-example">\r\n<h3>Instead of writing:</h3>\r\n<div class="w3-code notranslate jsHigh">text += cars[0] + "&lt;br&gt;";\r\ntext += cars[1] + "&lt;br&gt;";\r\ntext += cars[2] + "&lt;br&gt;";\r\ntext += cars[3] + "&lt;br&gt;";\r\ntext += cars[4] + "&lt;br&gt;";\r\ntext += cars[5] + "&lt;br&gt;";</div>\r\n<h3>You can write:</h3>\r\n<div class="w3-code notranslate jsHigh">for (i = 0; i &lt; cars.length; i++) {\r\ntext += cars[i] + "&lt;br&gt;";\r\n}</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n\r\n<hr />\r\n\r\n<h2>Different Kinds of Loops</h2>\r\nJavaScript supports different kinds of loops:\r\n<ul>\r\n 	<li><b>for </b>- loops through a block of code a number of times</li>\r\n 	<li><b><strong>for/in</strong> </b>- loops through the properties of an object</li>\r\n 	<li><b>while </b>- loops through a block of code while a specified condition is true</li>\r\n 	<li><strong>do/while</strong> - also loops through a block of code while a specified condition is true</li>\r\n</ul>\r\n\r\n<hr />\r\n\r\n<h2>The For Loop</h2>\r\nThe for loop is often the tool you will use when you want to create a loop.\r\n\r\nThe for loop has the following syntax:\r\n<div class="w3-code w3-border notranslate">\r\n<div>for (<i>statement 1</i>;<i> statement 2</i>;<i> statement 3</i>) {\r\n<i>code block to be executed</i>\r\n}</div>\r\n</div>\r\n<strong>Statement 1</strong> is executed before the loop (the code block) starts.\r\n\r\n<strong>Statement 2</strong> defines the condition for running the loop (the code block).\r\n\r\n<strong>Statement 3</strong> is executed each time after the loop (the code block) has been executed.\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate jsHigh">for (i = 0; i &lt; 5; i++) {\r\ntext += "The number is " + i + "&lt;br&gt;";\r\n}</div>\r\n</div>\r\n<div class="w3-example"></div>\r\nFrom the example above, you can read:\r\n\r\nStatement 1 sets a variable before the loop starts (var i = 0).\r\n\r\nStatement 2 defines the condition for the loop to run (i must be less than 5).\r\n\r\nStatement 3 increases a value (i++) each time the code block in the loop has been executed.\r\n\r\n<hr />\r\n\r\n<h2>Statement 1</h2>\r\nNormally you will use statement 1 to initiate the variable used in the loop (i = 0).\r\n\r\nThis is not always the case, JavaScript doesn''t care. Statement 1 is optional.\r\n\r\nYou can initiate many values in statement 1 (separated by comma):\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate jsHigh">for (i = 0, len = cars.length, text = ""; i &lt; len; i++) {\r\ntext += cars[i] + "&lt;br&gt;";\r\n}</div>\r\n</div>\r\n<div class="w3-example"></div>\r\nAnd you can omit statement 1 (like when your values are set before the loop starts):\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate jsHigh">var i = 2;\r\nvar len = cars.length;\r\nvar text = "";\r\nfor (; i &lt; len; i++) {\r\ntext += cars[i] + "&lt;br&gt;";\r\n}</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n\r\n<hr />\r\n\r\n<h2>Statement 2</h2>\r\nOften statement 2 is used to evaluate the condition of the initial variable.\r\n\r\nThis is not always the case, JavaScript doesn''t care. Statement 2 is also optional.\r\n\r\nIf statement 2 returns true, the loop will start over again, if it returns false, the loop will end.\r\n<table class="lamp">\r\n<tbody>\r\n<tr>\r\n<th><img src="http://www.w3schools.com/images/lamp.jpg" alt="Note" /></th>\r\n<td>If you omit statement 2, you must provide a <strong>break</strong> inside the loop. Otherwise the loop will never end. This will crash your browser. Read about breaks in a later chapter of this tutorial.</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n\r\n<hr />\r\n\r\n<h2>Statement 3</h2>\r\nOften statement 3 increases the initial variable.\r\n\r\nThis is not always the case, JavaScript doesn''t care, and statement 3 is optional.\r\n\r\nStatement 3 can do anything like negative increment (i--), positive increment (i = i + 15), or anything else.\r\n\r\nStatement 3 can also be omitted (like when you increment your values inside the loop):\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate jsHigh">var i = 0;\r\nvar len = cars.length;\r\nfor (; i &lt; len; ) {\r\ntext += cars[i] + "&lt;br&gt;";\r\ni++;\r\n}</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n\r\n<hr />\r\n\r\n<h2>The For/In Loop</h2>\r\nThe JavaScript for/in statement loops through the properties of an object:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate jsHigh">var person = {fname:"John", lname:"Doe", age:25};\r\n\r\nvar text = "";\r\nvar x;\r\nfor (x in person) {\r\ntext += person[x];\r\n}</div>\r\n</div>', 'JS Loop For', '', 'publish', 'closed', 'closed', '', 'js-loop-for', '', '', '2016-05-21 15:03:46', '2016-05-21 15:03:46', '', 0, 'http://localhost/invatacel/lessons/js-loop-for/', 0, 'lp_lesson', '', 0),
(211, 1, '2016-05-21 14:52:49', '2016-05-21 14:52:49', '<p class="intro">Loops can execute a block of code as long as a specified condition is true.</p>\r\n\r\n\r\n<hr />\r\n\r\n<h2>The While Loop</h2>\r\nThe while loop loops through a block of code as long as a specified condition is true.\r\n<h3>Syntax</h3>\r\n<div class="w3-code w3-border notranslate">\r\n<div>while (<em>condition</em>) {\r\n<i>    code block to be executed</i>\r\n}</div>\r\n</div>\r\n<h3>Example</h3>\r\nIn the following example, the code in the loop will run, over and over again, as long as a variable (i) is less than 10:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate jsHigh">while (i &lt; 10) {\r\ntext += "The number is " + i;\r\ni++;\r\n}</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n<table class="lamp">\r\n<tbody>\r\n<tr>\r\n<th><img src="http://www.w3schools.com/images/lamp.jpg" alt="Note" /></th>\r\n<td>If you forget to increase the variable used in the condition, the loop will never end. This will crash your browser.</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n\r\n<hr />\r\n\r\n<h2>The Do/While Loop</h2>\r\nThe do/while loop is a variant of the while loop. This loop will execute the code block once, before checking if the condition is true, then it will repeat the loop as long as the condition is true.\r\n<h3>Syntax</h3>\r\n<div class="w3-code w3-border notranslate">\r\n<div>do {\r\n<i>    code block to be executed\r\n</i>}\r\nwhile (<em>condition</em>);</div>\r\n</div>\r\n<h3>Example</h3>\r\nThe example below uses a do/while loop. The loop will always be executed at least once, even if the condition is false, because the code block is executed before the condition is tested:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate jsHigh">do {\r\ntext += "The number is " + i;\r\ni++;\r\n}\r\nwhile (i &lt; 10);</div>\r\n</div>\r\n<div class="w3-example"></div>\r\nDo not forget to increase the variable used in the condition, otherwise the loop will never end!\r\n\r\n<hr />\r\n\r\n<h2>Comparing For and While</h2>\r\nIf you have read the previous chapter, about the for loop, you will discover that a while loop is much the same as a for loop, with statement 1 and statement 3 omitted.\r\n\r\nThe loop in this example uses a <strong>for loop</strong> to collect the car names from the cars array:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate jsHigh">var cars = ["BMW", "Volvo", "Saab", "Ford"];\r\nvar i = 0;\r\nvar text = "";\r\n\r\nfor (;cars[i];) {\r\ntext += cars[i] + "&lt;br&gt;";\r\ni++;\r\n}</div>\r\n</div>\r\n<div class="w3-example"></div>\r\nThe loop in this example uses a <strong>while loop</strong> to collect the car names from the cars array:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate jsHigh">var cars = ["BMW", "Volvo", "Saab", "Ford"];\r\nvar i = 0;\r\nvar text = "";\r\n\r\nwhile (cars[i]) {\r\ntext += cars[i] + "&lt;br&gt;";\r\ni++;\r\n}</div>\r\n</div>', 'JS Loop While', '', 'publish', 'closed', 'closed', '', 'js-loop-while', '', '', '2016-05-21 15:04:06', '2016-05-21 15:04:06', '', 0, 'http://localhost/invatacel/lessons/js-loop-while/', 0, 'lp_lesson', '', 0),
(212, 1, '2016-05-21 14:53:58', '2016-05-21 14:53:58', '<p class="intro">JavaScript can be placed in the &lt;body&gt; and the &lt;head&gt; sections of an HTML page.</p>\r\n\r\n\r\n<hr />\r\n\r\n<h2>The &lt;script&gt; Tag</h2>\r\nIn HTML, JavaScript code must be inserted between &lt;script&gt; and &lt;/script&gt; tags.\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate htmlHigh">&lt;script&gt;\r\ndocument.getElementById("demo").innerHTML = "My First JavaScript";\r\n&lt;/script&gt;</div>\r\n</div>\r\n<table class="lamp">\r\n<tbody>\r\n<tr>\r\n<th><img src="http://www.w3schools.com/images/lamp.jpg" alt="Note" /></th>\r\n<td>Older examples may use a type attribute: &lt;script type="text/javascript"&gt;.\r\nThe type attribute is not required. JavaScript is the default scripting language in HTML.</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n\r\n<hr />\r\n\r\n<h2>JavaScript Functions and Events</h2>\r\nA JavaScript <strong>function</strong> is a block of JavaScript code, that can be executed when "asked" for.\r\n\r\nFor example, a function can be executed when an <b>event</b> occurs, like when the user clicks a button.\r\n\r\nYou will learn much more about functions and events in later chapters.\r\n\r\n<hr />\r\n\r\n<h2>JavaScript in &lt;head&gt; or &lt;body&gt;</h2>\r\nYou can place any number of scripts in an HTML document.\r\n\r\nScripts can be placed in the &lt;body&gt;, or in the &lt;head&gt; section of an HTML page, or in both.\r\n<table class="lamp">\r\n<tbody>\r\n<tr>\r\n<th><img src="http://www.w3schools.com/images/lamp.jpg" alt="Note" /></th>\r\n<td>Keeping all code in one place, is always a good habit.</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n\r\n<hr />\r\n\r\n<h2>JavaScript in &lt;head&gt;</h2>\r\nIn this example, a JavaScript function is placed in the &lt;head&gt; section of an HTML page.\r\n\r\nThe function is invoked (called) when a button is clicked:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate htmlHigh">&lt;!DOCTYPE html&gt;\r\n&lt;html&gt;&lt;head&gt;\r\n&lt;script&gt;\r\nfunction myFunction() {\r\ndocument.getElementById("demo").innerHTML = "Paragraph changed.";\r\n}\r\n&lt;/script&gt;\r\n&lt;/head&gt;\r\n\r\n&lt;body&gt;\r\n\r\n&lt;h1&gt;My Web Page&lt;/h1&gt;\r\n\r\n&lt;p id="demo"&gt;A Paragraph&lt;/p&gt;\r\n\r\n&lt;button type="button" onclick="myFunction()"&gt;Try it&lt;/button&gt;\r\n\r\n&lt;/body&gt;\r\n&lt;/html&gt;\r\n\r\n</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n\r\n<hr />\r\n\r\n<h2>JavaScript in &lt;body&gt;</h2>\r\nIn this example, a JavaScript function is placed in the &lt;body&gt; section of an HTML page.\r\n\r\nThe function is invoked (called) when a button is clicked:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate htmlHigh">&lt;!DOCTYPE html&gt;\r\n&lt;html&gt;\r\n&lt;body&gt;\r\n\r\n&lt;h1&gt;My Web Page&lt;/h1&gt;\r\n\r\n&lt;p id="demo"&gt;A Paragraph&lt;/p&gt;\r\n\r\n&lt;button type="button" onclick="myFunction()"&gt;Try it&lt;/button&gt;\r\n\r\n&lt;script&gt;\r\nfunction myFunction() {\r\ndocument.getElementById("demo").innerHTML = "Paragraph changed.";\r\n}\r\n&lt;/script&gt;\r\n\r\n&lt;/body&gt;\r\n&lt;/html&gt;</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n<table class="lamp">\r\n<tbody>\r\n<tr>\r\n<th><img src="http://www.w3schools.com/images/lamp.jpg" alt="Note" /></th>\r\n<td>It is a good idea to place scripts at the bottom of the &lt;body&gt; element.\r\nThis can improve page load, because script compilation can slow down the display.</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n\r\n<hr />\r\n\r\n<h2>External JavaScript</h2>\r\nScripts can also be placed in external files:\r\n<div class="w3-example">\r\n<h3>myScript.js</h3>\r\n<div class="w3-code notranslate jsHigh">function myFunction() {\r\ndocument.getElementById("demo").innerHTML = "Paragraph changed.";\r\n}</div>\r\n</div>\r\nExternal scripts are practical when the same code is used in many different web pages.\r\n\r\nJavaScript files have the file extension<strong> .js</strong>.\r\n\r\nTo use an external script, put the name of the script file in the src (source) attribute of a &lt;script&gt; tag:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate htmlHigh">&lt;!DOCTYPE html&gt;\r\n&lt;html&gt;\r\n&lt;body&gt;\r\n&lt;script src="myScript.js"&gt;&lt;/script&gt;\r\n&lt;/body&gt;\r\n&lt;/html&gt;</div>\r\n</div>\r\n<div class="w3-example"></div>\r\nYou can place an external script reference in &lt;head&gt; or &lt;body&gt; as you like.\r\n\r\nThe script will behave as if it was located exactly where the &lt;script&gt; tag is located.\r\n<table class="lamp">\r\n<tbody>\r\n<tr>\r\n<th><img src="http://www.w3schools.com/images/lamp.jpg" alt="Note" /></th>\r\n<td>External scripts cannot contain &lt;script&gt; tags.</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n\r\n<hr />\r\n\r\n<h2>External JavaScript Advantages</h2>\r\nPlacing JavaScripts in external files has some advantages:\r\n<ul>\r\n 	<li>It separates HTML and code</li>\r\n 	<li>It makes HTML and JavaScript easier to read and maintain</li>\r\n 	<li>Cached JavaScript files can speed up page loads</li>\r\n</ul>', 'JS Where To', '', 'inherit', 'closed', 'closed', '', '191-revision-v1', '', '', '2016-05-21 14:53:58', '2016-05-21 14:53:58', '', 191, 'http://localhost/invatacel/2016/05/21/191-revision-v1/', 0, 'revision', '', 0),
(213, 1, '2016-05-21 14:54:13', '2016-05-21 14:54:13', '<p class="intro">JavaScript can be placed in the &lt;body&gt; and the &lt;head&gt; sections of an HTML page.</p>\r\n\r\n\r\n<hr />\r\n\r\n<h2>The &lt;script&gt; Tag</h2>\r\nIn HTML, JavaScript code must be inserted between &lt;script&gt; and &lt;/script&gt; tags.\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate htmlHigh">&lt;script&gt;\r\ndocument.getElementById("demo").innerHTML = "My First JavaScript";\r\n&lt;/script&gt;</div>\r\n</div>\r\n<table class="lamp">\r\n<tbody>\r\n<tr>\r\n<th><img src="http://www.w3schools.com/images/lamp.jpg" alt="Note" /></th>\r\n<td>Older examples may use a type attribute: &lt;script type="text/javascript"&gt;.\r\nThe type attribute is not required. JavaScript is the default scripting language in HTML.</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n\r\n<hr />\r\n\r\n<h2>JavaScript Functions and Events</h2>\r\nA JavaScript <strong>function</strong> is a block of JavaScript code, that can be executed when "asked" for.\r\n\r\nFor example, a function can be executed when an <b>event</b> occurs, like when the user clicks a button.\r\n\r\nYou will learn much more about functions and events in later chapters.\r\n\r\n<hr />\r\n\r\n<h2>JavaScript in &lt;head&gt; or &lt;body&gt;</h2>\r\nYou can place any number of scripts in an HTML document.\r\n\r\nScripts can be placed in the &lt;body&gt;, or in the &lt;head&gt; section of an HTML page, or in both.\r\n<table class="lamp">\r\n<tbody>\r\n<tr>\r\n<th><img src="http://www.w3schools.com/images/lamp.jpg" alt="Note" /></th>\r\n<td>Keeping all code in one place, is always a good habit.</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n\r\n<hr />\r\n\r\n<h2>JavaScript in &lt;head&gt;</h2>\r\nIn this example, a JavaScript function is placed in the &lt;head&gt; section of an HTML page.\r\n\r\nThe function is invoked (called) when a button is clicked:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate htmlHigh">&lt;!DOCTYPE html&gt;\r\n&lt;html&gt;&lt;head&gt;\r\n&lt;script&gt;\r\nfunction myFunction() {\r\ndocument.getElementById("demo").innerHTML = "Paragraph changed.";\r\n}\r\n&lt;/script&gt;\r\n&lt;/head&gt;&lt;body&gt;\r\n\r\n&lt;h1&gt;My Web Page&lt;/h1&gt;\r\n\r\n&lt;p id="demo"&gt;A Paragraph&lt;/p&gt;\r\n\r\n&lt;button type="button" onclick="myFunction()"&gt;Try it&lt;/button&gt;\r\n\r\n&lt;/body&gt;\r\n&lt;/html&gt;\r\n\r\n</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n\r\n<hr />\r\n\r\n<h2>JavaScript in &lt;body&gt;</h2>\r\nIn this example, a JavaScript function is placed in the &lt;body&gt; section of an HTML page.\r\n\r\nThe function is invoked (called) when a button is clicked:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate htmlHigh">&lt;!DOCTYPE html&gt;\r\n&lt;html&gt;\r\n&lt;body&gt;&lt;h1&gt;My Web Page&lt;/h1&gt;\r\n\r\n&lt;p id="demo"&gt;A Paragraph&lt;/p&gt;\r\n\r\n&lt;button type="button" onclick="myFunction()"&gt;Try it&lt;/button&gt;\r\n\r\n&lt;script&gt;\r\nfunction myFunction() {\r\ndocument.getElementById("demo").innerHTML = "Paragraph changed.";\r\n}\r\n&lt;/script&gt;\r\n\r\n&lt;/body&gt;\r\n&lt;/html&gt;\r\n\r\n</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n<table class="lamp">\r\n<tbody>\r\n<tr>\r\n<th><img src="http://www.w3schools.com/images/lamp.jpg" alt="Note" /></th>\r\n<td>It is a good idea to place scripts at the bottom of the &lt;body&gt; element.\r\nThis can improve page load, because script compilation can slow down the display.</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n\r\n<hr />\r\n\r\n<h2>External JavaScript</h2>\r\nScripts can also be placed in external files:\r\n<div class="w3-example">\r\n<h3>myScript.js</h3>\r\n<div class="w3-code notranslate jsHigh">function myFunction() {\r\ndocument.getElementById("demo").innerHTML = "Paragraph changed.";\r\n}</div>\r\n</div>\r\nExternal scripts are practical when the same code is used in many different web pages.\r\n\r\nJavaScript files have the file extension<strong> .js</strong>.\r\n\r\nTo use an external script, put the name of the script file in the src (source) attribute of a &lt;script&gt; tag:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate htmlHigh">&lt;!DOCTYPE html&gt;\r\n&lt;html&gt;\r\n&lt;body&gt;\r\n&lt;script src="myScript.js"&gt;&lt;/script&gt;\r\n&lt;/body&gt;\r\n&lt;/html&gt;</div>\r\n</div>\r\n<div class="w3-example"></div>\r\nYou can place an external script reference in &lt;head&gt; or &lt;body&gt; as you like.\r\n\r\nThe script will behave as if it was located exactly where the &lt;script&gt; tag is located.\r\n<table class="lamp">\r\n<tbody>\r\n<tr>\r\n<th><img src="http://www.w3schools.com/images/lamp.jpg" alt="Note" /></th>\r\n<td>External scripts cannot contain &lt;script&gt; tags.</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n\r\n<hr />\r\n\r\n<h2>External JavaScript Advantages</h2>\r\nPlacing JavaScripts in external files has some advantages:\r\n<ul>\r\n 	<li>It separates HTML and code</li>\r\n 	<li>It makes HTML and JavaScript easier to read and maintain</li>\r\n 	<li>Cached JavaScript files can speed up page loads</li>\r\n</ul>', 'JS Where To', '', 'inherit', 'closed', 'closed', '', '191-revision-v1', '', '', '2016-05-21 14:54:13', '2016-05-21 14:54:13', '', 191, 'http://localhost/invatacel/2016/05/21/191-revision-v1/', 0, 'revision', '', 0);
INSERT INTO `wp_posts` (`ID`, `post_author`, `post_date`, `post_date_gmt`, `post_content`, `post_title`, `post_excerpt`, `post_status`, `comment_status`, `ping_status`, `post_password`, `post_name`, `to_ping`, `pinged`, `post_modified`, `post_modified_gmt`, `post_content_filtered`, `post_parent`, `guid`, `menu_order`, `post_type`, `post_mime_type`, `comment_count`) VALUES
(214, 1, '2016-05-21 14:54:21', '2016-05-21 14:54:21', '<p class="intro">JavaScript does NOT have any built-in print or display functions.</p>\r\n\r\n\r\n<hr />\r\n\r\n<h2>JavaScript Display Possibilities</h2>\r\nJavaScript can "display" data in different ways:\r\n<ul>\r\n 	<li>Writing into an alert box, using <strong>window.alert()</strong>.</li>\r\n 	<li>Writing into the HTML output using <strong>document.write()</strong>.</li>\r\n 	<li>Writing into an HTML element, using <strong>innerHTML</strong>.</li>\r\n 	<li>Writing into the browser console, using <strong>console.log()</strong>.</li>\r\n</ul>\r\n\r\n<hr />\r\n\r\n<h2>Using window.alert()</h2>\r\nYou can use an alert box to display data:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate htmlHigh">&lt;!DOCTYPE html&gt;\r\n&lt;html&gt;\r\n&lt;body&gt;\r\n\r\n&lt;h1&gt;My First Web Page&lt;/h1&gt;\r\n&lt;p&gt;My first paragraph.&lt;/p&gt;\r\n\r\n&lt;script&gt;\r\nwindow.alert(5 + 6);\r\n&lt;/script&gt;\r\n\r\n&lt;/body&gt;\r\n&lt;/html&gt;</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n\r\n<hr />\r\n\r\n<h2>Using document.write()</h2>\r\nFor testing purposes, it is convenient to use <strong>document.write()</strong>:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate htmlHigh">&lt;!DOCTYPE html&gt;\r\n&lt;html&gt;\r\n&lt;body&gt;\r\n\r\n&lt;h1&gt;My First Web Page&lt;/h1&gt;\r\n&lt;p&gt;My first paragraph.&lt;/p&gt;\r\n\r\n&lt;script&gt;\r\ndocument.write(5 + 6);\r\n&lt;/script&gt;\r\n\r\n&lt;/body&gt;\r\n&lt;/html&gt;</div>\r\n</div>\r\n<div class="w3-example"></div>\r\nUsing document.write() after an HTML document is fully loaded, will <strong>delete all existing HTML</strong>:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate htmlHigh">&lt;!DOCTYPE html&gt;\r\n&lt;html&gt;\r\n&lt;body&gt;\r\n\r\n&lt;h1&gt;My First Web Page&lt;/h1&gt;\r\n&lt;p&gt;My first paragraph.&lt;/p&gt;\r\n\r\n&lt;button onclick="document.write(5 + 6)"&gt;Try it&lt;/button&gt;\r\n\r\n&lt;/body&gt;\r\n&lt;/html&gt;</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n<table class="lamp">\r\n<tbody>\r\n<tr>\r\n<th><img src="http://www.w3schools.com/images/lamp.jpg" alt="Note" /></th>\r\n<td>The document.write() method should be used only for testing.</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n\r\n<hr />\r\n\r\n<h2>Using innerHTML</h2>\r\nTo access an HTML element, JavaScript can use the <strong>document.getElementById(id)</strong> method.\r\n\r\nThe <strong>id</strong> attribute defines the HTML element. The <strong>innerHTML</strong> property defines the HTML content:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate htmlHigh">&lt;!DOCTYPE html&gt;\r\n&lt;html&gt;\r\n&lt;body&gt;\r\n\r\n&lt;h1&gt;My First Web Page&lt;/h1&gt;\r\n&lt;p&gt;My First Paragraph&lt;/p&gt;\r\n\r\n&lt;p id="demo"&gt;&lt;/p&gt;\r\n\r\n&lt;script&gt;\r\ndocument.getElementById("demo").innerHTML = 5 + 6;\r\n&lt;/script&gt;\r\n\r\n&lt;/body&gt;\r\n&lt;/html&gt;</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n<table class="lamp">\r\n<tbody>\r\n<tr>\r\n<th><img src="http://www.w3schools.com/images/lamp.jpg" alt="Note" /></th>\r\n<td>To "display data" in HTML, (in most cases) you will set the value of an innerHTML property.</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n\r\n<hr />\r\n\r\n<h2>Using console.log()</h2>\r\nIn your browser, you can use the <strong>console.log()</strong> method to display data.\r\n\r\nActivate the browser console with F12, and select "Console" in the menu.\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate htmlHigh">&lt;!DOCTYPE html&gt;\r\n&lt;html&gt;\r\n&lt;body&gt;\r\n\r\n&lt;h1&gt;My First Web Page&lt;/h1&gt;\r\n&lt;p&gt;My first paragraph.&lt;/p&gt;\r\n\r\n&lt;script&gt;\r\nconsole.log(5 + 6);\r\n&lt;/script&gt;\r\n\r\n&lt;/body&gt;\r\n&lt;/html&gt;</div>\r\n</div>', 'JS Output', '', 'inherit', 'closed', 'closed', '', '192-revision-v1', '', '', '2016-05-21 14:54:21', '2016-05-21 14:54:21', '', 192, 'http://localhost/invatacel/2016/05/21/192-revision-v1/', 0, 'revision', '', 0),
(215, 1, '2016-05-21 14:54:46', '2016-05-21 14:54:46', '<p class="intro">JavaScript <strong>syntax</strong> is the set of rules, how JavaScript programs are constructed.</p>\r\n\r\n\r\n<hr />\r\n\r\n<h2>JavaScript Programs</h2>\r\nA <strong>computer program</strong> is a list of "instructions" to be "executed" by the computer.\r\n\r\nIn a programming language, these program instructions are called <strong>statements</strong>.\r\n\r\nJavaScript is a <strong>programming language</strong>.\r\n\r\nJavaScript statements are separated by <strong>semicolons</strong>.\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate jsHigh">var x = 5;\r\nvar y = 6;\r\nvar z = x + y;</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n<table class="lamp">\r\n<tbody>\r\n<tr>\r\n<th><img src="http://www.w3schools.com/images/lamp.jpg" alt="Note" /></th>\r\n<td>In HTML, JavaScript programs can be executed by the web browser.</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n\r\n<hr />\r\n\r\n<h2>JavaScript Statements</h2>\r\nJavaScript statements are composed of:\r\n\r\nValues, Operators, Expressions, Keywords, and Comments.\r\n\r\n<hr />\r\n\r\n<h2>JavaScript Values</h2>\r\nThe JavaScript syntax defines two types of values: Fixed values and variable values.\r\n\r\nFixed values are called <strong>literals</strong>. Variable values are called <strong>variables</strong>.\r\n\r\n<hr />\r\n\r\n<h2>JavaScript Literals</h2>\r\nThe most important rules for writing fixed values are:\r\n\r\n<strong>Numbers</strong> are written with or without decimals:\r\n<div class="w3-example">\r\n<div class="w3-code notranslate jsHigh">10.50\r\n\r\n1001</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n<strong>Strings</strong> are text, written within double or single quotes:\r\n<div class="w3-example">\r\n<div class="w3-code notranslate jsHigh">"John Doe"\r\n\r\n''John Doe''</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n\r\n<hr />\r\n\r\n<h2>JavaScript Variables</h2>\r\nIn a programming language, <strong>variables</strong> are used to <strong>store</strong> data values.\r\n\r\nJavaScript uses the <strong>var </strong> keyword to <strong>declare</strong> variables.\r\n\r\nAn <strong>equal sign</strong> is used to <strong>assign values</strong> to variables.\r\n\r\nIn this example, x is defined as a variable. Then, x is assigned (given) the value 6:\r\n<div class="w3-example">\r\n<div class="w3-code notranslate jsHigh">var x;\r\n\r\nx = 6;</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n\r\n<hr />\r\n\r\n<h2>JavaScript Operators</h2>\r\nJavaScript uses an <strong>assignment operator</strong> ( = ) to <strong>assign</strong> values to variables:\r\n<div class="w3-example">\r\n<div class="w3-code notranslate jsHigh">var x = 5;\r\nvar y = 6;</div>\r\n</div>\r\n<div class="w3-example"></div>\r\nJavaScript uses <strong>arithmetic operators</strong> ( + - *  / ) to <strong>compute</strong> values:\r\n<div class="w3-example">\r\n<div class="w3-code notranslate jsHigh">(5 + 6) * 10</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n\r\n<hr />\r\n\r\n<h2>JavaScript Expressions</h2>\r\nAn expression is a combination of values, variables, and operators, which computes to a value.\r\n\r\nThe computation is called an evaluation.\r\n\r\nFor example, 5 * 10 evaluates to 50:\r\n<div class="w3-example">\r\n<div class="w3-code notranslate jsHigh">5 * 10</div>\r\n</div>\r\n<div class="w3-example"></div>\r\nExpressions can also contain variable values:\r\n<div class="w3-example">\r\n<div class="w3-code notranslate jsHigh">x * 10</div>\r\n</div>\r\n<div class="w3-example"></div>\r\nThe values can be of various types, such as numbers and strings.\r\n\r\nFor example, "John" + " " + "Doe", evaluates to "John Doe":\r\n<div class="w3-example">\r\n<div class="w3-code notranslate jsHigh">"John" + " " + "Doe"</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n\r\n<hr />\r\n\r\n<h2>JavaScript Keywords</h2>\r\nJavaScript <strong>keywords</strong> are used to identify actions to be performed.\r\n\r\nThe <strong>var</strong> keyword tells the browser to create a new variable:\r\n<div class="w3-example">\r\n<div class="w3-code notranslate jsHigh">var x = 5 + 6;\r\nvar y = x * 10;</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n\r\n<hr />\r\n\r\n<h2>JavaScript Comments</h2>\r\nNot all JavaScript statements are "executed".\r\n\r\nCode after double slashes <strong>//</strong> or between <strong>/*</strong> and <strong>*/</strong> is treated as a <strong>comment</strong>.\r\n\r\nComments are ignored, and will not be executed:\r\n<div class="w3-example">\r\n<div class="w3-code notranslate jsHigh">var x = 5;   // I will be executed\r\n\r\n// var x = 6;   I will NOT be executed</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n\r\n<hr />\r\n\r\n<h2>JavaScript Identifiers</h2>\r\nIdentifiers are names.\r\n\r\nIn JavaScript, identifiers are used to name variables (and keywords, and functions, and labels).\r\n\r\nThe rules for legal names are much the same in most programming languages.\r\n\r\nIn JavaScript, the first character must be a letter, an underscore (_), or a dollar sign ($).\r\n\r\nSubsequent characters may be letters, digits, underscores, or dollar signs.\r\n<table class="lamp">\r\n<tbody>\r\n<tr>\r\n<th><img src="http://www.w3schools.com/images/lamp.jpg" alt="Note" /></th>\r\n<td>Numbers are not allowed as the first character.\r\nThis way JavaScript can easily distinguish identifiers from numbers.</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n\r\n<hr />\r\n\r\n<h2>JavaScript is Case Sensitive</h2>\r\nAll JavaScript identifiers are <strong>case sensitive</strong>.\r\n\r\nThe variables <strong>lastName</strong> and <strong>lastname</strong>, are two different variables.\r\n<div class="w3-example">\r\n<div class="w3-code notranslate jsHigh">lastName = "Doe";\r\nlastname = "Peterson";</div>\r\n</div>\r\n<div class="w3-example"></div>\r\nJavaScript does not interpret <strong>VAR</strong> or <strong>Var</strong> as the keyword <strong>var</strong>.\r\n\r\n<hr />\r\n\r\n<h2>JavaScript and Camel Case</h2>\r\nHistorically, programmers have used three ways of joining multiple words into one variable name:\r\n\r\n<strong>Hyphens:</strong>\r\n\r\nfirst-name, last-name, master-card, inter-city.\r\n\r\n<strong>Underscore:</strong>\r\n\r\nfirst_name, last_name, master_card, inter_city.\r\n\r\n<strong>Camel Case:</strong>\r\n\r\nFirstName, LastName, MasterCard, InterCity.\r\n\r\n<img src="http://www.w3schools.com/js/pic_camelcase.jpg" alt="camelCase" />\r\n\r\nIn programming languages, especially in JavaScript, camel case often starts with a lowercase letter:\r\n\r\nfirstName, lastName, masterCard, interCity.\r\n<table class="lamp">\r\n<tbody>\r\n<tr>\r\n<th><img src="http://www.w3schools.com/images/lamp.jpg" alt="Note" /></th>\r\n<td>Hyphens are not allowed in JavaScript. It is reserved for subtractions.</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n\r\n<hr />\r\n\r\n<h2>JavaScript Character Set</h2>\r\nJavaScript uses the <strong>Unicode</strong> character set.\r\n\r\nUnicode covers (almost) all the characters, punctuations, and symbols in the world.\r\n\r\nFor a closer look, please study our <a href="http://www.w3schools.com/charsets/ref_html_utf8.asp">Complete Unicode Reference</a>.', 'JS Syntax', '', 'inherit', 'closed', 'closed', '', '193-revision-v1', '', '', '2016-05-21 14:54:46', '2016-05-21 14:54:46', '', 193, 'http://localhost/invatacel/2016/05/21/193-revision-v1/', 0, 'revision', '', 0),
(216, 1, '2016-05-21 14:55:05', '2016-05-21 14:55:05', 'In HTML, JavaScript statements are "instructions" to be "executed" by the web browser.\r\n\r\n<hr />\r\n\r\n<h2>JavaScript Statements</h2>\r\nThis statement tells the browser to write "Hello Dolly." inside an HTML element with id="demo":\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate jsHigh">document.getElementById("demo").innerHTML = "Hello Dolly.";</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n\r\n<hr />\r\n\r\n<h2>JavaScript Programs</h2>\r\nMost JavaScript programs contain many JavaScript statements.\r\n\r\nThe statements are executed, one by one, in the same order as they are written.\r\n\r\nIn this example x, y, and z are given values, and finally z is displayed:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate jsHigh">var x = 5;\r\nvar y = 6;\r\nvar z = x + y;\r\ndocument.getElementById("demo").innerHTML = z;</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n<table class="lamp">\r\n<tbody>\r\n<tr>\r\n<th><img src="http://www.w3schools.com/images/lamp.jpg" alt="Note" /></th>\r\n<td>JavaScript programs (and JavaScript statements) are often called JavaScript code.</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n\r\n<hr />\r\n\r\n<h2>Semicolons ;</h2>\r\nSemicolons separate JavaScript statements.\r\n\r\nAdd a semicolon at the end of each executable statement:\r\n<div class="w3-example">\r\n<div class="w3-code notranslate jsHigh">a = 5;\r\nb = 6;\r\nc = a + b;</div>\r\n</div>\r\n<div class="w3-example"></div>\r\nWhen separated by semicolons, multiple statements on one line are allowed:\r\n<div class="w3-example">\r\n<div class="w3-code notranslate jsHigh">a = 5; b = 6; c = a + b;</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n<table class="lamp">\r\n<tbody>\r\n<tr>\r\n<th><img src="http://www.w3schools.com/images/lamp.jpg" alt="Note" /></th>\r\n<td>On the web, you might see examples without semicolons.\r\nEnding statements with semicolon is not required, but highly recommended.</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n\r\n<hr />\r\n\r\n<h2>JavaScript White Space</h2>\r\nJavaScript ignores multiple spaces. You can add white space to your script to make it more readable.\r\n\r\nThe following lines are equivalent:\r\n<div class="w3-example">\r\n<div class="w3-code notranslate jsHigh">var person = "Hege";\r\nvar person="Hege";</div>\r\n</div>\r\nA good practice is to put spaces around operators ( = + - * / ):\r\n<div class="w3-example">\r\n<div class="w3-code notranslate jsHigh">var x = y + z;</div>\r\n</div>\r\n\r\n<hr />\r\n\r\n<h2>JavaScript Line Length and Line Breaks</h2>\r\nFor best readability, programmers often like to avoid code lines longer than 80 characters.\r\n\r\nIf a JavaScript statement does not fit on one line, the best place to break it, is after an operator:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate jsHigh">document.getElementById("demo").innerHTML =\r\n"Hello Dolly.";</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n\r\n<hr />\r\n\r\n<h2>JavaScript Code Blocks</h2>\r\nJavaScript statements can be grouped together in code blocks, inside curly brackets {...}.\r\n\r\nThe purpose of code blocks is to define statements to be executed together.\r\n\r\nOne place you will find statements grouped together in blocks, are in JavaScript functions:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate jsHigh">function myFunction() {\r\ndocument.getElementById("demo").innerHTML = "Hello Dolly.";\r\ndocument.getElementById("myDIV").innerHTML = "How are you?";\r\n}</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n<table class="lamp">\r\n<tbody>\r\n<tr>\r\n<th><img src="http://www.w3schools.com/images/lamp.jpg" alt="Note" /></th>\r\n<td>In this tutorial we use 4 spaces of indentation for code blocks.\r\nYou will learn more about functions later in this tutorial.</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n\r\n<hr />\r\n\r\n<h2>JavaScript Keywords</h2>\r\nJavaScript statements often start with a <strong>keyword</strong> to identify the JavaScript action to be performed.\r\n\r\nHere is a list of some of the keywords you will learn about in this tutorial:\r\n<table class="w3-table-all">\r\n<tbody>\r\n<tr>\r\n<th>Keyword</th>\r\n<th>Description</th>\r\n</tr>\r\n<tr>\r\n<td>break</td>\r\n<td>Terminates a switch or a loop</td>\r\n</tr>\r\n<tr>\r\n<td>continue</td>\r\n<td>Jumps out of a loop and starts at the top</td>\r\n</tr>\r\n<tr>\r\n<td>debugger</td>\r\n<td>Stops the execution of JavaScript, and calls (if available) the debugging function</td>\r\n</tr>\r\n<tr>\r\n<td>do ... while</td>\r\n<td>Executes a block of statements, and repeats the block, while a condition is true</td>\r\n</tr>\r\n<tr>\r\n<td>for</td>\r\n<td>Marks a block of statements to be executed, as long as a condition is true</td>\r\n</tr>\r\n<tr>\r\n<td>function</td>\r\n<td>Declares a function</td>\r\n</tr>\r\n<tr>\r\n<td>if ... else</td>\r\n<td>Marks a block of statements to be executed, depending on a condition</td>\r\n</tr>\r\n<tr>\r\n<td>return</td>\r\n<td>Exits a function</td>\r\n</tr>\r\n<tr>\r\n<td>switch</td>\r\n<td>Marks a block of statements to be executed, depending on different cases</td>\r\n</tr>\r\n<tr>\r\n<td>try ... catch</td>\r\n<td>Implements error handling to a block of statements</td>\r\n</tr>\r\n<tr>\r\n<td>var</td>\r\n<td>Declares a variable</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n<table class="lamp">\r\n<tbody>\r\n<tr>\r\n<th><img src="http://www.w3schools.com/images/lamp.jpg" alt="Note" /></th>\r\n<td>JavaScript keywords are reserved words. Reserved words cannot be used as names for variables.</td>\r\n</tr>\r\n</tbody>\r\n</table>', 'JS Statements', '', 'inherit', 'closed', 'closed', '', '194-revision-v1', '', '', '2016-05-21 14:55:05', '2016-05-21 14:55:05', '', 194, 'http://localhost/invatacel/2016/05/21/194-revision-v1/', 0, 'revision', '', 0),
(217, 1, '2016-05-21 14:55:23', '2016-05-21 14:55:23', '<p class="intro">JavaScript comments can be used to explain JavaScript code, and to make it more readable.</p>\r\n<p class="intro">JavaScript comments can also be used to prevent execution, when testing alternative code.</p>\r\n\r\n\r\n<hr />\r\n\r\n<h2>Single Line Comments</h2>\r\nSingle line comments start with //.\r\n\r\nAny text between // and the end of the line, will be ignored by JavaScript (will not be executed).\r\n\r\nThis example uses a single line comment before each line, to explain the code:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate jsHigh">// Change heading:\r\ndocument.getElementById("myH").innerHTML = "My First Page";\r\n// Change paragraph:\r\ndocument.getElementById("myP").innerHTML = "My first paragraph.";</div>\r\n</div>\r\n<div class="w3-example"></div>\r\nThis example uses a single line comment at the end of each line, to explain the code:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate jsHigh">var x = 5;      // Declare x, give it the value of 5\r\nvar y = x + 2;  // Declare y, give it the value of x + 2</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n\r\n<hr />\r\n\r\n<h2>Multi-line Comments</h2>\r\nMulti-line comments start with /* and end with */.\r\n\r\nAny text between /* and */ will be ignored by JavaScript.\r\n\r\nThis example uses a multi-line comment (a comment block) to explain the code:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate jsHigh">/*\r\nThe code below will change\r\nthe heading with id = "myH"\r\nand the paragraph with id = "myP"\r\nin my web page:\r\n*/\r\ndocument.getElementById("myH").innerHTML = "My First Page";\r\ndocument.getElementById("myP").innerHTML = "My first paragraph.";</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n<table class="lamp">\r\n<tbody>\r\n<tr>\r\n<th><img src="http://www.w3schools.com/images/lamp.jpg" alt="Note" /></th>\r\n<td>It is most common to use single line comments.\r\nBlock comments are often used for formal documentation.</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n\r\n<hr />\r\n\r\n<h2>Using Comments to Prevent Execution</h2>\r\nUsing comments to prevent execution of code, is suitable for code testing.\r\n\r\nAdding // in front of a code line changes the code lines from an executable line to a comment.\r\n\r\nThis example uses // to prevent execution of one of the code lines:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate jsHigh">//document.getElementById("myH").innerHTML = "My First Page";\r\ndocument.getElementById("myP").innerHTML = "My first paragraph.";</div>\r\n</div>\r\n<div class="w3-example"></div>\r\nThis example uses a comment block to prevent execution of multiple lines:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate jsHigh">/*\r\ndocument.getElementById("myH").innerHTML = "My First Page";\r\ndocument.getElementById("myP").innerHTML = "My first paragraph.";\r\n*/</div>\r\n</div>', 'JS Comments', '', 'inherit', 'closed', 'closed', '', '195-revision-v1', '', '', '2016-05-21 14:55:23', '2016-05-21 14:55:23', '', 195, 'http://localhost/invatacel/2016/05/21/195-revision-v1/', 0, 'revision', '', 0),
(218, 1, '2016-05-21 14:55:46', '2016-05-21 14:55:46', '<h2>JavaScript Variables</h2>\r\nJavaScript variables are containers for storing data values.\r\n\r\nIn this example, x, y, and z, are variables:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate jsHigh">var x = 5;\r\nvar y = 6;\r\nvar z = x + y;</div>\r\n</div>\r\n<div class="w3-example"></div>\r\nFrom the example above, you can expect:\r\n<ul>\r\n 	<li>x stores the value 5</li>\r\n 	<li>y stores the value 6</li>\r\n 	<li>z stores the value 11</li>\r\n</ul>\r\n\r\n<hr />\r\n\r\n<h2>Much Like Algebra</h2>\r\nIn this example, price1, price2, and total, are variables:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate jsHigh">var price1 = 5;\r\nvar price2 = 6;\r\nvar total = price1 + price2;</div>\r\n</div>\r\n<div class="w3-example"></div>\r\nIn programming, just like in algebra, we use variables (like price1) to hold values.\r\n\r\nIn programming, just like in algebra, we use variables in expressions (total = price1 + price2).\r\n\r\nFrom the example above, you can calculate the total to be 11.\r\n<table class="lamp">\r\n<tbody>\r\n<tr>\r\n<th><img src="http://www.w3schools.com/images/lamp.jpg" alt="Note" /></th>\r\n<td>JavaScript variables are containers for storing data values.</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n\r\n<hr />\r\n\r\n<h2>JavaScript Identifiers</h2>\r\nAll JavaScript <strong>variables</strong> must be <strong>identified</strong> with <strong>unique names</strong>.\r\n\r\nThese unique names are called <strong>identifiers</strong>.\r\n\r\nIdentifiers can be short names (like x and y), or more descriptive names (age, sum, totalVolume).\r\n\r\nThe general rules for constructing names for variables (unique identifiers) are:\r\n<ul>\r\n 	<li>Names can contain letters, digits, underscores, and dollar signs.</li>\r\n 	<li>Names must begin with a letter</li>\r\n 	<li>Names can also begin with $ and _ (but we will not use it in this tutorial)</li>\r\n 	<li>Names are case sensitive (y and Y are different variables)</li>\r\n 	<li>Reserved words (like JavaScript keywords) cannot be used as names</li>\r\n</ul>\r\n<table class="lamp">\r\n<tbody>\r\n<tr>\r\n<th><img src="http://www.w3schools.com/images/lamp.jpg" alt="Note" /></th>\r\n<td>JavaScript identifiers are case-sensitive.</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n\r\n<hr />\r\n\r\n<h2>The Assignment Operator</h2>\r\nIn JavaScript, the equal sign (=) is an "assignment" operator, not an "equal to" operator.\r\n\r\nThis is different from algebra. The following does not make sense in algebra:\r\n<div class="w3-example">\r\n<div class="w3-code notranslate jsHigh">x = x + 5</div>\r\n</div>\r\nIn JavaScript, however, it makes perfect sense: it assigns the value of x + 5 to x.\r\n\r\n(It calculates the value of x + 5 and puts the result into x. The value of x is incremented by 5.)\r\n<table class="lamp">\r\n<tbody>\r\n<tr>\r\n<th><img src="http://www.w3schools.com/images/lamp.jpg" alt="Note" /></th>\r\n<td>The "equal to" operator is written like == in JavaScript.</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n\r\n<hr />\r\n\r\n<h2>JavaScript Data Types</h2>\r\nJavaScript variables can hold numbers like 100, and text values like "John Doe".\r\n\r\nIn programming, text values are called text strings.\r\n\r\nJavaScript can handle many types of data, but for now, just think of numbers and strings.\r\n\r\nStrings are written inside double or single quotes. Numbers are written without quotes.\r\n\r\nIf you put quotes around a number, it will be treated as a text string.\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate jsHigh">var pi = 3.14;\r\nvar person = "John Doe";\r\nvar answer = ''Yes I am!'';</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n\r\n<hr />\r\n\r\n<h2>Declaring (Creating) JavaScript Variables</h2>\r\nCreating a variable in JavaScript is called "declaring" a variable.\r\n\r\nYou declare a JavaScript variable with the <b>var</b> keyword:\r\n<div class="w3-example">\r\n<div class="w3-code notranslate jsHigh">var carName;</div>\r\n</div>\r\nAfter the declaration, the variable has no value. (Technically it has the value of <strong>undefined</strong>)\r\n\r\nTo <strong>assign</strong> a value to the variable, use the equal sign:\r\n<div class="w3-example">\r\n<div class="w3-code notranslate jsHigh">carName = "Volvo";</div>\r\n</div>\r\nYou can also assign a value to the variable when you declare it:\r\n<div class="w3-example">\r\n<div class="w3-code notranslate jsHigh">var carName = "Volvo";</div>\r\n</div>\r\nIn the example below, we create a variable called carName and assign the value "Volvo" to it.\r\n\r\nThen we "output" the value inside an HTML paragraph with id="demo":\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate htmlHigh">&lt;p id="demo"&gt;&lt;/p&gt;\r\n\r\n&lt;script&gt;\r\nvar carName = "Volvo";\r\ndocument.getElementById("demo").innerHTML = carName;\r\n&lt;/script&gt;</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n<table class="lamp">\r\n<tbody>\r\n<tr>\r\n<th><img src="http://www.w3schools.com/images/lamp.jpg" alt="Note" /></th>\r\n<td>It''s a good programming practice to declare all variables at the beginning of a script.</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n\r\n<hr />\r\n\r\n<h2>One Statement, Many Variables</h2>\r\nYou can declare many variables in one statement.\r\n\r\nStart the statement with <b>var</b> and separate the variables by <strong>comma</strong>:\r\n<div class="w3-example">\r\n<div class="w3-code notranslate jsHigh">var person = "John Doe", carName = "Volvo", price = 200;</div>\r\n</div>\r\n<div class="w3-example"></div>\r\nA declaration can span multiple lines:\r\n<div class="w3-example">\r\n<div class="w3-code notranslate jsHigh">var person = "John Doe",\r\ncarName = "Volvo",\r\nprice = 200;</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n\r\n<hr />\r\n\r\n<h2>Value = undefined</h2>\r\nIn computer programs, variables are often declared without a value. The value can be something that has to be calculated, or something that will be provided later, like user input.\r\n\r\nA variable declared without a value will have the value <b> undefined</b>.\r\n\r\nThe variable carName will have the value undefined after the execution of this statement:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate jsHigh">var carName;</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n\r\n<hr />\r\n\r\n<h2>Re-Declaring JavaScript Variables</h2>\r\nIf you re-declare a JavaScript variable, it will not lose its value.\r\n\r\nThe variable carName will still have the value "Volvo" after the execution of these statements:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate jsHigh">var carName = "Volvo";\r\nvar carName;</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n\r\n<hr />\r\n\r\n<h2>JavaScript Arithmetic</h2>\r\nAs with algebra, you can do arithmetic with JavaScript variables, using operators like = and +:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate jsHigh">var x = 5 + 2 + 3;</div>\r\n</div>\r\n<div class="w3-example"></div>\r\nYou can also add strings, but strings will be concatenated (added end-to-end):\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate jsHigh">var x = "John" + " " + "Doe";</div>\r\n</div>\r\n<div class="w3-example"></div>\r\nAlso try this:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate jsHigh">var x = "5" + 2 + 3;</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n<table class="lamp">\r\n<tbody>\r\n<tr>\r\n<th><img src="http://www.w3schools.com/images/lamp.jpg" alt="Note" /></th>\r\n<td>If you add a number to a string, the number will be treated as string, and concatenated.</td>\r\n</tr>\r\n</tbody>\r\n</table>', 'JS Variables', '', 'inherit', 'closed', 'closed', '', '196-revision-v1', '', '', '2016-05-21 14:55:46', '2016-05-21 14:55:46', '', 196, 'http://localhost/invatacel/2016/05/21/196-revision-v1/', 0, 'revision', '', 0),
(219, 1, '2016-05-21 14:56:09', '2016-05-21 14:56:09', '<h3>Example</h3>\r\nAssign values to variables and add them together:\r\n<div class="w3-code notranslate jsHigh">var x = 5;         // assign the value 5 to x\r\nvar y = 2;         // assign the value 2 to y\r\nvar z = x + y;     // assign the value 7 to z (x + y)</div>\r\n<div class="w3-example"></div>\r\n\r\n<hr />\r\n\r\n<h2>JavaScript Arithmetic Operators</h2>\r\nArithmetic operators are used to perform arithmetic on numbers (literals or variables).\r\n<table class="w3-table-all notranslate">\r\n<tbody>\r\n<tr>\r\n<th>Operator</th>\r\n<th>Description</th>\r\n</tr>\r\n<tr>\r\n<td>+</td>\r\n<td>Addition</td>\r\n</tr>\r\n<tr>\r\n<td>-</td>\r\n<td>Subtraction</td>\r\n</tr>\r\n<tr>\r\n<td>*</td>\r\n<td>Multiplication</td>\r\n</tr>\r\n<tr>\r\n<td>/</td>\r\n<td>Division</td>\r\n</tr>\r\n<tr>\r\n<td>%</td>\r\n<td>Modulus</td>\r\n</tr>\r\n<tr>\r\n<td>++</td>\r\n<td>Increment</td>\r\n</tr>\r\n<tr>\r\n<td>--</td>\r\n<td>Decrement</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\nThe <strong>addition</strong> operator (+) adds numbers:\r\n<div class="w3-example">\r\n<h3>Adding</h3>\r\n<div class="w3-code notranslate jsHigh">var x = 5;\r\nvar y = 2;\r\nvar z = x + y;</div>\r\n</div>\r\n<div class="w3-example"></div>\r\nThe <strong>multiplication</strong> operator (*) multiplies numbers.\r\n<div class="w3-example">\r\n<h3>Multiplying</h3>\r\n<div class="w3-code notranslate jsHigh">var x = 5;\r\nvar y = 2;\r\nvar z = x * y;</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n<table class="lamp">\r\n<tbody>\r\n<tr>\r\n<th><img src="http://www.w3schools.com/images/lamp.jpg" alt="Note" /></th>\r\n<td>You will learn more about JavaScript operators in the next chapters.</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n\r\n<hr />\r\n\r\n<h2>JavaScript Assignment Operators</h2>\r\nAssignment operators assign values to JavaScript variables.\r\n<table class="w3-table-all notranslate">\r\n<tbody>\r\n<tr>\r\n<th>Operator</th>\r\n<th>Example</th>\r\n<th>Same As</th>\r\n</tr>\r\n<tr>\r\n<td>=</td>\r\n<td>x = y</td>\r\n<td>x = y</td>\r\n</tr>\r\n<tr>\r\n<td>+=</td>\r\n<td>x += y</td>\r\n<td>x = x + y</td>\r\n</tr>\r\n<tr>\r\n<td>-=</td>\r\n<td>x -= y</td>\r\n<td>x = x - y</td>\r\n</tr>\r\n<tr>\r\n<td>*=</td>\r\n<td>x *= y</td>\r\n<td>x = x * y</td>\r\n</tr>\r\n<tr>\r\n<td>/=</td>\r\n<td>x /= y</td>\r\n<td>x = x / y</td>\r\n</tr>\r\n<tr>\r\n<td>%=</td>\r\n<td>x %= y</td>\r\n<td>x = x % y</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\nThe <strong>assignment</strong> operator (=) assigns a value to a variable.\r\n<div class="w3-example">\r\n<h3>Assignment</h3>\r\n<div class="w3-code notranslate jsHigh">var x = 10;</div>\r\n</div>\r\n<div class="w3-example"></div>\r\nThe <strong>addition assignment</strong> operator (+=) adds a value to a variable.\r\n<div class="w3-example">\r\n<h3>Assignment</h3>\r\n<div class="w3-code notranslate jsHigh">var x = 10;\r\nx += 5;</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n\r\n<hr />\r\n\r\n<h2>JavaScript String Operators</h2>\r\nThe + operator can also be used to add (concatenate) strings.\r\n<table class="lamp">\r\n<tbody>\r\n<tr>\r\n<th><img src="http://www.w3schools.com/images/lamp.jpg" alt="Note" /></th>\r\n<td>When used on strings, the + operator is called the concatenation operator.</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate jsHigh">txt1 = "John";\r\ntxt2 = "Doe";\r\ntxt3 = txt1 + " " + txt2;</div>\r\nThe result of <strong>txt3</strong> will be:\r\n<div class="w3-code notranslate">John Doe</div>\r\n</div>\r\n<div class="w3-example"></div>\r\nThe += assignment operator can also be used to add (concatenate) strings:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate jsHigh">txt1 = "What a very ";\r\ntxt1 += "nice day";</div>\r\nThe result of <strong>txt1</strong> will be:\r\n<div class="w3-code notranslate">What a very nice day</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n\r\n<hr />\r\n\r\n<h2>Adding Strings and Numbers</h2>\r\nAdding two numbers, will return the sum, but adding a number and a string will return a string:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate jsHigh">x = 5 + 5;\r\ny = "5" + 5;\r\nz = "Hello" + 5;</div>\r\nThe result of <em>x</em>,<em> y</em>, and <em>z</em> will be:\r\n<div class="w3-code notranslate">10\r\n55\r\nHello5</div>\r\n</div>\r\n<div class="w3-example"></div>\r\nThe rule is: <b>If you add a number and a string, the result will be a string!</b>\r\n\r\n<hr />\r\n\r\n<h2>JavaScript Comparison and Logical Operators</h2>\r\n<div class="table-responsive">\r\n<table class="w3-table-all notranslate">\r\n<tbody>\r\n<tr>\r\n<th>Operator</th>\r\n<th>Description</th>\r\n</tr>\r\n<tr>\r\n<td>==</td>\r\n<td>equal to</td>\r\n</tr>\r\n<tr>\r\n<td>===</td>\r\n<td>equal value and equal type</td>\r\n</tr>\r\n<tr>\r\n<td>!=</td>\r\n<td>not equal</td>\r\n</tr>\r\n<tr>\r\n<td>!==</td>\r\n<td>not equal value or not equal type</td>\r\n</tr>\r\n<tr>\r\n<td>&gt;</td>\r\n<td>greater than</td>\r\n</tr>\r\n<tr>\r\n<td>&lt;</td>\r\n<td>less than</td>\r\n</tr>\r\n<tr>\r\n<td>&gt;=</td>\r\n<td>greater than or equal to</td>\r\n</tr>\r\n<tr>\r\n<td>&lt;=</td>\r\n<td>less than or equal to</td>\r\n</tr>\r\n<tr>\r\n<td>?</td>\r\n<td>ternary operator</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n</div>\r\n<table class="lamp">\r\n<tbody>\r\n<tr>\r\n<th><img src="http://www.w3schools.com/images/lamp.jpg" alt="Note" /></th>\r\n<td>Comparison and logical operators are described in the <strong>JS Comparisons</strong> chapter.</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n\r\n<hr />\r\n\r\n<h2>JavaScript Type Operators</h2>\r\n<div class="table-responsive">\r\n<table class="w3-table-all notranslate">\r\n<tbody>\r\n<tr>\r\n<th>Operator</th>\r\n<th>Description</th>\r\n</tr>\r\n<tr>\r\n<td>typeof</td>\r\n<td>Returns the type of a variable</td>\r\n</tr>\r\n<tr>\r\n<td>instanceof</td>\r\n<td>Returns true if an object is an instance of an object type</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n</div>\r\n<table class="lamp">\r\n<tbody>\r\n<tr>\r\n<th><img src="http://www.w3schools.com/images/lamp.jpg" alt="Note" /></th>\r\n<td>Type operators are described in the <strong>JS Type Conversion</strong> chapter.</td>\r\n</tr>\r\n</tbody>\r\n</table>', 'JS Operators', '', 'inherit', 'closed', 'closed', '', '197-revision-v1', '', '', '2016-05-21 14:56:09', '2016-05-21 14:56:09', '', 197, 'http://localhost/invatacel/2016/05/21/197-revision-v1/', 0, 'revision', '', 0),
(220, 1, '2016-05-21 14:56:43', '2016-05-21 14:56:43', '<p class="intro">A typical thing to do with numbers is arithmetic.</p>\r\n\r\n\r\n<hr />\r\n\r\n<h2>JavaScript Arithmetic Operators</h2>\r\nArithmetic operators perform arithmetic on numbers (literals or variables).\r\n<table class="w3-table-all notranslate">\r\n<tbody>\r\n<tr>\r\n<th>Operator</th>\r\n<th>Description</th>\r\n</tr>\r\n<tr>\r\n<td>+</td>\r\n<td>Addition</td>\r\n</tr>\r\n<tr>\r\n<td>-</td>\r\n<td>Subtraction</td>\r\n</tr>\r\n<tr>\r\n<td>*</td>\r\n<td>Multiplication</td>\r\n</tr>\r\n<tr>\r\n<td>/</td>\r\n<td>Division</td>\r\n</tr>\r\n<tr>\r\n<td>%</td>\r\n<td>Modulus</td>\r\n</tr>\r\n<tr>\r\n<td>++</td>\r\n<td>Increment</td>\r\n</tr>\r\n<tr>\r\n<td>--</td>\r\n<td>Decrement</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n\r\n<hr />\r\n\r\n<h2>Arithmetic Operations</h2>\r\nA typical arithmetic operation operates on two numbers.\r\n\r\nThe two numbers can be literals:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate jsHigh">var x = 100 + 50;</div>\r\n</div>\r\n<div class="w3-example"></div>\r\nor variables:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate jsHigh">var x = a + b;</div>\r\n</div>\r\n<div class="w3-example"></div>\r\nor expressions:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate jsHigh">var x = (100 + 50) * a;</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n\r\n<hr />\r\n\r\n<h2>Operators and Operands</h2>\r\nThe numbers (in an arithmetic operation) are called <strong>operands</strong>.\r\n\r\nThe operation (to be performed between the two operands) is defined by an <strong>operator</strong>.\r\n<table class="w3-table-all">\r\n<tbody>\r\n<tr>\r\n<th>Operand</th>\r\n<th>Operator</th>\r\n<th>Operand</th>\r\n</tr>\r\n<tr>\r\n<td>100</td>\r\n<td>+</td>\r\n<td>50</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\nThe <strong>addition</strong> operator (+) adds numbers:\r\n<div class="w3-example">\r\n<h3>Adding</h3>\r\n<div class="w3-code notranslate jsHigh">var x = 5;\r\nvar y = 2;\r\nvar z = x + y;</div>\r\n</div>\r\n<div class="w3-example"></div>\r\nThe <strong>subtraction</strong> operator (-) subtracts numbers.\r\n<div class="w3-example">\r\n<h3>Subtracting</h3>\r\n<div class="w3-code notranslate jsHigh">var x = 5;\r\nvar y = 2;\r\nvar z = x - y;</div>\r\n</div>\r\n<div class="w3-example"></div>\r\nThe <strong>multiplication</strong> operator (*) multiplies numbers.\r\n<div class="w3-example">\r\n<h3>Multiplying</h3>\r\n<div class="w3-code notranslate jsHigh">var x = 5;\r\nvar y = 2;\r\nvar z = x * y;</div>\r\n</div>\r\n<div class="w3-example"></div>\r\nThe <strong>division</strong> operator (/) divides numbers.\r\n<div class="w3-example">\r\n<h3>Dividing</h3>\r\n<div class="w3-code notranslate jsHigh">var x = 5;\r\nvar y = 2;\r\nvar z = x / y;</div>\r\n</div>\r\n<div class="w3-example"></div>\r\nThe <strong>modular</strong> operator (%) returns the division remainder.\r\n<div class="w3-example">\r\n<h3>Modulus</h3>\r\n<div class="w3-code notranslate jsHigh">var x = 5;\r\nvar y = 2;\r\nvar z = x % y;</div>\r\n</div>\r\n<div class="w3-example"></div>\r\nThe <strong>increment</strong> operator (++) increments numbers.\r\n<div class="w3-example">\r\n<h3>Incrementing</h3>\r\n<div class="w3-code notranslate jsHigh">var x = 5;\r\nx++;\r\nvar z = x;</div>\r\n</div>\r\n<div class="w3-example"></div>\r\nThe <strong>decrement</strong> operator (--) decrements numbers.\r\n<div class="w3-example">\r\n<h3>Decrementing</h3>\r\n<div class="w3-code notranslate jsHigh">var x = 5;\r\nx--;\r\nvar z = x;</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n\r\n<hr />\r\n\r\n<h2>Operator Precedence</h2>\r\nOperator precedence describes the order in which operations are performed in an arithmetic expression.\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate jsHigh">var x = 100 + 50 * 3;</div>\r\n</div>\r\n<div class="w3-example"></div>\r\nIs the result of example above the same as 150 * 3, or is it the same as 100 + 150?\r\n\r\nIs the addition or the multiplication done first?\r\n\r\nAs in traditional school mathematics, the multiplication is done first.\r\n\r\nMultiplication (*) and division (/) have higher <strong>precedence</strong> than addition (+) and subtraction (-).\r\n\r\nAnd (as in school mathematics) the precedence can be changed by using parentheses:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate jsHigh">var x = (100 + 50) * 3;</div>\r\n</div>\r\n<div class="w3-example"></div>\r\nWhen using parentheses, the operations inside the parentheses are computed first.\r\n\r\nWhen many operations have the same precedence (like addition and subtraction), they are computed from left to right:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate jsHigh">var x = 100 + 50 - 3;</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n\r\n<hr />\r\n\r\n<h2>JavaScript Operator Precedence Values</h2>\r\n<table class="w3-table-all">\r\n<tbody>\r\n<tr>\r\n<th>Value</th>\r\n<th>Operator</th>\r\n<th>Description</th>\r\n<th>Example</th>\r\n</tr>\r\n<tr>\r\n<td>19</td>\r\n<td>( )</td>\r\n<td>Expression grouping</td>\r\n<td>(3 + 4)</td>\r\n</tr>\r\n<tr>\r\n<td></td>\r\n<td></td>\r\n<td></td>\r\n<td></td>\r\n</tr>\r\n<tr>\r\n<td>18</td>\r\n<td>.</td>\r\n<td>Member</td>\r\n<td>person.name</td>\r\n</tr>\r\n<tr>\r\n<td>18</td>\r\n<td>[]</td>\r\n<td>Member</td>\r\n<td>person["name"]</td>\r\n</tr>\r\n<tr>\r\n<td></td>\r\n<td></td>\r\n<td></td>\r\n<td></td>\r\n</tr>\r\n<tr>\r\n<td>17</td>\r\n<td>()</td>\r\n<td>Function call</td>\r\n<td>myFunction()</td>\r\n</tr>\r\n<tr>\r\n<td>17</td>\r\n<td>new</td>\r\n<td>Create</td>\r\n<td>new Date()</td>\r\n</tr>\r\n<tr>\r\n<td></td>\r\n<td></td>\r\n<td></td>\r\n<td></td>\r\n</tr>\r\n<tr>\r\n<td>16</td>\r\n<td>++</td>\r\n<td>Postfix Increment</td>\r\n<td>i++</td>\r\n</tr>\r\n<tr>\r\n<td>16</td>\r\n<td>--</td>\r\n<td>Postfix Decrement</td>\r\n<td>i--</td>\r\n</tr>\r\n<tr>\r\n<td></td>\r\n<td></td>\r\n<td></td>\r\n<td></td>\r\n</tr>\r\n<tr>\r\n<td>15</td>\r\n<td>++</td>\r\n<td>Prefix Increment</td>\r\n<td>++i</td>\r\n</tr>\r\n<tr>\r\n<td>15</td>\r\n<td>--</td>\r\n<td>Prefix Decrement</td>\r\n<td>--i</td>\r\n</tr>\r\n<tr>\r\n<td>15</td>\r\n<td>!</td>\r\n<td>Logical not</td>\r\n<td>!(x==y)</td>\r\n</tr>\r\n<tr>\r\n<td>15</td>\r\n<td>typeof</td>\r\n<td>Type</td>\r\n<td>typeof x</td>\r\n</tr>\r\n<tr>\r\n<td></td>\r\n<td></td>\r\n<td></td>\r\n<td></td>\r\n</tr>\r\n<tr>\r\n<td>14</td>\r\n<td>*</td>\r\n<td>Multiplication</td>\r\n<td>10 * 5</td>\r\n</tr>\r\n<tr>\r\n<td>14</td>\r\n<td>/</td>\r\n<td>Division</td>\r\n<td>10 / 5</td>\r\n</tr>\r\n<tr>\r\n<td>14</td>\r\n<td>%</td>\r\n<td>Modulo division</td>\r\n<td>10 % 5</td>\r\n</tr>\r\n<tr class="w3-red">\r\n<td>14</td>\r\n<td>**</td>\r\n<td>Exponentiation</td>\r\n<td>10 ** 2</td>\r\n</tr>\r\n<tr>\r\n<td></td>\r\n<td></td>\r\n<td></td>\r\n<td></td>\r\n</tr>\r\n<tr>\r\n<td>13</td>\r\n<td>+</td>\r\n<td>Addition</td>\r\n<td>10 + 5</td>\r\n</tr>\r\n<tr>\r\n<td>13</td>\r\n<td>-</td>\r\n<td>Subtraction</td>\r\n<td>10 - 5</td>\r\n</tr>\r\n<tr>\r\n<td></td>\r\n<td></td>\r\n<td></td>\r\n<td></td>\r\n</tr>\r\n<tr>\r\n<td>12</td>\r\n<td>&lt;&lt;</td>\r\n<td>Shift left</td>\r\n<td>x &lt;&lt; 2</td>\r\n</tr>\r\n<tr>\r\n<td>12</td>\r\n<td>&gt;&gt;</td>\r\n<td>Shift right</td>\r\n<td>x &gt;&gt; 2</td>\r\n</tr>\r\n<tr>\r\n<td></td>\r\n<td></td>\r\n<td></td>\r\n<td></td>\r\n</tr>\r\n<tr>\r\n<td>11</td>\r\n<td>&lt;</td>\r\n<td>Less than</td>\r\n<td>x &lt; y</td>\r\n</tr>\r\n<tr>\r\n<td>11</td>\r\n<td>&lt;=</td>\r\n<td>Less than or equal</td>\r\n<td>x &lt;= y</td>\r\n</tr>\r\n<tr>\r\n<td>11</td>\r\n<td>&gt;</td>\r\n<td>Greater than</td>\r\n<td>x &gt; y</td>\r\n</tr>\r\n<tr>\r\n<td>11</td>\r\n<td>&gt;=</td>\r\n<td>Greater than or equal</td>\r\n<td>x &gt;= y</td>\r\n</tr>\r\n<tr>\r\n<td></td>\r\n<td></td>\r\n<td></td>\r\n<td></td>\r\n</tr>\r\n<tr>\r\n<td>10</td>\r\n<td>==</td>\r\n<td>Equal</td>\r\n<td>x == y</td>\r\n</tr>\r\n<tr>\r\n<td>10</td>\r\n<td>===</td>\r\n<td>Strict equal</td>\r\n<td>x === y</td>\r\n</tr>\r\n<tr>\r\n<td>10</td>\r\n<td>!=</td>\r\n<td>Unequal</td>\r\n<td>x != y</td>\r\n</tr>\r\n<tr>\r\n<td>10</td>\r\n<td>!==</td>\r\n<td>Strict unequal</td>\r\n<td>x !== y</td>\r\n</tr>\r\n<tr>\r\n<td></td>\r\n<td></td>\r\n<td></td>\r\n<td></td>\r\n</tr>\r\n<tr>\r\n<td>6</td>\r\n<td>&amp;&amp;</td>\r\n<td>And</td>\r\n<td>x &amp;&amp; y</td>\r\n</tr>\r\n<tr>\r\n<td>5</td>\r\n<td>||</td>\r\n<td>Or</td>\r\n<td>x || y</td>\r\n</tr>\r\n<tr>\r\n<td></td>\r\n<td></td>\r\n<td></td>\r\n<td></td>\r\n</tr>\r\n<tr>\r\n<td>3</td>\r\n<td>=</td>\r\n<td>Assignment</td>\r\n<td>x = y</td>\r\n</tr>\r\n<tr>\r\n<td>3</td>\r\n<td>+=</td>\r\n<td>Assignment</td>\r\n<td>x += y</td>\r\n</tr>\r\n<tr>\r\n<td>3</td>\r\n<td>-=</td>\r\n<td>Assignment</td>\r\n<td>x -= y</td>\r\n</tr>\r\n<tr>\r\n<td>3</td>\r\n<td>*=</td>\r\n<td>Assignment</td>\r\n<td>x *= y</td>\r\n</tr>\r\n<tr>\r\n<td>3</td>\r\n<td>/=</td>\r\n<td>Assignment</td>\r\n<td>x /= y</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n<table class="lamp">\r\n<tbody>\r\n<tr>\r\n<th><img src="http://www.w3schools.com/images/lamp.jpg" alt="Note" /></th>\r\n<td>Expressions in parentheses are fully computed before the value is used in the rest of the expression.</td>\r\n</tr>\r\n</tbody>\r\n</table>', 'JS Arithmetic', '', 'inherit', 'closed', 'closed', '', '198-revision-v1', '', '', '2016-05-21 14:56:43', '2016-05-21 14:56:43', '', 198, 'http://localhost/invatacel/2016/05/21/198-revision-v1/', 0, 'revision', '', 0),
(221, 1, '2016-05-21 14:57:03', '2016-05-21 14:57:03', '<h2>JavaScript Assignment Operators</h2>\r\nAssignment operators assign values to JavaScript variables.\r\n<table class="w3-table-all notranslate">\r\n<tbody>\r\n<tr>\r\n<th>Operator</th>\r\n<th>Example</th>\r\n<th>Same As</th>\r\n</tr>\r\n<tr>\r\n<td>=</td>\r\n<td>x = y</td>\r\n<td>x = y</td>\r\n</tr>\r\n<tr>\r\n<td>+=</td>\r\n<td>x += y</td>\r\n<td>x = x + y</td>\r\n</tr>\r\n<tr>\r\n<td>-=</td>\r\n<td>x -= y</td>\r\n<td>x = x - y</td>\r\n</tr>\r\n<tr>\r\n<td>*=</td>\r\n<td>x *= y</td>\r\n<td>x = x * y</td>\r\n</tr>\r\n<tr>\r\n<td>/=</td>\r\n<td>x /= y</td>\r\n<td>x = x / y</td>\r\n</tr>\r\n<tr>\r\n<td>%=</td>\r\n<td>x %= y</td>\r\n<td>x = x % y</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\nThe = assignment operator assigns a value to a variable.\r\n<div class="w3-example">\r\n<h3>Assignment</h3>\r\n<div class="w3-code notranslate jsHigh">var x = 10;</div>\r\n</div>\r\n<div class="w3-example"></div>\r\nThe += assignment operator adds a value to a variable.\r\n<div class="w3-example">\r\n<h3>Assignment</h3>\r\n<div class="w3-code notranslate jsHigh">var x = 10;\r\nx += 5;</div>\r\n</div>\r\n<div class="w3-example"></div>\r\nThe -= assignment operator subtracts a value from a variable.\r\n<div class="w3-example">\r\n<h3>Assignment</h3>\r\n<div class="w3-code notranslate jsHigh">var x = 10;\r\nx -= 5;</div>\r\n</div>\r\n<div class="w3-example"></div>\r\nThe *= assignment operator multiplies a variable.\r\n<div class="w3-example">\r\n<h3>Assignment</h3>\r\n<div class="w3-code notranslate jsHigh">var x = 10;\r\nx *= 5;</div>\r\n</div>\r\n<div class="w3-example"></div>\r\nThe /= assignment divides a variable.\r\n<div class="w3-example">\r\n<h3>Assignment</h3>\r\n<div class="w3-code notranslate jsHigh">var x = 10;\r\nx /= 5;</div>\r\n</div>\r\n<div class="w3-example"></div>\r\nThe %= assignment operator assigns a remainder to a variable.\r\n<div class="w3-example">\r\n<h3>Assignment</h3>\r\n<div class="w3-code notranslate jsHigh">var x = 10;\r\nx %= 5;</div>\r\n</div>', 'JS Assignment', '', 'inherit', 'closed', 'closed', '', '199-revision-v1', '', '', '2016-05-21 14:57:03', '2016-05-21 14:57:03', '', 199, 'http://localhost/invatacel/2016/05/21/199-revision-v1/', 0, 'revision', '', 0);
INSERT INTO `wp_posts` (`ID`, `post_author`, `post_date`, `post_date_gmt`, `post_content`, `post_title`, `post_excerpt`, `post_status`, `comment_status`, `ping_status`, `post_password`, `post_name`, `to_ping`, `pinged`, `post_modified`, `post_modified_gmt`, `post_content_filtered`, `post_parent`, `guid`, `menu_order`, `post_type`, `post_mime_type`, `comment_count`) VALUES
(222, 1, '2016-05-21 14:57:28', '2016-05-21 14:57:28', '<p class="intro">String, Number, Boolean, Array, Object.</p>\r\n\r\n\r\n<hr />\r\n\r\n<h2>JavaScript Data Types</h2>\r\nJavaScript variables can hold many <strong>data types</strong>: numbers, strings, arrays, objects and more:\r\n<div class="w3-example">\r\n<div class="w3-code notranslate jsHigh">var length = 16;                               // Number\r\nvar lastName = "Johnson";                      // String\r\nvar cars = ["Saab", "Volvo", "BMW"];           // Array\r\nvar x = {firstName:"John", lastName:"Doe"};    // Object</div>\r\n</div>\r\n\r\n<hr />\r\n\r\n<h2>The Concept of Data Types</h2>\r\nIn programming, data types is an important concept.\r\n\r\nTo be able to operate on variables, it is important to know something about the type.\r\n\r\nWithout data types, a computer cannot safely solve this:\r\n<div class="w3-example">\r\n<div class="w3-code notranslate jsHigh">var x = 16 + "Volvo";</div>\r\n</div>\r\nDoes it make any sense to add "Volvo" to sixteen? Will it produce an error or will it produce a result?\r\n\r\nJavaScript will treat the example above as:\r\n<div class="w3-example">\r\n<div class="w3-code notranslate jsHigh">var x = "16" + "Volvo";</div>\r\n</div>\r\n<table class="lamp">\r\n<tbody>\r\n<tr>\r\n<th><img src="http://www.w3schools.com/images/lamp.jpg" alt="Note" /></th>\r\n<td>When adding a number and a string, JavaScript will treat the number as a string.</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate jsHigh">var x = 16 + "Volvo";</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate jsHigh">var x = "Volvo" + 16;</div>\r\n</div>\r\n<div class="w3-example"></div>\r\nJavaScript evaluates expressions from left to right. Different sequences can produce different results:\r\n<div class="w3-example">\r\n<h3>JavaScript:</h3>\r\n<div class="w3-code notranslate jsHigh">var x = 16 + 4 + "Volvo";</div>\r\n<h3>Result:</h3>\r\n<div class="w3-code notranslate jsHigh">20Volvo</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n<div class="w3-example">\r\n<h3>JavaScript:</h3>\r\n<div class="w3-code notranslate jsHigh">var x = "Volvo" + 16 + 4;</div>\r\n<h3>Result:</h3>\r\n<div class="w3-code notranslate jsHigh">Volvo164</div>\r\n</div>\r\n<div class="w3-example"></div>\r\nIn the first example, JavaScript treats 16 and 4 as numbers, until it reaches "Volvo".\r\n\r\nIn the second example, since the first operand is a string, all operands are treated as strings.\r\n\r\n<hr />\r\n\r\n<h2>JavaScript Has Dynamic Types</h2>\r\nJavaScript has dynamic types. This means that the same variable can be used as different types:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate jsHigh">var x;              // Now x is undefined\r\nvar x = 5;           // Now x is a Number\r\nvar x = "John";      // Now x is a String</div>\r\n</div>\r\n\r\n<hr />\r\n\r\n<h2>JavaScript Strings</h2>\r\nA string (or a text string) is a series of characters like "John Doe".\r\n\r\nStrings are written with quotes. You can use single or double quotes:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate jsHigh">var carName = "Volvo XC60";   // Using double quotes\r\nvar carName = ''Volvo XC60'';   // Using single quotes</div>\r\n</div>\r\nYou can use quotes inside a string, as long as they don''t match the quotes surrounding the string:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate jsHigh">var answer = "It''s alright";             // Single quote inside double quotes\r\nvar answer = "He is called ''Johnny''";    // Single quotes inside double quotes\r\nvar answer = ''He is called "Johnny"'';    // Double quotes inside single quotes</div>\r\n</div>\r\nYou will learn more about strings later in this tutorial.\r\n\r\n<hr />\r\n\r\n<h2>JavaScript Numbers</h2>\r\nJavaScript has only one type of numbers.\r\n\r\nNumbers can be written with, or without decimals:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate jsHigh">var x1 = 34.00;     // Written with decimals\r\nvar x2 = 34;        // Written without decimals</div>\r\n</div>\r\nExtra large or extra small numbers can be written with scientific (exponential) notation:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate jsHigh">var y = 123e5;      // 12300000\r\nvar z = 123e-5;     // 0.00123</div>\r\n</div>\r\nYou will learn more about numbers later in this tutorial.\r\n\r\n<hr />\r\n\r\n<h2>JavaScript Booleans</h2>\r\nBooleans can only have two values: true or false.\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate jsHigh">var x = true;\r\nvar y = false;</div>\r\n</div>\r\nBooleans are often used in conditional testing.\r\n\r\nYou will learn more about conditional testing later in this tutorial.\r\n\r\n<hr />\r\n\r\n<h2>JavaScript Arrays</h2>\r\nJavaScript arrays are written with square brackets.\r\n\r\nArray items are separated by commas.\r\n\r\nThe following code declares (creates) an array called cars, containing three items (car names):\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate jsHigh">var cars = ["Saab", "Volvo", "BMW"];</div>\r\n</div>\r\n<div class="w3-example"></div>\r\nArray indexes are zero-based, which means the first item is [0], second is [1], and so on.\r\n\r\nYou will learn more about arrays later in this tutorial.\r\n\r\n<hr />\r\n\r\n<h2>JavaScript Objects</h2>\r\nJavaScript objects are written with curly braces.\r\n\r\nObject properties are written as name:value pairs, separated by commas.\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate jsHigh">var person = {firstName:"John", lastName:"Doe", age:50, eyeColor:"blue"};</div>\r\n</div>\r\n<div class="w3-example"></div>\r\nThe object (person) in the example above has 4 properties: firstName, lastName, age, and eyeColor.\r\n\r\nYou will learn more about objects later in this tutorial.\r\n\r\n<hr />\r\n\r\n<h2>The typeof Operator</h2>\r\nYou can use the JavaScript <strong>typeof</strong> operator to find the type of a JavaScript variable:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate jsHigh">typeof"John"                // Returns string\r\ntypeof 3.14                  // Returns number\r\ntypeof false                 // Returns boolean\r\ntypeof [1,2,3,4]             // Returns object\r\ntypeof {name:''John'', age:34} // Returns object</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n<table class="lamp">\r\n<tbody>\r\n<tr>\r\n<th><img src="http://www.w3schools.com/images/lamp.jpg" alt="Note" /></th>\r\n<td>In JavaScript, an array is a special type of object. Therefore typeof [1,2,3,4] returns object.</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n\r\n<hr />\r\n\r\n<h2>Undefined</h2>\r\nIn JavaScript, a variable without a value, has the value<strong> undefined</strong>. The typeof is also <strong>undefined</strong>.\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate jsHigh">var person;                  // Value is undefined, type is undefined</div>\r\n</div>\r\n<div class="w3-example"></div>\r\nAny variable can be emptied, by setting the value to <strong>undefined</strong>. The type will also be <strong>undefined</strong>.\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate jsHigh">person = undefined;          // Value is undefined, type is undefined</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n\r\n<hr />\r\n\r\n<h2>Empty Values</h2>\r\nAn empty value has nothing to do with undefined.\r\n\r\nAn empty string variable has both a value and a type.\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate jsHigh">var car = "";                // The value is "", the typeof is string</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n\r\n<hr />\r\n\r\n<h2>Null</h2>\r\nIn JavaScript null is "nothing". It is supposed to be something that doesn''t exist.\r\n\r\nUnfortunately, in JavaScript, the data type of null is an object.\r\n<table class="lamp">\r\n<tbody>\r\n<tr>\r\n<th><img src="http://www.w3schools.com/images/lamp.jpg" alt="Note" /></th>\r\n<td>You can consider it a bug in JavaScript that typeof null is an object. It should be null.</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\nYou can empty an object by setting it to null:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate jsHigh">var person = null;           // Value is null, but type is still an object</div>\r\n</div>\r\n<div class="w3-example"></div>\r\nYou can also empty an object by setting it to undefined:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate jsHigh">var person = undefined;     // Value is undefined, type is undefined</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n\r\n<hr />\r\n\r\n<h2>Difference Between Undefined and Null</h2>\r\n<div class="w3-example">\r\n<div class="w3-code notranslate jsHigh">typeof undefined             // undefined\r\ntypeof null                  // object\r\nnull === undefined           // false\r\nnull == undefined            // true</div>\r\n</div>', 'JS Data Types', '', 'inherit', 'closed', 'closed', '', '200-revision-v1', '', '', '2016-05-21 14:57:28', '2016-05-21 14:57:28', '', 200, 'http://localhost/invatacel/2016/05/21/200-revision-v1/', 0, 'revision', '', 0),
(223, 1, '2016-05-21 14:57:49', '2016-05-21 14:57:49', '<p class="intro">A JavaScript function is a block of code designed to perform a particular task.</p>\r\n<p class="intro">A JavaScript function is executed when "something" invokes it (calls it).</p>\r\n\r\n\r\n<hr />\r\n\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate jsHigh">function myFunction(p1, p2) {\r\nreturn p1 * p2;              // The function returns the product of p1 and p2\r\n}</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n\r\n<hr />\r\n\r\n<h2>JavaScript Function Syntax</h2>\r\nA JavaScript function is defined with the <strong>function</strong> keyword, followed by a <strong>name</strong>, followed by parentheses <strong>()</strong>.\r\n\r\nFunction names can contain letters, digits, underscores, and dollar signs (same rules as variables).\r\n\r\nThe parentheses may include parameter names separated by commas:\r\n<strong>(<em>parameter1, parameter2, ...</em>)</strong>\r\n\r\nThe code to be executed, by the function, is placed inside curly brackets: <strong>{}</strong>\r\n<div class="w3-example">\r\n<div class="w3-code notranslate jsHigh">function<em>name</em>(<em>parameter1, parameter2, parameter3</em>) {\r\n<em>code to be executed</em>\r\n}</div>\r\n</div>\r\nFunction <strong>parameters</strong> are the <strong>names</strong> listed in the function definition.\r\n\r\nFunction <strong>arguments</strong> are the real <strong>values</strong> received by the function when it is invoked.\r\n\r\nInside the function, the arguments behave as local variables.\r\n<table class="lamp">\r\n<tbody>\r\n<tr>\r\n<th><img src="http://www.w3schools.com/images/lamp.jpg" alt="Note" /></th>\r\n<td>A Function is much the same as a Procedure or a Subroutine, in other programming languages.</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n\r\n<hr />\r\n\r\n<h2>Function Invocation</h2>\r\nThe code inside the function will execute when "something" <strong>invokes</strong> (calls) the function:\r\n<ul>\r\n 	<li>When an event occurs (when a user clicks a button)</li>\r\n 	<li>When it is invoked (called) from JavaScript code</li>\r\n 	<li>Automatically (self invoked)</li>\r\n</ul>\r\nYou will learn a lot more about function invocation later in this tutorial.\r\n\r\n<hr />\r\n\r\n<h2>Function Return</h2>\r\nWhen JavaScript reaches a <strong>return statement</strong>, the function will stop executing.\r\n\r\nIf the function was invoked from a statement, JavaScript will "return" to execute the code after the invoking statement.\r\n\r\nFunctions often compute a <strong>return value</strong>. The return value is "returned" back to the "caller":\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\nCalculate the product of two numbers, and return the result:\r\n<div class="w3-code notranslate jsHigh">var x = myFunction(4, 3);       // Function is called, return value will end up in x\r\n\r\nfunction myFunction(a, b) {\r\nreturn a * b;                // Function returns the product of a and b\r\n}</div>\r\nThe result in x will be:\r\n<div class="w3-code notranslate">12</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n\r\n<hr />\r\n\r\n<h2>Why Functions?</h2>\r\nYou can reuse code: Define the code once, and use it many times.\r\n\r\nYou can use the same code many times with different arguments, to produce different results.\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\nConvert Fahrenheit to Celsius:\r\n<div class="w3-code notranslate jsHigh">function toCelsius(fahrenheit) {\r\nreturn (5/9) * (fahrenheit-32);\r\n}\r\ndocument.getElementById("demo").innerHTML = toCelsius(77);</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n\r\n<hr />\r\n\r\n<h2>The () Operator Invokes the Function</h2>\r\nUsing the example above, toCelsius refers to the function object, and toCelsius() refers to the function result.\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\nAccessing a function without () will return the function definition:\r\n<div class="w3-code notranslate jsHigh">function toCelsius(fahrenheit) {\r\nreturn (5/9) * (fahrenheit-32);\r\n}\r\ndocument.getElementById("demo").innerHTML = toCelsius;</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n\r\n<hr />\r\n\r\n<h2>Functions Used as Variables</h2>\r\nIn JavaScript, you can use functions the same way as you use variables.\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\nYou can use:\r\n<div class="w3-code notranslate jsHigh">var text = "The temperature is " + toCelsius(77) + " Celsius";</div>\r\nInstead of:\r\n<div class="w3-code notranslate jsHigh">var x = toCelsius(32);\r\nvar text = "The temperature is " + x + " Celsius";</div>\r\n</div>', 'JS Functions', '', 'inherit', 'closed', 'closed', '', '201-revision-v1', '', '', '2016-05-21 14:57:49', '2016-05-21 14:57:49', '', 201, 'http://localhost/invatacel/2016/05/21/201-revision-v1/', 0, 'revision', '', 0),
(224, 1, '2016-05-21 14:58:16', '2016-05-21 14:58:16', '<p class="intro">JavaScript strings are used for storing and manipulating text.</p>\r\n\r\n\r\n<hr />\r\n\r\n<h2>JavaScript Strings</h2>\r\nA JavaScript string simply stores a series of characters like "John Doe".\r\n\r\nA string can be any text inside quotes. You can use single or double quotes:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate jsHigh">var carname = "Volvo XC60";\r\nvar carname = ''Volvo XC60'';</div>\r\n</div>\r\n<div class="w3-example"></div>\r\nYou can use quotes inside a string, as long as they don''t match the quotes surrounding the string:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate jsHigh">var answer = "It''s alright";\r\nvar answer = "He is called ''Johnny''";\r\nvar answer = ''He is called "Johnny"'';</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n\r\n<hr />\r\n\r\n<h2>String Length</h2>\r\nThe length of a string is found in the built in property <strong>length</strong>:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate jsHigh">var txt = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";\r\nvar sln = txt.length;</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n\r\n<hr />\r\n\r\n<h2>Special Characters</h2>\r\nBecause strings must be written within quotes, JavaScript will misunderstand this string:\r\n<div class="w3-example">\r\n<div class="w3-code notranslate jsHigh">var y = "We are the so-called "Vikings" from the north."</div>\r\n</div>\r\nThe string will be chopped to "We are the so-called ".\r\n\r\nThe solution to avoid this problem, is to use the <strong>\\ escape character</strong>.\r\n\r\nThe backslash escape character turns special characters into string characters:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate"><span class="highELE">var</span> x = <span class="highVAL">''It\\''s alright'';</span>\r\n<span class="highELE">var</span> y = <span class="highVAL">"We are the so-called \\"Vikings\\" from the north."</span></div>\r\n</div>\r\n<div class="w3-example"></div>\r\nThe escape character (\\) can also be used to insert other special characters in a string.\r\n\r\nThis is the list of special characters that can be added to a text string with the backslash sign:\r\n<table class="w3-table-all notranslate">\r\n<tbody>\r\n<tr>\r\n<th>Code</th>\r\n<th>Outputs</th>\r\n</tr>\r\n<tr>\r\n<td>\\''</td>\r\n<td>single quote</td>\r\n</tr>\r\n<tr>\r\n<td>\\"</td>\r\n<td>double quote</td>\r\n</tr>\r\n<tr>\r\n<td>\\\\</td>\r\n<td>backslash</td>\r\n</tr>\r\n<tr>\r\n<td>\\n</td>\r\n<td>new line</td>\r\n</tr>\r\n<tr>\r\n<td>\\r</td>\r\n<td>carriage return</td>\r\n</tr>\r\n<tr>\r\n<td>\\t</td>\r\n<td>tab</td>\r\n</tr>\r\n<tr>\r\n<td>\\b</td>\r\n<td>backspace</td>\r\n</tr>\r\n<tr>\r\n<td>\\f</td>\r\n<td>form feed</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n\r\n<hr />\r\n\r\n<h2>Breaking Long Code Lines</h2>\r\nFor best readability, programmers often like to avoid code lines longer than 80 characters.\r\n\r\nIf a JavaScript statement does not fit on one line, the best place to break it is after an operator:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate jsHigh">document.getElementById("demo").innerHTML =\r\n"Hello Dolly.";</div>\r\n</div>\r\n<div class="w3-example"></div>\r\nYou can also break up a code line <b>within a text string</b> with a single backslash:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate jsHigh">document.getElementById("demo").innerHTML = "Hello \\\r\nDolly!";</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n<table class="lamp">\r\n<tbody>\r\n<tr>\r\n<th><img src="http://www.w3schools.com/images/lamp.jpg" alt="Note" /></th>\r\n<td>The \\ method is not a ECMAScript (JavaScript) standard.\r\nSome browsers do not allow spaces behind the \\ character.</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\nThe safest (but a little slower) way to break a long string is to use string addition:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate jsHigh">document.getElementById("demo").innerHTML = "Hello" +\r\n"Dolly!";</div>\r\n</div>\r\n<div class="w3-example"></div>\r\nYou cannot break up a code line with a backslash:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate jsHigh">document.getElementById("demo").innerHTML = \\\r\n"Hello Dolly!";</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n\r\n<hr />\r\n\r\n<h2>Strings Can be Objects</h2>\r\nNormally, JavaScript strings are primitive values, created from literals: <strong>var firstName = "John"</strong>\r\n\r\nBut strings can also be defined as objects with the keyword new: <strong>var firstName = new String("John")</strong>\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate jsHigh">var x = "John";\r\nvar y = new String("John");\r\n\r\n// typeof x will return string\r\n// typeof y will return object</div>\r\n</div>\r\n<table class="lamp">\r\n<tbody>\r\n<tr>\r\n<th><img src="http://www.w3schools.com/images/lamp.jpg" alt="Note" /></th>\r\n<td>Don''t create strings as objects. It slows down execution speed.\r\nThe <strong>new</strong> keyword complicates the code. This can produce some unexpected results:</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\nWhen using the == equality operator, equal strings looks equal:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate jsHigh">var x = "John";\r\nvar y = new String("John");\r\n\r\n// (x == y) is true because x and y have equal values</div>\r\n</div>\r\n<div class="w3-example"></div>\r\nWhen using the === equality operator, equal strings are not equal, because the === operator expects equality in both type and value.\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate jsHigh">var x = "John";\r\nvar y = new String("John");\r\n\r\n// (x === y) is false because x and y have different types (string and object)</div>\r\n</div>\r\n<div class="w3-example"></div>\r\nOr even worse. Objects cannot be compared:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate jsHigh">var x = new String("John");\r\nvar y = new String("John");\r\n\r\n// (x == y) is false because x and y are different objects\r\n// (x == x) is true because both are the same object</div>\r\n</div>', 'JS Strings', '', 'inherit', 'closed', 'closed', '', '202-revision-v1', '', '', '2016-05-21 14:58:16', '2016-05-21 14:58:16', '', 202, 'http://localhost/invatacel/2016/05/21/202-revision-v1/', 0, 'revision', '', 0),
(225, 1, '2016-05-21 14:58:45', '2016-05-21 14:58:45', '<p class="intro">JavaScript has only one type of number.</p>\r\n<p class="intro">Numbers can be written with, or without, decimals.</p>\r\n\r\n\r\n<hr />\r\n\r\n<h2>JavaScript Numbers</h2>\r\nJavaScript numbers can be written with, or without decimals:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate jsHigh">var x = 34.00;    // A number with decimals\r\nvar y = 34;       // A number without decimals</div>\r\n</div>\r\nExtra large or extra small numbers can be written with scientific (exponent) notation:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate jsHigh">var x = 123e5;    // 12300000\r\nvar y = 123e-5;   // 0.00123</div>\r\n</div>\r\n\r\n<hr />\r\n\r\n<h2>JavaScript Numbers are Always 64-bit Floating Point</h2>\r\nUnlike many other programming languages, JavaScript does not define different types of numbers, like integers, short, long, floating-point etc.\r\n\r\nJavaScript numbers are always stored as double precision floating point numbers, following the international IEEE 754 standard.\r\n\r\nThis format stores numbers in 64 bits, where the number (the fraction) is stored in bits 0 to 51, the exponent in bits 52 to 62, and the sign in bit 63:\r\n<table class="w3-table-all">\r\n<tbody>\r\n<tr>\r\n<th>Value (aka Fraction/Mantissa)</th>\r\n<th>Exponent</th>\r\n<th>Sign</th>\r\n</tr>\r\n<tr>\r\n<td>52 bits (0 - 51)</td>\r\n<td>11 bits (52 - 62)</td>\r\n<td>1 bit (63)</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n\r\n<hr />\r\n\r\n<h2>Precision</h2>\r\nIntegers (numbers without a period or exponent notation) are considered accurate up to 15 digits.\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate jsHigh">var x = 999999999999999;   // x will be 999999999999999\r\nvar y = 9999999999999999;  // y will be 10000000000000000</div>\r\n</div>\r\n<div class="w3-example"></div>\r\nThe maximum number of decimals is 17, but floating point arithmetic is not always 100% accurate:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate jsHigh">var x = 0.2 + 0.1;         // x will be 0.30000000000000004</div>\r\n</div>\r\nTo solve the problem above, it helps to multiply and divide:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate jsHigh">var x = (0.2 * 10 + 0.1 * 10) / 10;       // x will be 0.3</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n\r\n<hr />\r\n\r\n<h2>Hexadecimal</h2>\r\nJavaScript interprets numeric constants as hexadecimal if they are preceded by 0x.\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate jsHigh">var x = 0xFF;            // x will be 255</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n<table class="lamp">\r\n<tbody>\r\n<tr>\r\n<th><img src="http://www.w3schools.com/images/lamp.jpg" alt="Note" /></th>\r\n<td>Never write a number with a leading zero (like 07).\r\nSome JavaScript versions interpret numbers as octal if they are written with a leading zero.</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\nBy default, Javascript displays numbers as base 10 decimals.\r\n\r\nBut you can use the toString() method to output numbers as base 16 (hex), base 8 (octal), or base 2 (binary).\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate jsHigh">var myNumber = 128;\r\nmyNumber.toString(16);     // returns 80\r\nmyNumber.toString(8);      // returns 200\r\nmyNumber.toString(2);      // returns 10000000</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n\r\n<hr />\r\n\r\n<h2>Infinity</h2>\r\nInfinity (or -Infinity) is the value JavaScript will return if you calculate a number outside the largest possible number.\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate jsHigh">var myNumber = 2;\r\nwhile (myNumber != Infinity) {          // Execute until Infinity\r\nmyNumber = myNumber * myNumber;\r\n}</div>\r\n</div>\r\nDivision by 0 (zero) also generates Infinity:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate jsHigh">var x =  2 / 0;         // x will be Infinity\r\nvar y = -2 / 0;          // y will be -Infinity</div>\r\n</div>\r\n<div class="w3-example"></div>\r\nInfinity is a number: typeOf Infinity returns number.\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate jsHigh">typeofInfinity;        // returns "number"</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n\r\n<hr />\r\n\r\n<h2>NaN - Not a Number</h2>\r\nNaN is a JavaScript reserved word indicating that a value is not a number.\r\n\r\nTrying to do arithmetic with a non-numeric string will result in NaN (Not a Number):\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate jsHigh">var x = 100 / "Apple"; // x will be NaN (Not a Number)</div>\r\n</div>\r\nHowever, if the string contains a numeric value , the result will be a number:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate jsHigh">var x = 100 / "10";    // x will be 10</div>\r\n</div>\r\n<div class="w3-example"></div>\r\nYou can use the global JavaScript function isNaN() to find out if a value is a number.\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate jsHigh">var x = 100 / "Apple";\r\nisNaN(x);               // returns true because x is Not a Number</div>\r\n</div>\r\n<div class="w3-example"></div>\r\nWatch out for NaN. If you use NaN in a mathematical operation, the result will also be NaN:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate jsHigh">var x = NaN;\r\nvar y = 5;\r\nvar z = x + y;         // z will be NaN</div>\r\n</div>\r\n<div class="w3-example"></div>\r\nOr the result might be a concatenation:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate jsHigh">var x = NaN;\r\nvar y = "5";\r\nvar z = x + y;         // z will be NaN5</div>\r\n</div>\r\n<div class="w3-example"></div>\r\nNaN is a number, and typeof NaN returns number:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate jsHigh">typeof NaN;             // returns "number"</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n\r\n<hr />\r\n\r\n<h2>Numbers Can be Objects</h2>\r\nNormally JavaScript numbers are primitive values created from literals: <strong>var x = 123</strong>\r\n\r\nBut numbers can also be defined as objects with the keyword new: <strong>var y = new Number(123)</strong>\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate jsHigh">var x = 123;\r\nvar y = new Number(123);\r\n\r\n// typeof x returns number\r\n// typeof y returns object</div>\r\n</div>\r\n<table class="lamp">\r\n<tbody>\r\n<tr>\r\n<th><img src="http://www.w3schools.com/images/lamp.jpg" alt="Note" /></th>\r\n<td>Don''t create Number objects. It slows down execution speed.\r\nThe <strong>new</strong> keyword complicates the code. This can produce some unexpected results:</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\nWhen using the == equality operator, equal numbers looks equal:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate jsHigh">var x = 500;\r\nvar y = new Number(500);\r\n\r\n// (x == y) is true because x and y have equal values</div>\r\n</div>\r\n<div class="w3-example"></div>\r\nWhen using the === equality operator, equal numbers are not equal, because the === operator expects equality in both type and value.\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate jsHigh">var x = 500;\r\nvar y = new Number(500);\r\n\r\n// (x === y) is false because x and y have different types</div>\r\n</div>\r\n<div class="w3-example"></div>\r\nOr even worse. Objects cannot be compared:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate jsHigh">var x = new Number(500);\r\nvar y = new Number(500);\r\n\r\n// (x == y) is false because objects cannot be compared</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n<table class="lamp">\r\n<tbody>\r\n<tr>\r\n<th><img src="http://www.w3schools.com/images/lamp.jpg" alt="Note" /></th>\r\n<td>JavaScript objects cannot be compared.</td>\r\n</tr>\r\n</tbody>\r\n</table>', 'JS Numbers', '', 'inherit', 'closed', 'closed', '', '203-revision-v1', '', '', '2016-05-21 14:58:45', '2016-05-21 14:58:45', '', 203, 'http://localhost/invatacel/2016/05/21/203-revision-v1/', 0, 'revision', '', 0),
(226, 1, '2016-05-21 14:59:06', '2016-05-21 14:59:06', '<p class="intro">The Math object allows you to perform mathematical tasks on numbers.</p>\r\n\r\n\r\n<hr />\r\n\r\n<h2>The Math Object</h2>\r\nThe Math object allows you to perform mathematical tasks.\r\n\r\nThe Math object includes several mathematical methods.\r\n\r\n<hr />\r\n\r\nOne common use of the Math object is to create a random number:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate jsHigh">Math.random();       // returns a random number</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n<table class="lamp">\r\n<tbody>\r\n<tr>\r\n<th><img src="http://www.w3schools.com/images/lamp.jpg" alt="Note" /></th>\r\n<td> Math has no constructor. No methods have to create a Math object first.</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n\r\n<hr />\r\n\r\n<h2>Math.min() and Math.max()</h2>\r\nMath.min() and Math.max() can be used to find the lowest or highest value in a list of arguments:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate jsHigh">Math.min(0, 150, 30, 20, -8, -200);      // returns -200</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate jsHigh">Math.max(0, 150, 30, 20, -8, -200);      // returns 150</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n\r\n<hr />\r\n\r\n<h2>Math.random()</h2>\r\nMath.random() returns a random number between 0 (inclusive),  and 1 (exclusive):\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate jsHigh">Math.random();              // returns a random number</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n<table class="lamp">\r\n<tbody>\r\n<tr>\r\n<th><img src="http://www.w3schools.com/images/lamp.jpg" alt="Note" /></th>\r\n<td>Math.random() always returns a number lower than 1.</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n\r\n<hr />\r\n\r\n<h2>Math.round()</h2>\r\nMath.round() rounds a number to the nearest integer:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate jsHigh">Math.round(4.7);            // returns 5\r\nMath.round(4.4);            // returns 4</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n\r\n<hr />\r\n\r\n<h2>Math.ceil()</h2>\r\nMath.ceil() rounds a number <strong>up</strong> to the nearest integer:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate jsHigh">Math.ceil(4.4);             // returns 5</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n\r\n<hr />\r\n\r\n<h2>Math.floor()</h2>\r\nMath.floor() rounds a number <strong>down</strong> to the nearest integer:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate jsHigh">Math.floor(4.7);            // returns 4</div>\r\n</div>\r\n<div class="w3-example"></div>\r\nMath.floor() and Math.random() can be used together to return a random number between 0 and 10:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate jsHigh">Math.floor(Math.random() * 11);   // returns a random number between 0 and 10</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n\r\n<hr />\r\n\r\n<h2>Math Constants</h2>\r\nJavaScript provides 8 mathematical constants that can be accessed with the Math object:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate jsHigh">Math.E          // returns Euler''s number\r\nMath.PI         // returns PI\r\nMath.SQRT2      // returns the square root of 2\r\nMath.SQRT1_2    // returns the square root of 1/2\r\nMath.LN2        // returns the natural logarithm of 2\r\nMath.LN10       // returns the natural logarithm of 10\r\nMath.LOG2E      // returns base 2 logarithm of E\r\nMath.LOG10E     // returns base 10 logarithm of E</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n\r\n<hr />\r\n\r\n<h2>Math Object Methods</h2>\r\n<table class="w3-table-all notranslate">\r\n<tbody>\r\n<tr>\r\n<th>Method</th>\r\n<th>Description</th>\r\n</tr>\r\n<tr>\r\n<td>abs(x)</td>\r\n<td>Returns the absolute value of x</td>\r\n</tr>\r\n<tr>\r\n<td>acos(x)</td>\r\n<td>Returns the arccosine of x, in radians</td>\r\n</tr>\r\n<tr>\r\n<td>asin(x)</td>\r\n<td>Returns the arcsine of x, in radians</td>\r\n</tr>\r\n<tr>\r\n<td>atan(x)</td>\r\n<td>Returns the arctangent of x as a numeric value between -PI/2 and PI/2 radians</td>\r\n</tr>\r\n<tr>\r\n<td>atan2(y,x)</td>\r\n<td>Returns the arctangent of the quotient of its arguments</td>\r\n</tr>\r\n<tr>\r\n<td>ceil(x)</td>\r\n<td>Returns x, rounded upwards to the nearest integer</td>\r\n</tr>\r\n<tr>\r\n<td>cos(x)</td>\r\n<td>Returns the cosine of x (x is in radians)</td>\r\n</tr>\r\n<tr>\r\n<td>exp(x)</td>\r\n<td>Returns the value of E<sup>x</sup></td>\r\n</tr>\r\n<tr>\r\n<td>floor(x)</td>\r\n<td>Returns x, rounded downwards to the nearest integer</td>\r\n</tr>\r\n<tr>\r\n<td>log(x)</td>\r\n<td>Returns the natural logarithm (base E) of x</td>\r\n</tr>\r\n<tr>\r\n<td>max(x,y,z,...,n)</td>\r\n<td>Returns the number with the highest value</td>\r\n</tr>\r\n<tr>\r\n<td>min(x,y,z,...,n)</td>\r\n<td>Returns the number with the lowest value</td>\r\n</tr>\r\n<tr>\r\n<td>pow(x,y)</td>\r\n<td>Returns the value of x to the power of y</td>\r\n</tr>\r\n<tr>\r\n<td>random()</td>\r\n<td>Returns a random number between 0 and 1</td>\r\n</tr>\r\n<tr>\r\n<td>round(x)</td>\r\n<td>Rounds x to the nearest integer</td>\r\n</tr>\r\n<tr>\r\n<td>sin(x)</td>\r\n<td>Returns the sine of x (x is in radians)</td>\r\n</tr>\r\n<tr>\r\n<td>sqrt(x)</td>\r\n<td>Returns the square root of x</td>\r\n</tr>\r\n<tr>\r\n<td>tan(x)</td>\r\n<td>Returns the tangent of an angle</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n\r\n<hr />\r\n\r\n<h2>Complete Math Reference</h2>\r\nFor a complete reference, go to our <a href="http://www.w3schools.com/jsref/jsref_obj_math.asp">complete Math object reference</a>.\r\n\r\nThe reference contains descriptions and examples of all Math properties and methods.', 'JS Math', '', 'inherit', 'closed', 'closed', '', '204-revision-v1', '', '', '2016-05-21 14:59:06', '2016-05-21 14:59:06', '', 204, 'http://localhost/invatacel/2016/05/21/204-revision-v1/', 0, 'revision', '', 0),
(227, 1, '2016-05-21 14:59:33', '2016-05-21 14:59:33', '<p class="intro">The Date object lets you work with dates (years, months, days, hours, minutes, seconds, and milliseconds)</p>\r\n\r\n\r\n<hr />\r\n\r\n<h2>JavaScript Date Formats</h2>\r\nA JavaScript date can be written as a string:\r\n\r\n<strong>Sat May 21 2016 17:59:08 GMT+0300 (GTB Standard Time)</strong>\r\n\r\nor as a number:\r\n\r\n<strong>1463842748712</strong>\r\n\r\nDates written as numbers, specifies the number of milliseconds since January 1, 1970, 00:00:00.\r\n\r\n<hr />\r\n\r\n<h2>Displaying Dates</h2>\r\nIn this tutorial we use a script to display dates inside a &lt;p&gt; element with id="demo":\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate htmlHigh">&lt;p id="demo"&gt;&lt;/p&gt;\r\n\r\n&lt;script&gt;\r\ndocument.getElementById("demo").innerHTML = Date();\r\n&lt;/script&gt;</div>\r\n</div>\r\n<div class="w3-example"></div>\r\nThe script above says: assign the value of Date() to the content (innerHTML) of the element with id="demo".\r\n<table class="lamp">\r\n<tbody>\r\n<tr>\r\n<th><img src="http://www.w3schools.com/images/lamp.jpg" alt="Note" /></th>\r\n<td>You will learn how to display a date, in a more readable format, at the bottom of this page.</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n\r\n<hr />\r\n\r\n<h2>Creating Date Objects</h2>\r\nThe Date object lets us work with dates.\r\n\r\nA date consists of a year, a month, a day, an hour, a minute, a second, and milliseconds.\r\n\r\nDate objects are created with the <strong>new Date()</strong> constructor.\r\n\r\nThere are <strong>4 ways</strong> of initiating a date:\r\n<div class="w3-example">\r\n<div class="w3-code notranslate jsHigh">new Date()\r\nnew Date(milliseconds)\r\nnew Date(dateString)\r\nnew Date(year, month, day, hours, minutes, seconds, milliseconds)</div>\r\n</div>\r\nUsing new Date(), creates a new date object with the <strong>current date and time</strong>:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate htmlHigh">&lt;script&gt;\r\nvar d = new Date();\r\ndocument.getElementById("demo").innerHTML = d;\r\n&lt;/script&gt;</div>\r\n</div>\r\n<div class="w3-example"></div>\r\nUsing new Date(<strong>date string</strong>), creates a new date object from the <strong>specified date and time</strong>:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate htmlHigh">&lt;script&gt;\r\nvar d = new Date("October 13, 2014 11:13:00");\r\ndocument.getElementById("demo").innerHTML = d;\r\n&lt;/script&gt;</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n<table class="lamp">\r\n<tbody>\r\n<tr>\r\n<th><img src="http://www.w3schools.com/images/lamp.jpg" alt="Note" /></th>\r\n<td>Valid date strings (date formats) are described in the next chapter.</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\nUsing new Date(<strong>number</strong>), creates a new date object as<strong> zero time plus the number</strong>.\r\n\r\nZero time is 01 January 1970 00:00:00 UTC. The number is specified in milliseconds:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate htmlHigh">&lt;script&gt;\r\nvar d = new Date(86400000);\r\ndocument.getElementById("demo").innerHTML = d;\r\n&lt;/script&gt;</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n<table class="lamp">\r\n<tbody>\r\n<tr>\r\n<th><img src="http://www.w3schools.com/images/lamp.jpg" alt="Note" /></th>\r\n<td>JavaScript dates are calculated in milliseconds from 01 January, 1970 00:00:00 Universal Time (UTC). One day contains 86,400,000 millisecond.</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\nUsing new Date(<strong>7 numbers</strong>), creates a new date object with the <strong>specified date and time</strong>:\r\n\r\nThe 7 numbers specify the year, month, day, hour, minute, second, and millisecond, in that order:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate htmlHigh">&lt;script&gt;\r\nvar d = new Date(99,5,24,11,33,30,0);\r\ndocument.getElementById("demo").innerHTML = d;\r\n&lt;/script&gt;</div>\r\n</div>\r\n<div class="w3-example"></div>\r\nVariants of the example above let us omit any of the last 4 parameters:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate htmlHigh">&lt;script&gt;\r\nvar d = new Date(99,5,24);\r\ndocument.getElementById("demo").innerHTML = d;\r\n&lt;/script&gt;</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n<table class="lamp">\r\n<tbody>\r\n<tr>\r\n<th><img src="http://www.w3schools.com/images/lamp.jpg" alt="Note" /></th>\r\n<td>JavaScript counts months from 0 to 11. January is 0. December is 11.</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n\r\n<hr />\r\n\r\n<h2>Date Methods</h2>\r\nWhen a Date object is created, a number of <strong>methods</strong> allow you to operate on it.\r\n\r\nDate methods allow you to get and set the year, month, day, hour, minute, second, and millisecond of objects, using either local time or UTC (universal, or GMT) time.\r\n<table class="lamp">\r\n<tbody>\r\n<tr>\r\n<th><img src="http://www.w3schools.com/images/lamp.jpg" alt="Note" /></th>\r\n<td>Date methods are covered in a later chapter.</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n\r\n<hr />\r\n\r\n<h2>Displaying Dates</h2>\r\nWhen you display a date object in HTML, it is automatically converted to a string, with the <strong>toString()</strong> method.\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate htmlHigh">&lt;p id="demo"&gt;&lt;/p&gt;\r\n\r\n&lt;script&gt;\r\nd = new Date();\r\ndocument.getElementById("demo").innerHTML = d;\r\n&lt;/script&gt;</div>\r\nIs the same as:\r\n<div class="w3-code notranslate htmlHigh">&lt;p id="demo"&gt;&lt;/p&gt;\r\n\r\n&lt;script&gt;\r\nd = new Date();\r\ndocument.getElementById("demo").innerHTML = d.toString();\r\n&lt;/script&gt;</div>\r\n</div>\r\n<div class="w3-example"></div>\r\nThe <strong>toUTCString()</strong> method converts a date to a UTC string (a date display standard).\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate htmlHigh">&lt;script&gt;\r\nvar d = new Date();\r\ndocument.getElementById("demo").innerHTML = d.toUTCString();\r\n&lt;/script&gt;</div>\r\n</div>\r\n<div class="w3-example"></div>\r\nThe <strong>toDateString()</strong> method converts a date to a more readable format:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate htmlHigh">&lt;script&gt;\r\nvar d = new Date();\r\ndocument.getElementById("demo").innerHTML = d.toDateString();\r\n&lt;/script&gt;</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n<table class="lamp">\r\n<tbody>\r\n<tr>\r\n<th><img src="http://www.w3schools.com/images/lamp.jpg" alt="Note" /></th>\r\n<td>Date objects are static, not dynamic. The computer time is ticking, but date objects, once created, are not.</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n\r\n<hr />\r\n\r\n<h2>Time Zones</h2>\r\nWhen setting a date, without specifying the time zone, JavaScript will use the browser''s time zone.\r\n\r\nWhen getting a date, without specifying the time zone, the result is converted to the browser''s time zone.\r\n\r\nIn other words: If a date/time is created in GMT (Greenwich Mean Time), the date/time will be converted to CDT (Central US Daylight Time) if a user browses from central US.\r\n<table class="lamp">\r\n<tbody>\r\n<tr>\r\n<th><img src="http://www.w3schools.com/images/lamp.jpg" alt="Note" /></th>\r\n<td>Read more about time zones in the next chapters.</td>\r\n</tr>\r\n</tbody>\r\n</table>', 'JS Dates', '', 'inherit', 'closed', 'closed', '', '205-revision-v1', '', '', '2016-05-21 14:59:33', '2016-05-21 14:59:33', '', 205, 'http://localhost/invatacel/2016/05/21/205-revision-v1/', 0, 'revision', '', 0);
INSERT INTO `wp_posts` (`ID`, `post_author`, `post_date`, `post_date_gmt`, `post_content`, `post_title`, `post_excerpt`, `post_status`, `comment_status`, `ping_status`, `post_password`, `post_name`, `to_ping`, `pinged`, `post_modified`, `post_modified_gmt`, `post_content_filtered`, `post_parent`, `guid`, `menu_order`, `post_type`, `post_mime_type`, `comment_count`) VALUES
(228, 1, '2016-05-21 14:59:56', '2016-05-21 14:59:56', '<p class="intro">JavaScript arrays are used to store multiple values in a single variable.</p>\r\n\r\n\r\n<hr />\r\n\r\n<h2>Displaying Arrays</h2>\r\nIn this tutorial we will use a script to display arrays inside a &lt;p&gt; element with id="demo":\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate htmlHigh">&lt;p id="demo"&gt;&lt;/p&gt;\r\n\r\n&lt;script&gt;\r\nvar cars = ["Saab", "Volvo", "BMW"];\r\ndocument.getElementById("demo").innerHTML = cars;\r\n&lt;/script&gt;</div>\r\n</div>\r\nThe first line (in the script) creates an array named cars.\r\n\r\nThe second line "finds" the element with id="demo", and "displays" the array in the "innerHTML" of it.\r\n\r\n<hr />\r\n\r\n<h2>Try it Yourself</h2>\r\nCreate an array, and assign values to it:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate jsHigh">var cars = ["Saab", "Volvo", "BMW"];</div>\r\n</div>\r\n<div class="w3-example"></div>\r\nSpaces and line breaks are not important. A declaration can span multiple lines:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate jsHigh">var cars = [\r\n"Saab",\r\n"Volvo",\r\n"BMW"\r\n];</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n<table class="lamp">\r\n<tbody>\r\n<tr>\r\n<th><img src="http://www.w3schools.com/images/lamp.jpg" alt="Note" /></th>\r\n<td>Never put a comma after the last element (like "BMW",). The effect is inconsistent across browsers.</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n\r\n<hr />\r\n\r\n<h2>What is an Array?</h2>\r\nAn array is a special variable, which can hold more than one value at a time.\r\n\r\nIf you have a list of items (a list of car names, for example), storing the cars in single variables could look like this:\r\n<div class="w3-code w3-border notranslate">\r\n<div>var car1 = "Saab";\r\nvar car2 = "Volvo";\r\nvar car3 = "BMW";</div>\r\n</div>\r\nHowever, what if you want to loop through the cars and find a specific one? And what if you had not 3 cars, but 300?\r\n\r\nThe solution is an array!\r\n\r\nAn array can hold many values under a single name, and you can access the values by referring to an index number.\r\n\r\n<hr />\r\n\r\n<h2>Creating an Array</h2>\r\nUsing an array literal is the easiest way to create a JavaScript Array.\r\n\r\nSyntax:\r\n<div class="w3-code w3-border notranslate">\r\n<div>var <em>array-name</em> = [<em>item1</em>, <em>item2</em>, ...];</div>\r\n</div>\r\nExample:\r\n<div class="w3-code w3-border notranslate">\r\n<div>var cars = ["Saab", "Volvo", "BMW"];</div>\r\n</div>\r\n\r\n<hr />\r\n\r\n<h2>Using the JavaScript Keyword new</h2>\r\nThe following example also creates an Array, and assigns values to it:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate jsHigh">var cars = new Array("Saab", "Volvo", "BMW");</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n<table class="lamp">\r\n<tbody>\r\n<tr>\r\n<th><img src="http://www.w3schools.com/images/lamp.jpg" alt="Note" /></th>\r\n<td>The two examples above do exactly the same. There is no need to use new Array().\r\nFor simplicity, readability and execution speed, use the first one (the array literal method).</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n\r\n<hr />\r\n\r\n<h2>Access the Elements of an Array</h2>\r\nYou refer to an array element by referring to the <b>index number</b>.\r\n\r\nThis statement accesses the value of the first element in cars:\r\n<div class="w3-code w3-border notranslate">\r\n<div>var name = cars[0];</div>\r\n</div>\r\nThis statement modifies the first element in cars:\r\n<div class="w3-code w3-border notranslate">\r\n<div>cars[0] = "Opel";</div>\r\n</div>\r\n<table class="lamp">\r\n<tbody>\r\n<tr>\r\n<th><img src="http://www.w3schools.com/images/lamp.jpg" alt="Note" /></th>\r\n<td>[0] is the first element in an array. [1] is the second. Array indexes start with 0.</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n\r\n<hr />\r\n\r\n<h2>You Can Have Different Objects in One Array</h2>\r\nJavaScript variables can be objects. Arrays are special kinds of objects.\r\n\r\nBecause of this, you can have variables of different types in the same Array.\r\n\r\nYou can have objects in an Array. You can have functions in an Array. You can have arrays in an Array:\r\n<div class="w3-code w3-border notranslate">\r\n<div>myArray[0] = Date.now;\r\nmyArray[1] = myFunction;\r\nmyArray[2] = myCars;</div>\r\n</div>\r\n\r\n<hr />\r\n\r\n<h2>Arrays are Objects</h2>\r\nArrays are a special type of objects. The <strong>typeof</strong> operator in JavaScript returns "object" for arrays.\r\n\r\nBut, JavaScript arrays are best described as arrays.\r\n\r\nArrays use <strong>numbers</strong> to access its "elements". In this example, person[0] returns John:\r\n<div class="w3-example">\r\n<h3>Array:</h3>\r\n<div class="w3-code notranslate jsHigh">var person = ["John", "Doe", 46];</div>\r\n</div>\r\n<div class="w3-example"></div>\r\nObjects use <strong>names</strong> to access its "members". In this example, person.firstName returns John:\r\n<div class="w3-example">\r\n<h3>Object:</h3>\r\n<div class="w3-code notranslate jsHigh">var person = {firstName:"John", lastName:"Doe", age:46};</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n\r\n<hr />\r\n\r\n<h2>Array Properties and Methods</h2>\r\nThe real strength of JavaScript arrays are the built-in array properties and methods:\r\n<div class="w3-example">\r\n<h3>Examples</h3>\r\n<div class="w3-code notranslate jsHigh">var x = cars.length;        // The length property returns the number of elements in cars\r\nvar y = cars.sort();         // The sort() method sort cars in alphabetical order</div>\r\n</div>\r\nArray methods are covered in the next chapter.\r\n\r\n<hr />\r\n\r\n<h2>The length Property</h2>\r\nThe <strong>length</strong> property of an array returns the length of an array (the number of array elements).\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate jsHigh">var fruits = ["Banana", "Orange", "Apple", "Mango"];\r\nfruits.length;                       // the length of fruits is 4</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n<table class="lamp">\r\n<tbody>\r\n<tr>\r\n<th><img src="http://www.w3schools.com/images/lamp.jpg" alt="Note" /></th>\r\n<td>The length property is always one more than the highest array index.</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n\r\n<hr />\r\n\r\n<h2>Adding Array Elements</h2>\r\nThe easiest way to add a new element to an array is using the push method:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate jsHigh">var fruits = ["Banana", "Orange", "Apple", "Mango"];\r\nfruits.push("Lemon");                // adds a new element (Lemon) to fruits</div>\r\n</div>\r\n<div class="w3-example"></div>\r\nNew element can also be added to an array using the length property:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate jsHigh">var fruits = ["Banana", "Orange", "Apple", "Mango"];\r\nfruits[fruits.length] = "Lemon";     // adds a new element (Lemon) to fruits</div>\r\n</div>\r\n<div class="w3-example"></div>\r\nAdding elements with high indexes can create undefined "holes" in an array:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate jsHigh">var fruits = ["Banana", "Orange", "Apple", "Mango"];\r\nfruits[10] = "Lemon";                // adds a new element (Lemon) to fruits</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n\r\n<hr />\r\n\r\n<h2>Looping Array Elements</h2>\r\nThe best way to loop through an array, is using a "for" loop:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate jsHigh">var fruits, text, fLen, i;\r\n\r\nfruits = ["Banana", "Orange", "Apple", "Mango"];\r\nfLen = fruits.length;\r\ntext = "&lt;ul&gt;";\r\nfor (i = 0; i &lt; fLen; i++) {\r\ntext += "&lt;li&gt;" + fruits[i] + "&lt;/li&gt;";\r\n}</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n\r\n<hr />\r\n\r\n<h2>Associative Arrays</h2>\r\nMany programming languages support arrays with named indexes.\r\n\r\nArrays with named indexes are called associative arrays (or hashes).\r\n\r\nJavaScript does <strong>not</strong> support arrays with named indexes.\r\n\r\nIn JavaScript, <strong>arrays</strong> always use <strong>numbered indexes</strong>.\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate jsHigh">var person = [];\r\nperson[0] = "John";\r\nperson[1] = "Doe";\r\nperson[2] = 46;\r\nvar x = person.length;         // person.length will return 3\r\nvar y = person[0];             // person[0] will return "John"</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n<table class="lamp">\r\n<tbody>\r\n<tr>\r\n<th><img src="http://www.w3schools.com/images/lamp.jpg" alt="Note" /></th>\r\n<td><strong>WARNING !!</strong>\r\nIf you use a named index, JavaScript will redefine the array to a standard object.\r\nAfter that, <strong>all array methods and properties will produce incorrect results</strong>.</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n<div class="w3-example">\r\n<h3> Example:</h3>\r\n<div class="w3-code notranslate jsHigh">var person = [];\r\nperson["firstName"] = "John";\r\nperson["lastName"] = "Doe";\r\nperson["age"] = 46;\r\nvar x = person.length;         // person.length will return 0\r\nvar y = person[0];             // person[0] will return undefined</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n\r\n<hr />\r\n\r\n<h2>The Difference Between Arrays and Objects</h2>\r\nIn JavaScript, <strong>arrays</strong> use <strong>numbered indexes</strong>.\r\n\r\nIn JavaScript, <strong>objects</strong> use <strong>named indexes</strong>.\r\n<table class="lamp">\r\n<tbody>\r\n<tr>\r\n<th><img src="http://www.w3schools.com/images/lamp.jpg" alt="Note" /></th>\r\n<td>Arrays are a special kind of objects, with numbered indexes.</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n\r\n<hr />\r\n\r\n<h2>When to Use Arrays. When to use Objects.</h2>\r\n<ul>\r\n 	<li>JavaScript does not support associative arrays.</li>\r\n 	<li>You should use <strong>objects</strong> when you want the element names to be <strong>strings (text)</strong>.</li>\r\n 	<li>You should use <strong>arrays</strong> when you want the element names to be <strong>numbers</strong>.</li>\r\n</ul>\r\n\r\n<hr />\r\n\r\n<h2>Avoid new Array()</h2>\r\nThere is no need to use the JavaScript''s built-in array constructor <strong>new</strong> Array().\r\n\r\n<strong>Use [] instead.</strong>\r\n\r\nThese two different statements both create a new empty array named points:\r\n<div class="w3-example">\r\n<div class="w3-code notranslate jsHigh">var points = new Array();         // Bad\r\nvar points = [];                  // Good</div>\r\n</div>\r\nThese two different statements both create a new array containing 6 numbers:\r\n<div class="w3-example">\r\n<div class="w3-code notranslate jsHigh">var points = new Array(40, 100, 1, 5, 25, 10)  // Bad\r\nvar points = [40, 100, 1, 5, 25, 10];          // Good</div>\r\n</div>\r\n<div class="w3-example"></div>\r\nThe <strong>new</strong> keyword only complicates the code. It can also produce some unexpected results:\r\n<div class="w3-example">\r\n<div class="w3-code notranslate jsHigh">var points = new Array(40, 100);  // Creates an array with two elements (40 and 100)</div>\r\n</div>\r\nWhat if I remove one of the elements?\r\n<div class="w3-example">\r\n<div class="w3-code notranslate jsHigh">var points = new Array(40);       // Creates an array with 40 undefined elements !!!!!</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n\r\n<hr />\r\n\r\n<h2>How to Recognize an Array</h2>\r\nA common question is: How do I know if a variable is an array?\r\n\r\nThe problem is that the JavaScript operator <strong>typeof</strong> returns "object":\r\n<div class="w3-example">\r\n<div class="w3-code notranslate jsHigh">var fruits = ["Banana", "Orange", "Apple", "Mango"];\r\n\r\ntypeof fruits;             // returns object</div>\r\n</div>\r\n<div class="w3-example"></div>\r\nThe typeof operator returns object because a JavaScript array is an object.\r\n<h3>Solution 1:</h3>\r\nTo solve this problem ECMAScript 5 defines a new method <strong>Array.isArray()</strong>:\r\n<div class="w3-example">\r\n<div class="w3-code notranslate jsHigh">Array.isArray(fruits);     // returns true</div>\r\n</div>\r\n<div class="w3-example"></div>\r\nThe problem with this solution is that ECMAScript 5 is <strong>not supported in older browsers</strong>.\r\n<h3>Solution 2:</h3>\r\nTo solve this problem you can create your own isArray() function:\r\n<div class="w3-example">\r\n<div class="w3-code notranslate jsHigh">function isArray(x) {\r\nreturn x.constructor.toString().indexOf("Array") &gt; -1;\r\n}</div>\r\n</div>\r\n<div class="w3-example"></div>\r\nThe function above always returns true if the argument is an array.\r\n\r\nOr more precisely: it returns true if the object prototype contains the word "Array".\r\n<h3>Solution 3:</h3>\r\nThe <strong>instanceof</strong> operator returns true if an object is created by a given constructor:\r\n<div class="w3-example">\r\n<div class="w3-code notranslate jsHigh">var fruits = ["Banana", "Orange", "Apple", "Mango"];\r\n\r\nfruits instanceof Array     // returns true</div>\r\n</div>', 'JS Array', '', 'inherit', 'closed', 'closed', '', '206-revision-v1', '', '', '2016-05-21 14:59:56', '2016-05-21 14:59:56', '', 206, 'http://localhost/invatacel/2016/05/21/206-revision-v1/', 0, 'revision', '', 0),
(229, 1, '2016-05-21 15:00:06', '2016-05-21 15:00:06', '<p class="intro">JavaScript arrays are used to store multiple values in a single variable.</p>\r\n\r\n\r\n<hr />\r\n\r\n<h2>Displaying Arrays</h2>\r\nIn this tutorial we will use a script to display arrays inside a &lt;p&gt; element with id="demo":\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate htmlHigh">\r\n\r\n&lt;p id="demo"&gt;&lt;/p&gt;\r\n\r\n&lt;script&gt;\r\nvar cars = ["Saab", "Volvo", "BMW"];\r\ndocument.getElementById("demo").innerHTML = cars;\r\n&lt;/script&gt;\r\n\r\n</div>\r\n</div>\r\nThe first line (in the script) creates an array named cars.\r\n\r\nThe second line "finds" the element with id="demo", and "displays" the array in the "innerHTML" of it.\r\n\r\n<hr />\r\n\r\n<h2>Try it Yourself</h2>\r\nCreate an array, and assign values to it:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate jsHigh">var cars = ["Saab", "Volvo", "BMW"];</div>\r\n</div>\r\n<div class="w3-example"></div>\r\nSpaces and line breaks are not important. A declaration can span multiple lines:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate jsHigh">var cars = [\r\n"Saab",\r\n"Volvo",\r\n"BMW"\r\n];</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n<table class="lamp">\r\n<tbody>\r\n<tr>\r\n<th><img src="http://www.w3schools.com/images/lamp.jpg" alt="Note" /></th>\r\n<td>Never put a comma after the last element (like "BMW",). The effect is inconsistent across browsers.</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n\r\n<hr />\r\n\r\n<h2>What is an Array?</h2>\r\nAn array is a special variable, which can hold more than one value at a time.\r\n\r\nIf you have a list of items (a list of car names, for example), storing the cars in single variables could look like this:\r\n<div class="w3-code w3-border notranslate">\r\n<div>var car1 = "Saab";\r\nvar car2 = "Volvo";\r\nvar car3 = "BMW";</div>\r\n</div>\r\nHowever, what if you want to loop through the cars and find a specific one? And what if you had not 3 cars, but 300?\r\n\r\nThe solution is an array!\r\n\r\nAn array can hold many values under a single name, and you can access the values by referring to an index number.\r\n\r\n<hr />\r\n\r\n<h2>Creating an Array</h2>\r\nUsing an array literal is the easiest way to create a JavaScript Array.\r\n\r\nSyntax:\r\n<div class="w3-code w3-border notranslate">\r\n<div>var <em>array-name</em> = [<em>item1</em>, <em>item2</em>, ...];</div>\r\n</div>\r\nExample:\r\n<div class="w3-code w3-border notranslate">\r\n<div>var cars = ["Saab", "Volvo", "BMW"];</div>\r\n</div>\r\n\r\n<hr />\r\n\r\n<h2>Using the JavaScript Keyword new</h2>\r\nThe following example also creates an Array, and assigns values to it:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate jsHigh">var cars = new Array("Saab", "Volvo", "BMW");</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n<table class="lamp">\r\n<tbody>\r\n<tr>\r\n<th><img src="http://www.w3schools.com/images/lamp.jpg" alt="Note" /></th>\r\n<td>The two examples above do exactly the same. There is no need to use new Array().\r\nFor simplicity, readability and execution speed, use the first one (the array literal method).</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n\r\n<hr />\r\n\r\n<h2>Access the Elements of an Array</h2>\r\nYou refer to an array element by referring to the <b>index number</b>.\r\n\r\nThis statement accesses the value of the first element in cars:\r\n<div class="w3-code w3-border notranslate">\r\n<div>var name = cars[0];</div>\r\n</div>\r\nThis statement modifies the first element in cars:\r\n<div class="w3-code w3-border notranslate">\r\n<div>cars[0] = "Opel";</div>\r\n</div>\r\n<table class="lamp">\r\n<tbody>\r\n<tr>\r\n<th><img src="http://www.w3schools.com/images/lamp.jpg" alt="Note" /></th>\r\n<td>[0] is the first element in an array. [1] is the second. Array indexes start with 0.</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n\r\n<hr />\r\n\r\n<h2>You Can Have Different Objects in One Array</h2>\r\nJavaScript variables can be objects. Arrays are special kinds of objects.\r\n\r\nBecause of this, you can have variables of different types in the same Array.\r\n\r\nYou can have objects in an Array. You can have functions in an Array. You can have arrays in an Array:\r\n<div class="w3-code w3-border notranslate">\r\n<div>myArray[0] = Date.now;\r\nmyArray[1] = myFunction;\r\nmyArray[2] = myCars;</div>\r\n</div>\r\n\r\n<hr />\r\n\r\n<h2>Arrays are Objects</h2>\r\nArrays are a special type of objects. The <strong>typeof</strong> operator in JavaScript returns "object" for arrays.\r\n\r\nBut, JavaScript arrays are best described as arrays.\r\n\r\nArrays use <strong>numbers</strong> to access its "elements". In this example, person[0] returns John:\r\n<div class="w3-example">\r\n<h3>Array:</h3>\r\n<div class="w3-code notranslate jsHigh">var person = ["John", "Doe", 46];</div>\r\n</div>\r\n<div class="w3-example"></div>\r\nObjects use <strong>names</strong> to access its "members". In this example, person.firstName returns John:\r\n<div class="w3-example">\r\n<h3>Object:</h3>\r\n<div class="w3-code notranslate jsHigh">var person = {firstName:"John", lastName:"Doe", age:46};</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n\r\n<hr />\r\n\r\n<h2>Array Properties and Methods</h2>\r\nThe real strength of JavaScript arrays are the built-in array properties and methods:\r\n<div class="w3-example">\r\n<h3>Examples</h3>\r\n<div class="w3-code notranslate jsHigh">var x = cars.length;        // The length property returns the number of elements in cars\r\nvar y = cars.sort();         // The sort() method sort cars in alphabetical order</div>\r\n</div>\r\nArray methods are covered in the next chapter.\r\n\r\n<hr />\r\n\r\n<h2>The length Property</h2>\r\nThe <strong>length</strong> property of an array returns the length of an array (the number of array elements).\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate jsHigh">var fruits = ["Banana", "Orange", "Apple", "Mango"];\r\nfruits.length;                       // the length of fruits is 4</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n<table class="lamp">\r\n<tbody>\r\n<tr>\r\n<th><img src="http://www.w3schools.com/images/lamp.jpg" alt="Note" /></th>\r\n<td>The length property is always one more than the highest array index.</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n\r\n<hr />\r\n\r\n<h2>Adding Array Elements</h2>\r\nThe easiest way to add a new element to an array is using the push method:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate jsHigh">var fruits = ["Banana", "Orange", "Apple", "Mango"];\r\nfruits.push("Lemon");                // adds a new element (Lemon) to fruits</div>\r\n</div>\r\n<div class="w3-example"></div>\r\nNew element can also be added to an array using the length property:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate jsHigh">var fruits = ["Banana", "Orange", "Apple", "Mango"];\r\nfruits[fruits.length] = "Lemon";     // adds a new element (Lemon) to fruits</div>\r\n</div>\r\n<div class="w3-example"></div>\r\nAdding elements with high indexes can create undefined "holes" in an array:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate jsHigh">var fruits = ["Banana", "Orange", "Apple", "Mango"];\r\nfruits[10] = "Lemon";                // adds a new element (Lemon) to fruits</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n\r\n<hr />\r\n\r\n<h2>Looping Array Elements</h2>\r\nThe best way to loop through an array, is using a "for" loop:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate jsHigh">\r\n\r\nvar fruits, text, fLen, i;\r\n\r\nfruits = ["Banana", "Orange", "Apple", "Mango"];\r\nfLen = fruits.length;\r\ntext = "&lt;ul&gt;";\r\nfor (i = 0; i &lt; fLen; i++) {\r\ntext += "&lt;li&gt;" + fruits[i] + "&lt;/li&gt;";\r\n}\r\n\r\n</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n\r\n<hr />\r\n\r\n<h2>Associative Arrays</h2>\r\nMany programming languages support arrays with named indexes.\r\n\r\nArrays with named indexes are called associative arrays (or hashes).\r\n\r\nJavaScript does <strong>not</strong> support arrays with named indexes.\r\n\r\nIn JavaScript, <strong>arrays</strong> always use <strong>numbered indexes</strong>.\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate jsHigh">var person = [];\r\nperson[0] = "John";\r\nperson[1] = "Doe";\r\nperson[2] = 46;\r\nvar x = person.length;         // person.length will return 3\r\nvar y = person[0];             // person[0] will return "John"</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n<table class="lamp">\r\n<tbody>\r\n<tr>\r\n<th><img src="http://www.w3schools.com/images/lamp.jpg" alt="Note" /></th>\r\n<td><strong>WARNING !!</strong>\r\nIf you use a named index, JavaScript will redefine the array to a standard object.\r\nAfter that, <strong>all array methods and properties will produce incorrect results</strong>.</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n<div class="w3-example">\r\n<h3> Example:</h3>\r\n<div class="w3-code notranslate jsHigh">var person = [];\r\nperson["firstName"] = "John";\r\nperson["lastName"] = "Doe";\r\nperson["age"] = 46;\r\nvar x = person.length;         // person.length will return 0\r\nvar y = person[0];             // person[0] will return undefined</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n\r\n<hr />\r\n\r\n<h2>The Difference Between Arrays and Objects</h2>\r\nIn JavaScript, <strong>arrays</strong> use <strong>numbered indexes</strong>.\r\n\r\nIn JavaScript, <strong>objects</strong> use <strong>named indexes</strong>.\r\n<table class="lamp">\r\n<tbody>\r\n<tr>\r\n<th><img src="http://www.w3schools.com/images/lamp.jpg" alt="Note" /></th>\r\n<td>Arrays are a special kind of objects, with numbered indexes.</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n\r\n<hr />\r\n\r\n<h2>When to Use Arrays. When to use Objects.</h2>\r\n<ul>\r\n 	<li>JavaScript does not support associative arrays.</li>\r\n 	<li>You should use <strong>objects</strong> when you want the element names to be <strong>strings (text)</strong>.</li>\r\n 	<li>You should use <strong>arrays</strong> when you want the element names to be <strong>numbers</strong>.</li>\r\n</ul>\r\n\r\n<hr />\r\n\r\n<h2>Avoid new Array()</h2>\r\nThere is no need to use the JavaScript''s built-in array constructor <strong>new</strong> Array().\r\n\r\n<strong>Use [] instead.</strong>\r\n\r\nThese two different statements both create a new empty array named points:\r\n<div class="w3-example">\r\n<div class="w3-code notranslate jsHigh">var points = new Array();         // Bad\r\nvar points = [];                  // Good</div>\r\n</div>\r\nThese two different statements both create a new array containing 6 numbers:\r\n<div class="w3-example">\r\n<div class="w3-code notranslate jsHigh">var points = new Array(40, 100, 1, 5, 25, 10)  // Bad\r\nvar points = [40, 100, 1, 5, 25, 10];          // Good</div>\r\n</div>\r\n<div class="w3-example"></div>\r\nThe <strong>new</strong> keyword only complicates the code. It can also produce some unexpected results:\r\n<div class="w3-example">\r\n<div class="w3-code notranslate jsHigh">var points = new Array(40, 100);  // Creates an array with two elements (40 and 100)</div>\r\n</div>\r\nWhat if I remove one of the elements?\r\n<div class="w3-example">\r\n<div class="w3-code notranslate jsHigh">var points = new Array(40);       // Creates an array with 40 undefined elements !!!!!</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n\r\n<hr />\r\n\r\n<h2>How to Recognize an Array</h2>\r\nA common question is: How do I know if a variable is an array?\r\n\r\nThe problem is that the JavaScript operator <strong>typeof</strong> returns "object":\r\n<div class="w3-example">\r\n<div class="w3-code notranslate jsHigh">\r\n\r\nvar fruits = ["Banana", "Orange", "Apple", "Mango"];\r\n\r\ntypeof fruits;             // returns object\r\n\r\n</div>\r\n</div>\r\n<div class="w3-example"></div>\r\nThe typeof operator returns object because a JavaScript array is an object.\r\n<h3>Solution 1:</h3>\r\nTo solve this problem ECMAScript 5 defines a new method <strong>Array.isArray()</strong>:\r\n<div class="w3-example">\r\n<div class="w3-code notranslate jsHigh">Array.isArray(fruits);     // returns true</div>\r\n</div>\r\n<div class="w3-example"></div>\r\nThe problem with this solution is that ECMAScript 5 is <strong>not supported in older browsers</strong>.\r\n<h3>Solution 2:</h3>\r\nTo solve this problem you can create your own isArray() function:\r\n<div class="w3-example">\r\n<div class="w3-code notranslate jsHigh">function isArray(x) {\r\nreturn x.constructor.toString().indexOf("Array") &gt; -1;\r\n}</div>\r\n</div>\r\n<div class="w3-example"></div>\r\nThe function above always returns true if the argument is an array.\r\n\r\nOr more precisely: it returns true if the object prototype contains the word "Array".\r\n<h3>Solution 3:</h3>\r\nThe <strong>instanceof</strong> operator returns true if an object is created by a given constructor:\r\n<div class="w3-example">\r\n<div class="w3-code notranslate jsHigh">\r\n\r\nvar fruits = ["Banana", "Orange", "Apple", "Mango"];\r\n\r\nfruits instanceof Array     // returns true\r\n\r\n</div>\r\n</div>', 'JS Array', '', 'inherit', 'closed', 'closed', '', '206-revision-v1', '', '', '2016-05-21 15:00:06', '2016-05-21 15:00:06', '', 206, 'http://localhost/invatacel/2016/05/21/206-revision-v1/', 0, 'revision', '', 0),
(230, 1, '2016-05-21 15:00:43', '2016-05-21 15:00:43', '<p class="intro">A JavaScript Boolean represents one of two values: <strong>true</strong> or <strong>false</strong>.</p>\r\n\r\n\r\n<hr />\r\n\r\n<h2>Boolean Values</h2>\r\nVery often, in programming, you will need a data type that can only have one of two values, like\r\n<ul>\r\n 	<li>YES / NO</li>\r\n 	<li>ON / OFF</li>\r\n 	<li>TRUE / FALSE</li>\r\n</ul>\r\nFor this, JavaScript has a <strong>Boolean</strong> data type. It can only take the values <strong>true</strong> or <strong>false</strong>.\r\n\r\n<hr />\r\n\r\n<h2>The Boolean() Function</h2>\r\nYou can use the Boolean() function to find out if an expression (or a variable) is true:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate jsHigh">Boolean(10 &gt; 9)        // returns true</div>\r\n</div>\r\n<div class="w3-example"></div>\r\nOr even easier:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate jsHigh">(10 &gt; 9)              // also returns true\r\n10 &gt; 9                // also returns true</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n\r\n<hr />\r\n\r\n<h2>Comparisons and Conditions</h2>\r\nThe chapter JS Comparisons gives a full overview of comparison operators.\r\n\r\nThe chapter JS Conditions gives a full overview of conditional statements.\r\n\r\nHere are some examples:\r\n<table class="w3-table-all notranslate">\r\n<tbody>\r\n<tr>\r\n<th>Operator</th>\r\n<th>Description</th>\r\n<th>Example</th>\r\n</tr>\r\n<tr>\r\n<td>==</td>\r\n<td>equal to</td>\r\n<td>if (day == "Monday")</td>\r\n</tr>\r\n<tr>\r\n<td>&gt;</td>\r\n<td>greater than</td>\r\n<td>if (salary &gt; 9000)</td>\r\n</tr>\r\n<tr>\r\n<td>&lt;</td>\r\n<td>less than</td>\r\n<td>if (age &lt; 18)</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n<table class="lamp">\r\n<tbody>\r\n<tr>\r\n<th><img src="http://www.w3schools.com/images/lamp.jpg" alt="Note" /></th>\r\n<td>The Boolean value of an expression is the fundament for JavaScript comparisons and conditions.</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n\r\n<hr />\r\n\r\n<h2>Everything With a "Real" Value is True</h2>\r\n<div class="w3-example">\r\n<h3>Examples</h3>\r\n<div class="w3-code notranslate jsHigh">100\r\n\r\n3.14\r\n\r\n-15\r\n\r\n"Hello"\r\n\r\n"false"\r\n\r\n7 + 1 + 3.14\r\n\r\n5 &lt; 6</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n\r\n<hr />\r\n\r\n<h2>Everything Without a "Real" is False</h2>\r\n<div class="w3-example">The Boolean value of <strong>0</strong> (zero) is <strong>false</strong>:\r\n<div class="w3-code notranslate jsHigh">var x = 0;\r\nBoolean(x);       // returns false</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n&nbsp;\r\n<div class="w3-example">The Boolean value of <strong>-0</strong> (minus zero) is <strong>false</strong>:\r\n<div class="w3-code notranslate jsHigh">var x = -0;\r\nBoolean(x);       // returns false</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n&nbsp;\r\n<div class="w3-example">The Boolean value of <strong>"" </strong>(empty string) is <strong>false</strong>:\r\n<div class="w3-code notranslate jsHigh">var x = "";\r\nBoolean(x);       // returns false</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n&nbsp;\r\n<div class="w3-example">The Boolean value of <strong>undefined</strong> is <strong>false</strong>:\r\n<div class="w3-code notranslate jsHigh">var x;\r\nBoolean(x);       // returns false</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n&nbsp;\r\n<div class="w3-example">The Boolean value of <strong>null</strong> is <strong>false</strong>:\r\n<div class="w3-code notranslate jsHigh">var x = null;\r\nBoolean(x);       // returns false</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n&nbsp;\r\n<div class="w3-example">The Boolean value of <strong>false</strong> is (you guessed it) <strong>false</strong>:\r\n<div class="w3-code notranslate jsHigh">var x = false;\r\nBoolean(x);       // returns false</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n&nbsp;\r\n<div class="w3-example">The Boolean value of <strong>NaN</strong> is <strong>false</strong>:\r\n<div class="w3-code notranslate jsHigh">var x = 10 / "H";\r\nBoolean(x);       // returns false</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n\r\n<hr />\r\n\r\n<h2>Boolean Properties and Methods</h2>\r\nPrimitive values, like true and false, cannot have properties or methods (because they are not objects).\r\n\r\nBut with JavaScript, methods and properties are also available to primitive values, because JavaScript treats primitive values as objects when executing methods and properties.\r\n\r\n<hr />\r\n\r\n<h2>Complete Boolean Reference</h2>\r\nFor a complete reference, go to our <a href="http://www.w3schools.com/jsref/jsref_obj_boolean.asp">Complete JavaScript Boolean Reference</a>.\r\n\r\nThe reference contains descriptions and examples of all Boolean properties and methods.', 'JS Booleans', '', 'publish', 'closed', 'closed', '', 'js-booleans', '', '', '2016-05-21 15:01:08', '2016-05-21 15:01:08', '', 0, 'http://localhost/invatacel/lessons/js-booleans/', 0, 'lp_lesson', '', 0),
(231, 1, '2016-05-21 15:01:08', '2016-05-21 15:01:08', '<p class="intro">A JavaScript Boolean represents one of two values: <strong>true</strong> or <strong>false</strong>.</p>\r\n\r\n\r\n<hr />\r\n\r\n<h2>Boolean Values</h2>\r\nVery often, in programming, you will need a data type that can only have one of two values, like\r\n<ul>\r\n 	<li>YES / NO</li>\r\n 	<li>ON / OFF</li>\r\n 	<li>TRUE / FALSE</li>\r\n</ul>\r\nFor this, JavaScript has a <strong>Boolean</strong> data type. It can only take the values <strong>true</strong> or <strong>false</strong>.\r\n\r\n<hr />\r\n\r\n<h2>The Boolean() Function</h2>\r\nYou can use the Boolean() function to find out if an expression (or a variable) is true:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate jsHigh">Boolean(10 &gt; 9)        // returns true</div>\r\n</div>\r\n<div class="w3-example"></div>\r\nOr even easier:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate jsHigh">(10 &gt; 9)              // also returns true\r\n10 &gt; 9                // also returns true</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n\r\n<hr />\r\n\r\n<h2>Comparisons and Conditions</h2>\r\nThe chapter JS Comparisons gives a full overview of comparison operators.\r\n\r\nThe chapter JS Conditions gives a full overview of conditional statements.\r\n\r\nHere are some examples:\r\n<table class="w3-table-all notranslate">\r\n<tbody>\r\n<tr>\r\n<th>Operator</th>\r\n<th>Description</th>\r\n<th>Example</th>\r\n</tr>\r\n<tr>\r\n<td>==</td>\r\n<td>equal to</td>\r\n<td>if (day == "Monday")</td>\r\n</tr>\r\n<tr>\r\n<td>&gt;</td>\r\n<td>greater than</td>\r\n<td>if (salary &gt; 9000)</td>\r\n</tr>\r\n<tr>\r\n<td>&lt;</td>\r\n<td>less than</td>\r\n<td>if (age &lt; 18)</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n<table class="lamp">\r\n<tbody>\r\n<tr>\r\n<th><img src="http://www.w3schools.com/images/lamp.jpg" alt="Note" /></th>\r\n<td>The Boolean value of an expression is the fundament for JavaScript comparisons and conditions.</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n\r\n<hr />\r\n\r\n<h2>Everything With a "Real" Value is True</h2>\r\n<div class="w3-example">\r\n<h3>Examples</h3>\r\n<div class="w3-code notranslate jsHigh">100\r\n\r\n3.14\r\n\r\n-15\r\n\r\n"Hello"\r\n\r\n"false"\r\n\r\n7 + 1 + 3.14\r\n\r\n5 &lt; 6</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n\r\n<hr />\r\n\r\n<h2>Everything Without a "Real" is False</h2>\r\n<div class="w3-example">The Boolean value of <strong>0</strong> (zero) is <strong>false</strong>:\r\n<div class="w3-code notranslate jsHigh">var x = 0;\r\nBoolean(x);       // returns false</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n&nbsp;\r\n<div class="w3-example">The Boolean value of <strong>-0</strong> (minus zero) is <strong>false</strong>:\r\n<div class="w3-code notranslate jsHigh">var x = -0;\r\nBoolean(x);       // returns false</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n&nbsp;\r\n<div class="w3-example">The Boolean value of <strong>"" </strong>(empty string) is <strong>false</strong>:\r\n<div class="w3-code notranslate jsHigh">var x = "";\r\nBoolean(x);       // returns false</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n&nbsp;\r\n<div class="w3-example">The Boolean value of <strong>undefined</strong> is <strong>false</strong>:\r\n<div class="w3-code notranslate jsHigh">var x;\r\nBoolean(x);       // returns false</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n&nbsp;\r\n<div class="w3-example">The Boolean value of <strong>null</strong> is <strong>false</strong>:\r\n<div class="w3-code notranslate jsHigh">var x = null;\r\nBoolean(x);       // returns false</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n&nbsp;\r\n<div class="w3-example">The Boolean value of <strong>false</strong> is (you guessed it) <strong>false</strong>:\r\n<div class="w3-code notranslate jsHigh">var x = false;\r\nBoolean(x);       // returns false</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n&nbsp;\r\n<div class="w3-example">The Boolean value of <strong>NaN</strong> is <strong>false</strong>:\r\n<div class="w3-code notranslate jsHigh">var x = 10 / "H";\r\nBoolean(x);       // returns false</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n\r\n<hr />\r\n\r\n<h2>Boolean Properties and Methods</h2>\r\nPrimitive values, like true and false, cannot have properties or methods (because they are not objects).\r\n\r\nBut with JavaScript, methods and properties are also available to primitive values, because JavaScript treats primitive values as objects when executing methods and properties.\r\n\r\n<hr />\r\n\r\n<h2>Complete Boolean Reference</h2>\r\nFor a complete reference, go to our <a href="http://www.w3schools.com/jsref/jsref_obj_boolean.asp">Complete JavaScript Boolean Reference</a>.\r\n\r\nThe reference contains descriptions and examples of all Boolean properties and methods.', 'JS Booleans', '', 'inherit', 'closed', 'closed', '', '230-revision-v1', '', '', '2016-05-21 15:01:08', '2016-05-21 15:01:08', '', 230, 'http://localhost/invatacel/2016/05/21/230-revision-v1/', 0, 'revision', '', 0),
(232, 1, '2016-05-21 15:01:47', '2016-05-21 15:01:47', '<p class="intro">Comparison and Logical operators are used to test for <em>true</em> or <em>false</em>.</p>\r\n\r\n\r\n<hr />\r\n\r\n<h2>Comparison Operators</h2>\r\nComparison operators are used in logical statements to determine equality or difference between variables or values.\r\n\r\nGiven that <b>x = 5</b>, the table below explains the comparison operators:\r\n<div class="table-responsive">\r\n<table class="w3-table-all notranslate">\r\n<tbody>\r\n<tr>\r\n<th>Operator</th>\r\n<th>Description</th>\r\n<th>Comparing</th>\r\n<th>Returns</th>\r\n<th>Try it</th>\r\n</tr>\r\n<tr>\r\n<td rowspan="3">==</td>\r\n<td rowspan="3">equal to</td>\r\n<td>x == 8</td>\r\n<td>false</td>\r\n<td></td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n</div>\r\n<div class="table-responsive"></div>\r\n<table class="w3-table-all notranslate">\r\n<tbody>\r\n<tr>\r\n<td>x == 5</td>\r\n<td>true</td>\r\n<td></td>\r\n</tr>\r\n<tr>\r\n<td>x == "5"</td>\r\n<td>true</td>\r\n<td></td>\r\n</tr>\r\n<tr>\r\n<td rowspan="2">===</td>\r\n<td rowspan="2">equal value and equal type</td>\r\n<td>x === 5</td>\r\n<td>true</td>\r\n<td></td>\r\n</tr>\r\n<tr>\r\n<td>x === "5"</td>\r\n<td>false</td>\r\n<td></td>\r\n</tr>\r\n<tr>\r\n<td>!=</td>\r\n<td>not equal</td>\r\n<td>x != 8</td>\r\n<td>true</td>\r\n<td></td>\r\n</tr>\r\n<tr>\r\n<td rowspan="3">!==</td>\r\n<td rowspan="3">not equal value or not equal type</td>\r\n<td>x !== 5</td>\r\n<td>false</td>\r\n<td></td>\r\n</tr>\r\n<tr>\r\n<td>x !== "5"</td>\r\n<td>true</td>\r\n<td></td>\r\n</tr>\r\n<tr>\r\n<td>x !== 8</td>\r\n<td>true</td>\r\n<td></td>\r\n</tr>\r\n<tr>\r\n<td>&gt;</td>\r\n<td>greater than</td>\r\n<td>x &gt; 8</td>\r\n<td>false</td>\r\n<td></td>\r\n</tr>\r\n<tr>\r\n<td>&lt;</td>\r\n<td>less than</td>\r\n<td>x &lt; 8</td>\r\n<td>true</td>\r\n<td></td>\r\n</tr>\r\n<tr>\r\n<td>&gt;=</td>\r\n<td>greater than or equal to</td>\r\n<td>x &gt;= 8</td>\r\n<td>false</td>\r\n<td></td>\r\n</tr>\r\n<tr>\r\n<td>&lt;=</td>\r\n<td>less than or equal to</td>\r\n<td>x &lt;= 8</td>\r\n<td>true</td>\r\n<td></td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n\r\n<hr />\r\n\r\n<h2>How Can it be Used</h2>\r\nComparison operators can be used in conditional statements to compare values and take action depending on the result:\r\n<div class="w3-example">\r\n<div class="w3-code notranslate jsHigh">if (age &lt; 18) text = "Too young";</div>\r\n</div>\r\nYou will learn more about the use of conditional statements in the next chapter of this tutorial.\r\n\r\n<hr />\r\n\r\n<h2>Logical Operators</h2>\r\nLogical operators are used to determine the logic between variables or values.\r\n\r\nGiven that <b>x = 6</b> and <b>y = 3</b>, the table below explains the logical operators:\r\n<div class="table-responsive">\r\n<table class="w3-table-all notranslate">\r\n<tbody>\r\n<tr>\r\n<th>Operator</th>\r\n<th>Description</th>\r\n<th>Example</th>\r\n<th>Try it</th>\r\n</tr>\r\n<tr>\r\n<td>&amp;&amp;</td>\r\n<td>and</td>\r\n<td>(x &lt; 10 &amp;&amp; y &gt; 1) is true</td>\r\n<td></td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n</div>\r\n|| or (x == 5 || y == 5) is false ! not !(x == y) is true\r\n<div class="table-responsive"></div>\r\n\r\n<hr />\r\n\r\n<h2>Conditional (Ternary) Operator</h2>\r\nJavaScript also contains a conditional operator that assigns a value to a variable based on some condition.\r\n<h3>Syntax</h3>\r\n<div class="w3-code w3-border notranslate">\r\n<div><em>variablename </em>= (<em>condition</em>) ?<em> value1</em>:<em>value2</em></div>\r\n</div>\r\n<h3>Example</h3>\r\n<div class="w3-example">\r\n<div class="w3-code notranslate jsHigh">var voteable = (age &lt; 18) ? "Too young":"Old enough";</div>\r\n</div>\r\n<div class="w3-example"></div>\r\nIf the variable age is a value below 18, the value of the variable voteable will be "Too young", otherwise the value of voteable will be "Old enough".\r\n\r\n<hr />\r\n\r\n<h2>Comparing Different Types</h2>\r\nComparing data of different types may give unexpected results.\r\n\r\nWhen comparing a string with a number, JavaScript will convert the string to a number when doing the comparison. An empty string converts to 0. A non-numeric string converts to NaN which is always false.\r\n<table class="w3-table-all notranslate">\r\n<tbody>\r\n<tr>\r\n<th>Case</th>\r\n<th>Value</th>\r\n<th>Try</th>\r\n</tr>\r\n<tr>\r\n<td>2 &lt; 12</td>\r\n<td>true</td>\r\n<td></td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n<table class="w3-table-all notranslate">\r\n<tbody>\r\n<tr>\r\n<td>2 &lt; "12"</td>\r\n<td>true</td>\r\n<td></td>\r\n</tr>\r\n<tr>\r\n<td>2 &lt; "John"</td>\r\n<td>false</td>\r\n<td></td>\r\n</tr>\r\n<tr>\r\n<td>2 &gt; "John"</td>\r\n<td>false</td>\r\n<td></td>\r\n</tr>\r\n<tr>\r\n<td>2 == "John"</td>\r\n<td>false</td>\r\n<td></td>\r\n</tr>\r\n<tr>\r\n<td>"2" &lt; "12"</td>\r\n<td>false</td>\r\n<td></td>\r\n</tr>\r\n<tr>\r\n<td>"2" &gt; "12"</td>\r\n<td>true</td>\r\n<td></td>\r\n</tr>\r\n<tr>\r\n<td>"2" == "12"</td>\r\n<td>false</td>\r\n<td></td>\r\n</tr>\r\n</tbody>\r\n</table>\r\nWhen comparing two strings, "2" will be greater than "12", because (alphabetically) 1 is less than 2.\r\n\r\nTo secure a proper result, variables should be converted to the proper type before comparison:\r\n<div class="w3-example">\r\n<div class="w3-code notranslate jsHigh">age = Number(age);\r\nif (isNaN(age)) {\r\nvoteable = "Error in input";\r\n} else {\r\nvoteable = (age &lt; 18) ? "Too young" : "Old enough";\r\n}</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n\r\n<hr />\r\n\r\n<h2>JavaScript Bitwise Operators</h2>\r\nBit operators work on 32-bit numbers.\r\n\r\nAny numeric operand in the operation is converted into a 32-bit number.\r\n\r\nThe result is converted back to a JavaScript number.\r\n<div class="table-responsive">\r\n<table class="w3-table-all notranslate">\r\n<tbody>\r\n<tr>\r\n<th>Operator</th>\r\n<th>Description</th>\r\n<th>Example</th>\r\n<th>Same as</th>\r\n<th>Result</th>\r\n<th>Decimal</th>\r\n</tr>\r\n<tr>\r\n<td>&amp;</td>\r\n<td>AND</td>\r\n<td>x = 5 &amp; 1</td>\r\n<td>0101 &amp; 0001</td>\r\n<td>0001</td>\r\n<td>1</td>\r\n</tr>\r\n<tr>\r\n<td>|</td>\r\n<td>OR</td>\r\n<td>x = 5 | 1</td>\r\n<td>0101 | 0001</td>\r\n<td>0101</td>\r\n<td>5</td>\r\n</tr>\r\n<tr>\r\n<td>~</td>\r\n<td>NOT</td>\r\n<td>x = ~ 5</td>\r\n<td> ~0101</td>\r\n<td>1010</td>\r\n<td>10</td>\r\n</tr>\r\n<tr>\r\n<td>^</td>\r\n<td>XOR</td>\r\n<td>x = 5 ^ 1</td>\r\n<td>0101 ^ 0001</td>\r\n<td>0100</td>\r\n<td>4</td>\r\n</tr>\r\n<tr>\r\n<td>&lt;&lt;</td>\r\n<td>Left shift</td>\r\n<td>x = 5 &lt;&lt; 1</td>\r\n<td>0101 &lt;&lt; 1</td>\r\n<td>1010</td>\r\n<td>10</td>\r\n</tr>\r\n<tr>\r\n<td>&gt;&gt;</td>\r\n<td>Right shift</td>\r\n<td>x = 5 &gt;&gt; 1</td>\r\n<td>0101 &gt;&gt; 1</td>\r\n<td>0010</td>\r\n<td>2</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n</div>\r\n<table class="lamp">\r\n<tbody>\r\n<tr>\r\n<th><img src="http://www.w3schools.com/images/lamp.jpg" alt="Note" /></th>\r\n<td>The table above use 4 bits unsigned examples. But JavaScript uses 32-bit signed numbers. Because of this, in JavaScript, ~ 5 will not return 10. It will return -6:\r\n~00000000000000000000000000000101 will return 11111111111111111111111111111010</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code jsHigh notranslate">x = 5 &amp; 1;</div>\r\nThe result in x:\r\n<div class="w3-code notranslate">1</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code jsHigh notranslate">x = 5 | 1;</div>\r\nThe result in x:\r\n<div class="w3-code notranslate">5</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code jsHigh notranslate">x = 5 &gt;&gt; 1;</div>\r\nThe result in x:\r\n<div class="w3-code notranslate">2</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code jsHigh notranslate">x = 5 &lt;&lt; 1;</div>\r\nThe result in x:\r\n<div class="w3-code notranslate">10</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code jsHigh notranslate">x = ~ 5;</div>\r\nThe result in x:\r\n<div class="w3-code notranslate">-6</div>\r\n</div>', 'JS Comparisions', '', 'inherit', 'closed', 'closed', '', '208-revision-v1', '', '', '2016-05-21 15:01:47', '2016-05-21 15:01:47', '', 208, 'http://localhost/invatacel/2016/05/21/208-revision-v1/', 0, 'revision', '', 0);
INSERT INTO `wp_posts` (`ID`, `post_author`, `post_date`, `post_date_gmt`, `post_content`, `post_title`, `post_excerpt`, `post_status`, `comment_status`, `ping_status`, `post_password`, `post_name`, `to_ping`, `pinged`, `post_modified`, `post_modified_gmt`, `post_content_filtered`, `post_parent`, `guid`, `menu_order`, `post_type`, `post_mime_type`, `comment_count`) VALUES
(233, 1, '2016-05-21 15:02:47', '2016-05-21 15:02:47', '<p class="intro">Conditional statements are used to perform different actions based on different conditions.</p>\r\n\r\n\r\n<hr />\r\n\r\n<h2>Conditional Statements</h2>\r\nVery often when you write code, you want to perform different actions for different decisions.\r\n\r\nYou can use conditional statements in your code to do this.\r\n\r\nIn JavaScript we have the following conditional statements:\r\n<ul>\r\n 	<li>Use<b> if </b>to specify a block of code to be executed, if a specified condition is true</li>\r\n 	<li>Use <b>else</b> to specify a block of code to be executed, if the same condition is false</li>\r\n 	<li>Use <b>else if</b> to specify a new condition to test, if the first condition is false</li>\r\n 	<li>Use <b>switch</b> to specify many alternative blocks of code to be executed</li>\r\n</ul>\r\n\r\n<hr />\r\n\r\n<h2>The if Statement</h2>\r\nUse the <strong>if</strong> statement to specify a block of JavaScript code to be executed if a condition is true.\r\n<h3>Syntax</h3>\r\n<div class="w3-code w3-border notranslate">\r\n<div>if (<i>condition</i>) {\r\n<em>    block of code to be executed if the condition is true\r\n</em>}</div>\r\n</div>\r\n<table class="lamp">\r\n<tbody>\r\n<tr>\r\n<th><img src="http://www.w3schools.com/images/lamp.jpg" alt="Note" /></th>\r\n<td>Note that <strong>if</strong> is in lowercase letters. Uppercase letters (If or IF) will generate a JavaScript error.</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\nMake a "Good day" greeting if the hour is less than 18:00:\r\n<div class="w3-code notranslate jsHigh">if (hour &lt; 18) {\r\ngreeting = "Good day";\r\n}</div>\r\nThe result of greeting will be:\r\n<div class="w3-code notranslate">Good day</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n\r\n<hr />\r\n\r\n<h2>The else Statement</h2>\r\nUse the <strong>else</strong> statement to specify a block of code to be executed if the condition is false.\r\n<div class="w3-code w3-border notranslate">\r\n<div>if (<i>condition</i>) {\r\n<em>    block of code to be executed if the condition is true\r\n</em>} else {\r\n<em>    block of code to be executed if the condition is false\r\n</em>}</div>\r\n</div>\r\n&nbsp;\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\nIf the hour is less than 18, create a "Good day" greeting, otherwise "Good evening":\r\n<div class="w3-code notranslate jsHigh">if (hour &lt; 18) {\r\ngreeting = "Good day";\r\n} else {\r\ngreeting = "Good evening";\r\n}</div>\r\nThe result of greeting will be:\r\n<div class="w3-code notranslate">Good day</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n\r\n<hr />\r\n\r\n<h2>The else if Statement</h2>\r\nUse the <strong>else if</strong> statement to specify a new condition if the first condition is false.\r\n<h3>Syntax</h3>\r\n<div class="w3-code w3-border notranslate">\r\n<div>if (<i>condition1</i>) {\r\n<em>    block of code to be executed if condition1 is true\r\n</em>} else if (<i>condition2</i>) {\r\n<em>    block of code to be executed if the condition1 is false and condition2 is true</em>\r\n} else {\r\n<em>    block of code to be executed if the condition1 is false and condition2 is false\r\n</em>}</div>\r\n</div>\r\n&nbsp;\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\nIf time is less than 10:00, create a "Good morning" greeting, if not, but time is less than 20:00, create a "Good day" greeting, otherwise a "Good evening":\r\n<div class="w3-code notranslate jsHigh">if (time &lt; 10) {\r\ngreeting = "Good morning";\r\n} else if (time &lt; 20) {\r\ngreeting = "Good day";\r\n} else {\r\ngreeting = "Good evening";\r\n}</div>\r\nThe result of greeting will be:\r\n<div class="w3-code notranslate">Good day</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n\r\n<hr />\r\n\r\n&nbsp;', 'JS Conditions', '', 'inherit', 'closed', 'closed', '', '207-revision-v1', '', '', '2016-05-21 15:02:47', '2016-05-21 15:02:47', '', 207, 'http://localhost/invatacel/2016/05/21/207-revision-v1/', 0, 'revision', '', 0),
(234, 1, '2016-05-21 15:02:50', '2016-05-21 15:02:50', '<p class="intro">Conditional statements are used to perform different actions based on different conditions.</p>\n\n\n<hr />\n\n<h2>Conditional Statements</h2>\nVery often when you write code, you want to perform different actions for different decisions.\n\nYou can use conditional statements in your code to do this.\n\nIn JavaScript we have the following conditional statements:\n<ul>\n 	<li>Use<b> if </b>to specify a block of code to be executed, if a specified condition is true</li>\n 	<li>Use <b>else</b> to specify a block of code to be executed, if the same condition is false</li>\n 	<li>Use <b>else if</b> to specify a new condition to test, if the first condition is false</li>\n 	<li>Use <b>switch</b> to specify many alternative blocks of code to be executed</li>\n</ul>\n\n<hr />\n\n<h2>The if Statement</h2>\nUse the <strong>if</strong> statement to specify a block of JavaScript code to be executed if a condition is true.\n<h3>Syntax</h3>\n<div class="w3-code w3-border notranslate">\n<div>if (<i>condition</i>) {\n<em>    block of code to be executed if the condition is true\n</em>}</div>\n</div>\n<table class="lamp">\n<tbody>\n<tr>\n<th><img src="http://www.w3schools.com/images/lamp.jpg" alt="Note" /></th>\n<td>Note that <strong>if</strong> is in lowercase letters. Uppercase letters (If or IF) will generate a JavaScript error.</td>\n</tr>\n</tbody>\n</table>\n<div class="w3-example">\n<h3>Example</h3>\nMake a "Good day" greeting if the hour is less than 18:00:\n<div class="w3-code notranslate jsHigh">if (hour &lt; 18) {\ngreeting = "Good day";\n}</div>\nThe result of greeting will be:\n<div class="w3-code notranslate">Good day</div>\n</div>\n<div class="w3-example"></div>\n\n<hr />\n\n<h2>The else Statement</h2>\nUse the <strong>else</strong> statement to specify a block of code to be executed if the condition is false.\n<div class="w3-code w3-border notranslate">\n<div>if (<i>condition</i>) {\n<em>    block of code to be executed if the condition is true\n</em>} else {\n<em>    block of code to be executed if the condition is false\n</em>}</div>\n</div>\n&nbsp;\n<div class="w3-example">\n<h3>Example</h3>\nIf the hour is less than 18, create a "Good day" greeting, otherwise "Good evening":\n<div class="w3-code notranslate jsHigh">if (hour &lt; 18) {\ngreeting = "Good day";\n} else {\ngreeting = "Good evening";\n}</div>\nThe result of greeting will be:\n<div class="w3-code notranslate">Good day</div>\n</div>\n<div class="w3-example"></div>\n\n<hr />\n\n<h2>The else if Statement</h2>\nUse the <strong>else if</strong> statement to specify a new condition if the first condition is false.\n<h3>Syntax</h3>\n<div class="w3-code w3-border notranslate">\n<div>if (<i>condition1</i>) {\n<em>    block of code to be executed if condition1 is true\n</em>} else if (<i>condition2</i>) {\n<em>    block of code to be executed if the condition1 is false and condition2 is true</em>\n} else {\n<em>    block of code to be executed if the condition1 is false and condition2 is false\n</em>}</div>\n</div>\n&nbsp;\n<div class="w3-example">\n<h3>Example</h3>\nIf time is less than 10:00, create a "Good morning" greeting, if not, but time is less than 20:00, create a "Good day" greeting, otherwise a "Good evening":\n<div class="w3-code notranslate jsHigh">if (time &lt; 10) {\ngreeting = "Good morning";\n} else if (time &lt; 20) {\ngreeting = "Good day";\n} else {\ngreeting = "Good evening";\n}</div>\nThe result of greeting will be:\n<div class="w3-code notranslate">Good day</div>\n</div>\n<div class="w3-example"></div>\n\n<hr />\n\n&nbsp;', 'JS Conditions', '', 'inherit', 'closed', 'closed', '', '207-autosave-v1', '', '', '2016-05-21 15:02:50', '2016-05-21 15:02:50', '', 207, 'http://localhost/invatacel/2016/05/21/207-autosave-v1/', 0, 'revision', '', 0),
(235, 1, '2016-05-21 15:03:24', '2016-05-21 15:03:24', '<p class="intro">The switch statement is used to perform different actions based on different conditions.</p>\r\n\r\n\r\n<hr />\r\n\r\n<h2>The JavaScript Switch Statement</h2>\r\nUse the switch statement to select one of many blocks of code to be executed.\r\n<h3>Syntax</h3>\r\n<div class="w3-code w3-border notranslate">\r\n<div>switch(<em>expression</em>) {\r\ncase <em>n</em>:\r\n<em>        code block\r\n</em>        break;\r\ncase <em>n</em>:\r\n<em>        code block\r\n</em>        break;\r\ndefault:\r\n<em>default code block</em>\r\n}</div>\r\n</div>\r\nThis is how it works:\r\n<ul>\r\n 	<li>The switch expression is evaluated once.</li>\r\n 	<li>The value of the expression is compared with the values of each case.</li>\r\n 	<li>If there is a match, the associated block of code is executed.</li>\r\n</ul>\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\nThe getDay() method returns the weekday as a number between 0 and 6. (Sunday=0, Monday=1, Tuesday=2 ..)\r\n\r\nUse the weekday number to calculate weekday name:\r\n<div class="w3-code notranslate jsHigh">switch (new Date().getDay()) {\r\ncase 0:\r\nday = "Sunday";\r\nbreak;\r\ncase 1:\r\nday = "Monday";\r\nbreak;\r\ncase 2:\r\nday = "Tuesday";\r\nbreak;\r\ncase 3:\r\nday = "Wednesday";\r\nbreak;\r\ncase 4:\r\nday = "Thursday";\r\nbreak;\r\ncase 5:\r\nday = "Friday";\r\nbreak;\r\ncase 6:\r\nday = "Saturday";\r\nbreak;\r\n}</div>\r\nThe result of day will be:\r\n<div class="w3-code notranslate">Saturday</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n\r\n<hr />\r\n\r\n<h2>The break Keyword</h2>\r\nWhen the JavaScript code interpreter reaches a <strong>break</strong> keyword, it breaks out of the switch block.\r\n\r\nThis will stop the execution of more code and case testing inside the block.\r\n<table class="lamp">\r\n<tbody>\r\n<tr>\r\n<th><img src="http://www.w3schools.com/images/lamp.jpg" alt="Note" /></th>\r\n<td>When a match is found, and the job is done, it''s time for a break.\r\nThere is no need for more testing.</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n\r\n<hr />\r\n\r\n<h2>The default Keyword</h2>\r\nThe <strong>default</strong> keyword specifies the code to run if there is no case match:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\nThe getDay() method returns the weekday as a number between 0 and 6.\r\n\r\nIf today is neither Saturday (6) nor Sunday (0), write a default message:\r\n<div class="w3-code notranslate jsHigh">switch (new Date().getDay()) {\r\ncase 6:\r\ntext = "Today is Saturday";\r\nbreak;\r\ncase 0:\r\ntext = "Today is Sunday";\r\nbreak;\r\ndefault:\r\ntext = "Looking forward to the Weekend";\r\n}</div>\r\nThe result of text will be:\r\n<div class="w3-code notranslate">Today is Saturday</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n\r\n<hr />\r\n\r\n<h2>Common Code and Fall-Through</h2>\r\nSometimes, in a switch block, you will want different cases to use the same code, or fall-through to a common default.\r\n\r\nNote from the next example, that cases can share the same code block, and that the default case does not have to be the last case in a switch block:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate jsHigh">switch (new Date().getDay()) {\r\ncase 1:\r\ncase 2:\r\ncase 3:\r\ndefault:\r\ntext = "Looking forward to the Weekend";\r\nbreak;\r\ncase 4:\r\ncase 5:\r\ntext = "Soon it is Weekend";\r\nbreak;\r\ncase 0:\r\ncase 6:\r\ntext = "It is Weekend";\r\n}</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n<table class="lamp">\r\n<tbody>\r\n<tr>\r\n<th><img src="http://www.w3schools.com/images/lamp.jpg" alt="Note" /></th>\r\n<td>If default is not the last case in the switch block, remember to end it with a break.</td>\r\n</tr>\r\n</tbody>\r\n</table>', 'JS Switch', '', 'inherit', 'closed', 'closed', '', '209-revision-v1', '', '', '2016-05-21 15:03:24', '2016-05-21 15:03:24', '', 209, 'http://localhost/invatacel/2016/05/21/209-revision-v1/', 0, 'revision', '', 0),
(236, 1, '2016-05-21 15:03:46', '2016-05-21 15:03:46', '<p class="intro">Loops can execute a block of code a number of times.</p>\r\n\r\n\r\n<hr />\r\n\r\n<h2>JavaScript Loops</h2>\r\nLoops are handy, if you want to run the same code over and over again, each time with a different value.\r\n\r\nOften this is the case when working with arrays:\r\n<div class="w3-example">\r\n<h3>Instead of writing:</h3>\r\n<div class="w3-code notranslate jsHigh">text += cars[0] + "&lt;br&gt;";\r\ntext += cars[1] + "&lt;br&gt;";\r\ntext += cars[2] + "&lt;br&gt;";\r\ntext += cars[3] + "&lt;br&gt;";\r\ntext += cars[4] + "&lt;br&gt;";\r\ntext += cars[5] + "&lt;br&gt;";</div>\r\n<h3>You can write:</h3>\r\n<div class="w3-code notranslate jsHigh">for (i = 0; i &lt; cars.length; i++) {\r\ntext += cars[i] + "&lt;br&gt;";\r\n}</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n\r\n<hr />\r\n\r\n<h2>Different Kinds of Loops</h2>\r\nJavaScript supports different kinds of loops:\r\n<ul>\r\n 	<li><b>for </b>- loops through a block of code a number of times</li>\r\n 	<li><b><strong>for/in</strong> </b>- loops through the properties of an object</li>\r\n 	<li><b>while </b>- loops through a block of code while a specified condition is true</li>\r\n 	<li><strong>do/while</strong> - also loops through a block of code while a specified condition is true</li>\r\n</ul>\r\n\r\n<hr />\r\n\r\n<h2>The For Loop</h2>\r\nThe for loop is often the tool you will use when you want to create a loop.\r\n\r\nThe for loop has the following syntax:\r\n<div class="w3-code w3-border notranslate">\r\n<div>for (<i>statement 1</i>;<i> statement 2</i>;<i> statement 3</i>) {\r\n<i>code block to be executed</i>\r\n}</div>\r\n</div>\r\n<strong>Statement 1</strong> is executed before the loop (the code block) starts.\r\n\r\n<strong>Statement 2</strong> defines the condition for running the loop (the code block).\r\n\r\n<strong>Statement 3</strong> is executed each time after the loop (the code block) has been executed.\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate jsHigh">for (i = 0; i &lt; 5; i++) {\r\ntext += "The number is " + i + "&lt;br&gt;";\r\n}</div>\r\n</div>\r\n<div class="w3-example"></div>\r\nFrom the example above, you can read:\r\n\r\nStatement 1 sets a variable before the loop starts (var i = 0).\r\n\r\nStatement 2 defines the condition for the loop to run (i must be less than 5).\r\n\r\nStatement 3 increases a value (i++) each time the code block in the loop has been executed.\r\n\r\n<hr />\r\n\r\n<h2>Statement 1</h2>\r\nNormally you will use statement 1 to initiate the variable used in the loop (i = 0).\r\n\r\nThis is not always the case, JavaScript doesn''t care. Statement 1 is optional.\r\n\r\nYou can initiate many values in statement 1 (separated by comma):\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate jsHigh">for (i = 0, len = cars.length, text = ""; i &lt; len; i++) {\r\ntext += cars[i] + "&lt;br&gt;";\r\n}</div>\r\n</div>\r\n<div class="w3-example"></div>\r\nAnd you can omit statement 1 (like when your values are set before the loop starts):\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate jsHigh">var i = 2;\r\nvar len = cars.length;\r\nvar text = "";\r\nfor (; i &lt; len; i++) {\r\ntext += cars[i] + "&lt;br&gt;";\r\n}</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n\r\n<hr />\r\n\r\n<h2>Statement 2</h2>\r\nOften statement 2 is used to evaluate the condition of the initial variable.\r\n\r\nThis is not always the case, JavaScript doesn''t care. Statement 2 is also optional.\r\n\r\nIf statement 2 returns true, the loop will start over again, if it returns false, the loop will end.\r\n<table class="lamp">\r\n<tbody>\r\n<tr>\r\n<th><img src="http://www.w3schools.com/images/lamp.jpg" alt="Note" /></th>\r\n<td>If you omit statement 2, you must provide a <strong>break</strong> inside the loop. Otherwise the loop will never end. This will crash your browser. Read about breaks in a later chapter of this tutorial.</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n\r\n<hr />\r\n\r\n<h2>Statement 3</h2>\r\nOften statement 3 increases the initial variable.\r\n\r\nThis is not always the case, JavaScript doesn''t care, and statement 3 is optional.\r\n\r\nStatement 3 can do anything like negative increment (i--), positive increment (i = i + 15), or anything else.\r\n\r\nStatement 3 can also be omitted (like when you increment your values inside the loop):\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate jsHigh">var i = 0;\r\nvar len = cars.length;\r\nfor (; i &lt; len; ) {\r\ntext += cars[i] + "&lt;br&gt;";\r\ni++;\r\n}</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n\r\n<hr />\r\n\r\n<h2>The For/In Loop</h2>\r\nThe JavaScript for/in statement loops through the properties of an object:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate jsHigh">var person = {fname:"John", lname:"Doe", age:25};\r\n\r\nvar text = "";\r\nvar x;\r\nfor (x in person) {\r\ntext += person[x];\r\n}</div>\r\n</div>', 'JS Loop For', '', 'inherit', 'closed', 'closed', '', '210-revision-v1', '', '', '2016-05-21 15:03:46', '2016-05-21 15:03:46', '', 210, 'http://localhost/invatacel/2016/05/21/210-revision-v1/', 0, 'revision', '', 0),
(237, 1, '2016-05-21 15:04:06', '2016-05-21 15:04:06', '<p class="intro">Loops can execute a block of code as long as a specified condition is true.</p>\r\n\r\n\r\n<hr />\r\n\r\n<h2>The While Loop</h2>\r\nThe while loop loops through a block of code as long as a specified condition is true.\r\n<h3>Syntax</h3>\r\n<div class="w3-code w3-border notranslate">\r\n<div>while (<em>condition</em>) {\r\n<i>    code block to be executed</i>\r\n}</div>\r\n</div>\r\n<h3>Example</h3>\r\nIn the following example, the code in the loop will run, over and over again, as long as a variable (i) is less than 10:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate jsHigh">while (i &lt; 10) {\r\ntext += "The number is " + i;\r\ni++;\r\n}</div>\r\n</div>\r\n<div class="w3-example"></div>\r\n<table class="lamp">\r\n<tbody>\r\n<tr>\r\n<th><img src="http://www.w3schools.com/images/lamp.jpg" alt="Note" /></th>\r\n<td>If you forget to increase the variable used in the condition, the loop will never end. This will crash your browser.</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n\r\n<hr />\r\n\r\n<h2>The Do/While Loop</h2>\r\nThe do/while loop is a variant of the while loop. This loop will execute the code block once, before checking if the condition is true, then it will repeat the loop as long as the condition is true.\r\n<h3>Syntax</h3>\r\n<div class="w3-code w3-border notranslate">\r\n<div>do {\r\n<i>    code block to be executed\r\n</i>}\r\nwhile (<em>condition</em>);</div>\r\n</div>\r\n<h3>Example</h3>\r\nThe example below uses a do/while loop. The loop will always be executed at least once, even if the condition is false, because the code block is executed before the condition is tested:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate jsHigh">do {\r\ntext += "The number is " + i;\r\ni++;\r\n}\r\nwhile (i &lt; 10);</div>\r\n</div>\r\n<div class="w3-example"></div>\r\nDo not forget to increase the variable used in the condition, otherwise the loop will never end!\r\n\r\n<hr />\r\n\r\n<h2>Comparing For and While</h2>\r\nIf you have read the previous chapter, about the for loop, you will discover that a while loop is much the same as a for loop, with statement 1 and statement 3 omitted.\r\n\r\nThe loop in this example uses a <strong>for loop</strong> to collect the car names from the cars array:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate jsHigh">var cars = ["BMW", "Volvo", "Saab", "Ford"];\r\nvar i = 0;\r\nvar text = "";\r\n\r\nfor (;cars[i];) {\r\ntext += cars[i] + "&lt;br&gt;";\r\ni++;\r\n}</div>\r\n</div>\r\n<div class="w3-example"></div>\r\nThe loop in this example uses a <strong>while loop</strong> to collect the car names from the cars array:\r\n<div class="w3-example">\r\n<h3>Example</h3>\r\n<div class="w3-code notranslate jsHigh">var cars = ["BMW", "Volvo", "Saab", "Ford"];\r\nvar i = 0;\r\nvar text = "";\r\n\r\nwhile (cars[i]) {\r\ntext += cars[i] + "&lt;br&gt;";\r\ni++;\r\n}</div>\r\n</div>', 'JS Loop While', '', 'inherit', 'closed', 'closed', '', '211-revision-v1', '', '', '2016-05-21 15:04:06', '2016-05-21 15:04:06', '', 211, 'http://localhost/invatacel/2016/05/21/211-revision-v1/', 0, 'revision', '', 0),
(238, 1, '2016-05-22 20:01:46', '2016-05-22 20:01:46', '', 'logoInvatacel', '', 'inherit', 'open', 'closed', '', 'logoinvatacel', '', '', '2016-05-22 20:01:46', '2016-05-22 20:01:46', '', 0, 'http://localhost/invatacel/wp-content/uploads/2016/05/logoInvatacel.png', 0, 'attachment', 'image/png', 0),
(240, 1, '2016-05-22 20:04:09', '2016-05-22 20:04:09', '', 'download', '', 'inherit', 'open', 'closed', '', 'download', '', '', '2016-05-22 20:04:09', '2016-05-22 20:04:09', '', 0, 'http://localhost/invatacel/wp-content/uploads/2016/05/download.png', 0, 'attachment', 'image/png', 0),
(241, 1, '2016-05-22 21:01:19', '2016-05-22 21:01:19', '', 'OneSlide', '', 'publish', 'closed', 'closed', '', 'oneslide', '', '', '2016-05-22 21:01:19', '2016-05-22 21:01:19', '', 0, 'http://localhost/invatacel/?post_type=slideshow&#038;p=241', 0, 'slideshow', '', 0),
(242, 1, '2016-05-22 21:01:43', '2016-05-22 21:01:43', '[slideshow_deploy id=''241'']', 'Home', '', 'inherit', 'closed', 'closed', '', '55-revision-v1', '', '', '2016-05-22 21:01:43', '2016-05-22 21:01:43', '', 55, 'http://localhost/invatacel/2016/05/22/55-revision-v1/', 0, 'revision', '', 0),
(244, 1, '2016-05-22 21:08:33', '2016-05-22 21:08:33', '[text-slider]', 'Home', '', 'inherit', 'closed', 'closed', '', '55-revision-v1', '', '', '2016-05-22 21:08:33', '2016-05-22 21:08:33', '', 55, 'http://localhost/invatacel/2016/05/22/55-revision-v1/', 0, 'revision', '', 0),
(245, 1, '2016-05-22 21:17:12', '2016-05-22 21:17:12', '', 'New Slider', '', 'publish', 'closed', 'closed', '', 'new-slider', '', '', '2016-05-22 21:17:12', '2016-05-22 21:17:12', '', 0, 'http://localhost/invatacel/?post_type=ml-slider&p=245', 0, 'ml-slider', '', 0),
(246, 1, '2016-05-22 21:17:52', '2016-05-22 21:17:52', '[metaslider id=245]', 'Home', '', 'inherit', 'closed', 'closed', '', '55-revision-v1', '', '', '2016-05-22 21:17:52', '2016-05-22 21:17:52', '', 55, 'http://localhost/invatacel/2016/05/22/55-revision-v1/', 0, 'revision', '', 0),
(247, 1, '2016-05-22 21:24:41', '2016-05-22 21:24:41', '[quoteRotator]', 'Home', '', 'inherit', 'closed', 'closed', '', '55-revision-v1', '', '', '2016-05-22 21:24:41', '2016-05-22 21:24:41', '', 55, 'http://localhost/invatacel/2016/05/22/55-revision-v1/', 0, 'revision', '', 0),
(248, 1, '2016-05-23 16:48:34', '2016-05-23 16:48:34', 'YOLO team', 'Contact', '', 'inherit', 'closed', 'closed', '', '58-autosave-v1', '', '', '2016-05-23 16:48:34', '2016-05-23 16:48:34', '', 58, 'http://localhost/invatacel/2016/05/23/58-autosave-v1/', 0, 'revision', '', 0),
(249, 1, '2016-05-23 16:49:20', '2016-05-23 16:49:20', '<strong>YOLO team.</strong>\r\n\r\n<strong><em>Camin 7 OBS</em></strong>', 'Contact', '', 'inherit', 'closed', 'closed', '', '58-revision-v1', '', '', '2016-05-23 16:49:20', '2016-05-23 16:49:20', '', 58, 'http://localhost/invatacel/2016/05/23/58-revision-v1/', 0, 'revision', '', 0),
(250, 1, '2016-05-23 16:56:12', '0000-00-00 00:00:00', '', 'Auto Draft', '', 'auto-draft', 'open', 'open', '', '', '', '', '2016-05-23 16:56:12', '0000-00-00 00:00:00', '', 0, 'http://localhost/invatacel/?p=250', 0, 'post', '', 0),
(251, 1, '2016-05-23 16:57:45', '2016-05-23 16:57:45', '', 'js', '', 'inherit', 'open', 'closed', '', 'js', '', '', '2016-05-23 16:57:45', '2016-05-23 16:57:45', '', 63, 'http://localhost/invatacel/wp-content/uploads/2016/05/js.png', 0, 'attachment', 'image/png', 0),
(252, 1, '2016-05-23 17:02:52', '2016-05-23 17:02:52', '', 'html', '', 'inherit', 'open', 'closed', '', 'html-2', '', '', '2016-05-23 17:02:52', '2016-05-23 17:02:52', '', 39, 'http://localhost/invatacel/wp-content/uploads/2016/05/html.png', 0, 'attachment', 'image/png', 0),
(253, 1, '2016-05-23 17:04:14', '2016-05-23 17:04:14', '', 'pic_angular', '', 'inherit', 'open', 'closed', '', 'pic_angular', '', '', '2016-05-23 17:04:14', '2016-05-23 17:04:14', '', 51, 'http://localhost/invatacel/wp-content/uploads/2016/05/pic_angular.jpg', 0, 'attachment', 'image/jpeg', 0),
(254, 1, '2016-05-23 17:24:19', '2016-05-23 17:24:19', ' ', '', '', 'publish', 'closed', 'closed', '', '254', '', '', '2016-05-23 17:24:56', '2016-05-23 17:24:56', '', 0, 'http://localhost/invatacel/?p=254', 1, 'nav_menu_item', '', 0),
(255, 1, '2016-05-23 17:24:19', '2016-05-23 17:24:19', ' ', '', '', 'publish', 'closed', 'closed', '', '255', '', '', '2016-05-23 17:24:56', '2016-05-23 17:24:56', '', 0, 'http://localhost/invatacel/?p=255', 2, 'nav_menu_item', '', 0),
(256, 1, '2016-05-23 17:24:19', '2016-05-23 17:24:19', ' ', '', '', 'publish', 'closed', 'closed', '', '256', '', '', '2016-05-23 17:24:56', '2016-05-23 17:24:56', '', 0, 'http://localhost/invatacel/?p=256', 3, 'nav_menu_item', '', 0);

-- --------------------------------------------------------

--
-- Table structure for table `wp_quoterotator`
--

CREATE TABLE `wp_quoterotator` (
  `id` mediumint(9) NOT NULL,
  `quote` text,
  `author` varchar(255) NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `wp_quoterotator`
--

INSERT INTO `wp_quoterotator` (`id`, `quote`, `author`) VALUES
(1, 'Live as if you were to die tomorrow. Learn as if you were to live forever. <br />', 'Mahatma Gandhi'),
(2, 'Education is what remains after one has forgotten what one has learned in school.<br />', 'Albert Einstein');

-- --------------------------------------------------------

--
-- Table structure for table `wp_studypress_activity`
--

CREATE TABLE `wp_studypress_activity` (
  `id` bigint(20) UNSIGNED NOT NULL,
  `course_id` bigint(20) UNSIGNED DEFAULT NULL,
  `name` varchar(200) DEFAULT NULL,
  `duration` int(11) NOT NULL,
  `author` varchar(200) DEFAULT NULL,
  `description` longtext,
  `tags` longtext,
  `glossary` longtext,
  `picture_id` text,
  `shortcode` varchar(50) DEFAULT NULL,
  `author_id` bigint(20) DEFAULT NULL,
  `post_id` bigint(20) DEFAULT NULL,
  `type` varchar(10) DEFAULT NULL,
  `order_activity` int(11) NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `wp_studypress_activity`
--

INSERT INTO `wp_studypress_activity` (`id`, `course_id`, `name`, `duration`, `author`, `description`, `tags`, `glossary`, `picture_id`, `shortcode`, `author_id`, `post_id`, `type`, `order_activity`) VALUES
(1, 1, 'Prima lectie HTML', 0, 'Frim Ionatan', '', NULL, NULL, '', '[studypress_lesson id=1]', 2, 12, 'lesson', 1);

-- --------------------------------------------------------

--
-- Table structure for table `wp_studypress_configuration`
--

CREATE TABLE `wp_studypress_configuration` (
  `id` bigint(20) UNSIGNED NOT NULL,
  `name` varchar(200) DEFAULT NULL,
  `value` varchar(10) DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `wp_studypress_configuration`
--

INSERT INTO `wp_studypress_configuration` (`id`, `name`, `value`) VALUES
(1, 'version', '1.1'),
(2, 'showRate', 'true'),
(3, 'responsive', 'true'),
(4, 'bp_shareActivity', 'true'),
(5, 'share_socialNetwork', 'true'),
(6, 'bp_shareResult', 'true'),
(7, 'sizePlayer', 'medium'),
(8, 'showTag', 'true'),
(9, 'showGlossary', 'true');

-- --------------------------------------------------------

--
-- Table structure for table `wp_studypress_course`
--

CREATE TABLE `wp_studypress_course` (
  `course_id` bigint(20) UNSIGNED NOT NULL,
  `name` varchar(200) DEFAULT NULL,
  `description` longtext,
  `avancement` varchar(255) DEFAULT '0',
  `picture_id` varchar(255) DEFAULT NULL,
  `post_id` bigint(20) DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `wp_studypress_course`
--

INSERT INTO `wp_studypress_course` (`course_id`, `name`, `description`, `avancement`, `picture_id`, `post_id`) VALUES
(1, 'HTML', 'Tutorial HTML', NULL, '', 11);

-- --------------------------------------------------------

--
-- Table structure for table `wp_studypress_course_category`
--

CREATE TABLE `wp_studypress_course_category` (
  `course_id` bigint(20) UNSIGNED NOT NULL,
  `term_id` bigint(20) UNSIGNED NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `wp_studypress_course_category`
--

INSERT INTO `wp_studypress_course_category` (`course_id`, `term_id`) VALUES
(1, 3);

-- --------------------------------------------------------

--
-- Table structure for table `wp_studypress_course_users`
--

CREATE TABLE `wp_studypress_course_users` (
  `course_id` bigint(20) UNSIGNED NOT NULL,
  `user_id` bigint(20) UNSIGNED NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `wp_studypress_course_users`
--

INSERT INTO `wp_studypress_course_users` (`course_id`, `user_id`) VALUES
(1, 2);

-- --------------------------------------------------------

--
-- Table structure for table `wp_studypress_domain`
--

CREATE TABLE `wp_studypress_domain` (
  `id` bigint(20) UNSIGNED NOT NULL,
  `name` varchar(200) DEFAULT NULL,
  `description` longtext
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

-- --------------------------------------------------------

--
-- Table structure for table `wp_studypress_gcourse`
--

CREATE TABLE `wp_studypress_gcourse` (
  `id` bigint(20) UNSIGNED NOT NULL,
  `course_id` bigint(20) UNSIGNED DEFAULT NULL,
  `group_bp_id` bigint(20) UNSIGNED DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

-- --------------------------------------------------------

--
-- Table structure for table `wp_studypress_propositions`
--

CREATE TABLE `wp_studypress_propositions` (
  `id` bigint(20) UNSIGNED NOT NULL,
  `question_id` bigint(20) UNSIGNED DEFAULT NULL,
  `content` text,
  `type` varchar(10) DEFAULT NULL,
  `order_proposition` int(11) NOT NULL,
  `col` varchar(255) DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

-- --------------------------------------------------------

--
-- Table structure for table `wp_studypress_questions`
--

CREATE TABLE `wp_studypress_questions` (
  `id` bigint(20) UNSIGNED NOT NULL,
  `quiz_id` bigint(20) UNSIGNED DEFAULT NULL,
  `content` text,
  `order_question` int(11) NOT NULL,
  `type_question` varchar(25) DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

-- --------------------------------------------------------

--
-- Table structure for table `wp_studypress_quiz_result`
--

CREATE TABLE `wp_studypress_quiz_result` (
  `id` bigint(20) UNSIGNED NOT NULL,
  `quiz_id` bigint(20) UNSIGNED DEFAULT NULL,
  `user_id` bigint(20) UNSIGNED DEFAULT NULL,
  `result_date` datetime DEFAULT NULL,
  `response` longtext,
  `note` int(11) DEFAULT NULL,
  `nbr_questions` int(11) DEFAULT NULL,
  `nbr_corrects` int(11) DEFAULT NULL,
  `begin_date` varchar(30) DEFAULT NULL,
  `validate` varchar(6) DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

-- --------------------------------------------------------

--
-- Table structure for table `wp_studypress_rate_domain`
--

CREATE TABLE `wp_studypress_rate_domain` (
  `id` bigint(20) UNSIGNED NOT NULL,
  `activity_id` bigint(20) UNSIGNED DEFAULT NULL,
  `value` int(11) DEFAULT NULL,
  `rate_date` datetime DEFAULT NULL,
  `user_id` bigint(20) UNSIGNED DEFAULT NULL,
  `domain_id` bigint(20) UNSIGNED DEFAULT NULL,
  `ip` int(10) UNSIGNED DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

-- --------------------------------------------------------

--
-- Table structure for table `wp_studypress_rate_quality`
--

CREATE TABLE `wp_studypress_rate_quality` (
  `id` bigint(20) UNSIGNED NOT NULL,
  `activity_id` bigint(20) UNSIGNED DEFAULT NULL,
  `value` int(11) DEFAULT NULL,
  `rate_date` datetime DEFAULT NULL,
  `user_id` bigint(20) UNSIGNED DEFAULT NULL,
  `ip` int(10) UNSIGNED DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

-- --------------------------------------------------------

--
-- Table structure for table `wp_studypress_slide`
--

CREATE TABLE `wp_studypress_slide` (
  `id` bigint(20) UNSIGNED NOT NULL,
  `lesson_id` bigint(20) UNSIGNED DEFAULT NULL,
  `name` varchar(200) DEFAULT NULL,
  `content` longtext,
  `order_slide` int(11) NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `wp_studypress_slide`
--

INSERT INTO `wp_studypress_slide` (`id`, `lesson_id`, `name`, `content`, `order_slide`) VALUES
(1, 1, 'Ce este HTML ?', '<p><b>HyperText Markup Language</b> (<b>HTML</b>) este un limbaj de marcare utilizat pentru crearea paginilor web ce pot fi afi?ate într-un browser (sau navigator). Scopul HTML este mai degrab? prezentarea informa?iilor – paragrafe, fonturi, tabele ?.a.m.d. – decât descrierea semanticii documentului.</p>', 1);

-- --------------------------------------------------------

--
-- Table structure for table `wp_studypress_visite`
--

CREATE TABLE `wp_studypress_visite` (
  `id` bigint(20) UNSIGNED NOT NULL,
  `activity_id` bigint(20) UNSIGNED DEFAULT NULL,
  `ip` varchar(40) DEFAULT NULL,
  `date_visite` datetime DEFAULT NULL,
  `user_id` bigint(20) UNSIGNED DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `wp_studypress_visite`
--

INSERT INTO `wp_studypress_visite` (`id`, `activity_id`, `ip`, `date_visite`, `user_id`) VALUES
(1, 1, NULL, '2016-04-10 18:12:39', 2),
(2, 1, NULL, '2016-04-10 18:18:27', 1);

-- --------------------------------------------------------

--
-- Table structure for table `wp_termmeta`
--

CREATE TABLE `wp_termmeta` (
  `meta_id` bigint(20) UNSIGNED NOT NULL,
  `term_id` bigint(20) UNSIGNED NOT NULL DEFAULT '0',
  `meta_key` varchar(255) COLLATE utf8mb4_unicode_ci DEFAULT NULL,
  `meta_value` longtext COLLATE utf8mb4_unicode_ci
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- --------------------------------------------------------

--
-- Table structure for table `wp_terms`
--

CREATE TABLE `wp_terms` (
  `term_id` bigint(20) UNSIGNED NOT NULL,
  `name` varchar(200) COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT '',
  `slug` varchar(200) COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT '',
  `term_group` bigint(10) NOT NULL DEFAULT '0'
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

--
-- Dumping data for table `wp_terms`
--

INSERT INTO `wp_terms` (`term_id`, `name`, `slug`, `term_group`) VALUES
(1, 'Uncategorized', 'uncategorized', 0),
(2, 'main', 'main', 0),
(3, 'Tutoriale despre tehnologii WEB', 'tutoriale-despre-tehnologii-web', 0),
(4, 'Tehnologii WEB', 'tehnologii-web', 0),
(5, '245', '245', 0),
(6, 'footer', 'footer', 0);

-- --------------------------------------------------------

--
-- Table structure for table `wp_term_relationships`
--

CREATE TABLE `wp_term_relationships` (
  `object_id` bigint(20) UNSIGNED NOT NULL DEFAULT '0',
  `term_taxonomy_id` bigint(20) UNSIGNED NOT NULL DEFAULT '0',
  `term_order` int(11) NOT NULL DEFAULT '0'
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

--
-- Dumping data for table `wp_term_relationships`
--

INSERT INTO `wp_term_relationships` (`object_id`, `term_taxonomy_id`, `term_order`) VALUES
(21, 4, 0),
(27, 2, 0),
(49, 1, 0),
(57, 2, 0),
(60, 2, 0),
(61, 2, 0),
(254, 6, 0),
(255, 6, 0),
(256, 6, 0);

-- --------------------------------------------------------

--
-- Table structure for table `wp_term_taxonomy`
--

CREATE TABLE `wp_term_taxonomy` (
  `term_taxonomy_id` bigint(20) UNSIGNED NOT NULL,
  `term_id` bigint(20) UNSIGNED NOT NULL DEFAULT '0',
  `taxonomy` varchar(32) COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT '',
  `description` longtext COLLATE utf8mb4_unicode_ci NOT NULL,
  `parent` bigint(20) UNSIGNED NOT NULL DEFAULT '0',
  `count` bigint(20) NOT NULL DEFAULT '0'
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

--
-- Dumping data for table `wp_term_taxonomy`
--

INSERT INTO `wp_term_taxonomy` (`term_taxonomy_id`, `term_id`, `taxonomy`, `description`, `parent`, `count`) VALUES
(1, 1, 'category', '', 0, 0),
(2, 2, 'nav_menu', '', 0, 4),
(3, 3, 'category', '', 0, 0),
(4, 4, 'course_category', '', 0, 0),
(5, 5, 'ml-slider', '', 0, 0),
(6, 6, 'nav_menu', '', 0, 3);

-- --------------------------------------------------------

--
-- Table structure for table `wp_usermeta`
--

CREATE TABLE `wp_usermeta` (
  `umeta_id` bigint(20) UNSIGNED NOT NULL,
  `user_id` bigint(20) UNSIGNED NOT NULL DEFAULT '0',
  `meta_key` varchar(255) COLLATE utf8mb4_unicode_ci DEFAULT NULL,
  `meta_value` longtext COLLATE utf8mb4_unicode_ci
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

--
-- Dumping data for table `wp_usermeta`
--

INSERT INTO `wp_usermeta` (`umeta_id`, `user_id`, `meta_key`, `meta_value`) VALUES
(1, 1, 'nickname', 'admin'),
(2, 1, 'first_name', ''),
(3, 1, 'last_name', ''),
(4, 1, 'description', ''),
(5, 1, 'rich_editing', 'true'),
(6, 1, 'comment_shortcuts', 'false'),
(7, 1, 'admin_color', 'fresh'),
(8, 1, 'use_ssl', '0'),
(9, 1, 'show_admin_bar_front', 'true'),
(10, 1, 'wp_capabilities', 'a:1:{s:13:"administrator";b:1;}'),
(11, 1, 'wp_user_level', '10'),
(12, 1, 'dismissed_wp_pointers', ''),
(13, 1, 'show_welcome_panel', '1'),
(15, 1, 'wp_dashboard_quick_press_last_post_id', '68'),
(16, 1, 'managenav-menuscolumnshidden', 'a:5:{i:0;s:11:"link-target";i:1;s:11:"css-classes";i:2;s:3:"xfn";i:3;s:11:"description";i:4;s:15:"title-attribute";}'),
(17, 1, 'metaboxhidden_nav-menus', 'a:2:{i:0;s:12:"add-post_tag";i:1;s:15:"add-post_format";}'),
(18, 1, 'closedpostboxes_nav-menus', 'a:0:{}'),
(19, 1, 'nav_menu_recently_edited', '6'),
(20, 2, 'nickname', 'ionatan'),
(21, 2, 'first_name', 'Frim'),
(22, 2, 'last_name', 'Ionatan'),
(23, 2, 'description', ''),
(24, 2, 'rich_editing', 'true'),
(25, 2, 'comment_shortcuts', 'false'),
(26, 2, 'admin_color', 'fresh'),
(27, 2, 'use_ssl', '0'),
(28, 2, 'show_admin_bar_front', 'true'),
(29, 2, 'wp_capabilities', 'a:1:{s:13:"administrator";b:1;}'),
(30, 2, 'wp_user_level', '10'),
(31, 2, 'dismissed_wp_pointers', ''),
(32, 3, 'nickname', 'Ovidiu'),
(33, 3, 'first_name', 'Ovidiu'),
(34, 3, 'last_name', 'Bodian'),
(35, 3, 'description', ''),
(36, 3, 'rich_editing', 'true'),
(37, 3, 'comment_shortcuts', 'false'),
(38, 3, 'admin_color', 'fresh'),
(39, 3, 'use_ssl', '0'),
(40, 3, 'show_admin_bar_front', 'true'),
(41, 3, 'wp_capabilities', 'a:1:{s:13:"administrator";b:1;}'),
(42, 3, 'wp_user_level', '10'),
(43, 3, 'dismissed_wp_pointers', ''),
(44, 4, 'nickname', 'loredana'),
(45, 4, 'first_name', 'Loredana'),
(46, 4, 'last_name', 'Farcas'),
(47, 4, 'description', ''),
(48, 4, 'rich_editing', 'true'),
(49, 4, 'comment_shortcuts', 'false'),
(50, 4, 'admin_color', 'fresh'),
(51, 4, 'use_ssl', '0'),
(52, 4, 'show_admin_bar_front', 'true'),
(53, 4, 'wp_capabilities', 'a:1:{s:13:"administrator";b:1;}'),
(54, 4, 'wp_user_level', '10'),
(55, 4, 'dismissed_wp_pointers', ''),
(69, 3, 'wp_dashboard_quick_press_last_post_id', '5'),
(71, 4, 'wp_dashboard_quick_press_last_post_id', '6'),
(73, 6, 'nickname', 'octavian'),
(74, 6, 'first_name', 'Octavian'),
(75, 6, 'last_name', 'Bologa'),
(76, 6, 'description', ''),
(77, 6, 'rich_editing', 'true'),
(78, 6, 'comment_shortcuts', 'false'),
(79, 6, 'admin_color', 'fresh'),
(80, 6, 'use_ssl', '0'),
(81, 6, 'show_admin_bar_front', 'true'),
(82, 6, 'wp_capabilities', 'a:1:{s:13:"administrator";b:1;}'),
(83, 6, 'wp_user_level', '10'),
(84, 6, 'dismissed_wp_pointers', ''),
(86, 6, 'wp_dashboard_quick_press_last_post_id', '7'),
(89, 2, 'wp_dashboard_quick_press_last_post_id', '8'),
(93, 1, 'wp_user-settings', 'libraryContent=browse&editor=tinymce&hidetb=1'),
(94, 1, 'wp_user-settings-time', '1464022670'),
(96, 2, 'wp_user-settings', 'libraryContent=upload&editor=tinymce'),
(97, 2, 'wp_user-settings-time', '1460311834'),
(99, 2, 'nav_menu_recently_edited', '2'),
(100, 2, 'managenav-menuscolumnshidden', 'a:5:{i:0;s:11:"link-target";i:1;s:11:"css-classes";i:2;s:3:"xfn";i:3;s:11:"description";i:4;s:15:"title-attribute";}'),
(101, 2, 'metaboxhidden_nav-menus', 'a:2:{i:0;s:12:"add-post_tag";i:1;s:15:"add-post_format";}'),
(102, 2, 'closedpostboxes_nav-menus', 'a:0:{}'),
(103, 2, 'manageedit-lp_questioncolumnshidden', 'a:1:{i:0;s:21:"taxonomy-question-tag";}'),
(105, 1, 'manageedit-lp_questioncolumnshidden', 'a:1:{i:0;s:21:"taxonomy-question-tag";}'),
(106, 1, 'wporg_favorites', ''),
(112, 1, 'closedpostboxes_lp_lesson', 'a:0:{}'),
(113, 1, 'metaboxhidden_lp_lesson', 'a:1:{i:0;s:7:"slugdiv";}'),
(114, 1, 'session_tokens', 'a:1:{s:64:"f35d36e237e4e72cf4c50e20415a15227767e7a879d7a51464847559df4ebd16";a:4:{s:10:"expiration";i:1464122585;s:2:"ip";s:3:"::1";s:2:"ua";s:115:"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/50.0.2661.102 Safari/537.36";s:5:"login";i:1463949785;}}');

-- --------------------------------------------------------

--
-- Table structure for table `wp_users`
--

CREATE TABLE `wp_users` (
  `ID` bigint(20) UNSIGNED NOT NULL,
  `user_login` varchar(60) COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT '',
  `user_pass` varchar(255) COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT '',
  `user_nicename` varchar(50) COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT '',
  `user_email` varchar(100) COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT '',
  `user_url` varchar(100) COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT '',
  `user_registered` datetime NOT NULL DEFAULT '0000-00-00 00:00:00',
  `user_activation_key` varchar(255) COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT '',
  `user_status` int(11) NOT NULL DEFAULT '0',
  `display_name` varchar(250) COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT ''
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

--
-- Dumping data for table `wp_users`
--

INSERT INTO `wp_users` (`ID`, `user_login`, `user_pass`, `user_nicename`, `user_email`, `user_url`, `user_registered`, `user_activation_key`, `user_status`, `display_name`) VALUES
(1, 'admin', '$P$BRZFlWANjDP0kcZpyp21IOj5lPEECb0', 'admin', 'ionatanfrim@gmail.com', '', '2016-04-09 11:31:30', '', 0, 'admin'),
(2, 'ionatan', '$P$BKCs/hkMrxH8X57c4ADDqj7FoXkRQC/', 'ionatan', 'ionatanfrim@yahoo.com', '', '2016-04-09 13:16:55', '1460207817:$P$B77tqw6cu6Fxjjms6pACgUPDcQOuuO1', 0, 'Frim Ionatan'),
(3, 'Ovidiu', '$P$BtGVNMNPUln6usLHd5V.ulGz7cKWRU/', 'ovidiu', 'ovi@bodi.com', '', '2016-04-09 13:18:37', '1460207918:$P$BEWJmZ17LfyqdRiIbE2Wxgv106kh4d1', 0, 'Ovidiu Bodean'),
(4, 'loredana', '$P$BkUzn8dMsSSh./QVJuQT8Ly2gYfA/S0', 'loredana', 'lore@far.com', '', '2016-04-09 13:23:42', '1460208224:$P$BKf9HMDznRSjEwzsUIsiFP0eGf3wpj/', 0, 'Loredana Farcas'),
(6, 'octavian', '$P$BV/v06KhSu8b6IznQbH3ivCHSEZqeQ.', 'octavian', 'octa@bo.com', '', '2016-04-09 13:37:58', '1460209080:$P$BrO3YZZsbF19Dwl.DvVtwcwBdUalYp0', 0, 'Octavian Bologa');

--
-- Indexes for dumped tables
--

--
-- Indexes for table `wp_commentmeta`
--
ALTER TABLE `wp_commentmeta`
  ADD PRIMARY KEY (`meta_id`),
  ADD KEY `comment_id` (`comment_id`),
  ADD KEY `meta_key` (`meta_key`(191));

--
-- Indexes for table `wp_comments`
--
ALTER TABLE `wp_comments`
  ADD PRIMARY KEY (`comment_ID`),
  ADD KEY `comment_post_ID` (`comment_post_ID`),
  ADD KEY `comment_approved_date_gmt` (`comment_approved`,`comment_date_gmt`),
  ADD KEY `comment_date_gmt` (`comment_date_gmt`),
  ADD KEY `comment_parent` (`comment_parent`),
  ADD KEY `comment_author_email` (`comment_author_email`(10));

--
-- Indexes for table `wp_learnpress_order_itemmeta`
--
ALTER TABLE `wp_learnpress_order_itemmeta`
  ADD PRIMARY KEY (`meta_id`);

--
-- Indexes for table `wp_learnpress_order_items`
--
ALTER TABLE `wp_learnpress_order_items`
  ADD PRIMARY KEY (`order_item_id`);

--
-- Indexes for table `wp_learnpress_question_answers`
--
ALTER TABLE `wp_learnpress_question_answers`
  ADD PRIMARY KEY (`question_answer_id`);

--
-- Indexes for table `wp_learnpress_quiz_questions`
--
ALTER TABLE `wp_learnpress_quiz_questions`
  ADD PRIMARY KEY (`quiz_question_id`);

--
-- Indexes for table `wp_learnpress_review_logs`
--
ALTER TABLE `wp_learnpress_review_logs`
  ADD PRIMARY KEY (`review_log_id`);

--
-- Indexes for table `wp_learnpress_sections`
--
ALTER TABLE `wp_learnpress_sections`
  ADD PRIMARY KEY (`section_id`);

--
-- Indexes for table `wp_learnpress_section_items`
--
ALTER TABLE `wp_learnpress_section_items`
  ADD PRIMARY KEY (`section_item_id`);

--
-- Indexes for table `wp_learnpress_user_courses`
--
ALTER TABLE `wp_learnpress_user_courses`
  ADD PRIMARY KEY (`user_course_id`);

--
-- Indexes for table `wp_learnpress_user_lessons`
--
ALTER TABLE `wp_learnpress_user_lessons`
  ADD PRIMARY KEY (`user_lesson_id`);

--
-- Indexes for table `wp_learnpress_user_quizmeta`
--
ALTER TABLE `wp_learnpress_user_quizmeta`
  ADD PRIMARY KEY (`meta_id`);

--
-- Indexes for table `wp_learnpress_user_quizzes`
--
ALTER TABLE `wp_learnpress_user_quizzes`
  ADD PRIMARY KEY (`user_quiz_id`);

--
-- Indexes for table `wp_links`
--
ALTER TABLE `wp_links`
  ADD PRIMARY KEY (`link_id`),
  ADD KEY `link_visible` (`link_visible`);

--
-- Indexes for table `wp_options`
--
ALTER TABLE `wp_options`
  ADD PRIMARY KEY (`option_id`),
  ADD UNIQUE KEY `option_name` (`option_name`);

--
-- Indexes for table `wp_postmeta`
--
ALTER TABLE `wp_postmeta`
  ADD PRIMARY KEY (`meta_id`),
  ADD KEY `post_id` (`post_id`),
  ADD KEY `meta_key` (`meta_key`(191));

--
-- Indexes for table `wp_posts`
--
ALTER TABLE `wp_posts`
  ADD PRIMARY KEY (`ID`),
  ADD KEY `post_name` (`post_name`(191)),
  ADD KEY `type_status_date` (`post_type`,`post_status`,`post_date`,`ID`),
  ADD KEY `post_parent` (`post_parent`),
  ADD KEY `post_author` (`post_author`);

--
-- Indexes for table `wp_quoterotator`
--
ALTER TABLE `wp_quoterotator`
  ADD PRIMARY KEY (`id`);

--
-- Indexes for table `wp_studypress_activity`
--
ALTER TABLE `wp_studypress_activity`
  ADD PRIMARY KEY (`id`),
  ADD KEY `course_id` (`course_id`);

--
-- Indexes for table `wp_studypress_configuration`
--
ALTER TABLE `wp_studypress_configuration`
  ADD PRIMARY KEY (`id`);

--
-- Indexes for table `wp_studypress_course`
--
ALTER TABLE `wp_studypress_course`
  ADD PRIMARY KEY (`course_id`);

--
-- Indexes for table `wp_studypress_course_category`
--
ALTER TABLE `wp_studypress_course_category`
  ADD PRIMARY KEY (`course_id`,`term_id`),
  ADD KEY `term_id` (`term_id`);

--
-- Indexes for table `wp_studypress_course_users`
--
ALTER TABLE `wp_studypress_course_users`
  ADD PRIMARY KEY (`course_id`,`user_id`),
  ADD KEY `user_id` (`user_id`);

--
-- Indexes for table `wp_studypress_domain`
--
ALTER TABLE `wp_studypress_domain`
  ADD PRIMARY KEY (`id`),
  ADD UNIQUE KEY `name` (`name`);

--
-- Indexes for table `wp_studypress_gcourse`
--
ALTER TABLE `wp_studypress_gcourse`
  ADD PRIMARY KEY (`id`),
  ADD UNIQUE KEY `group_bp_id` (`group_bp_id`,`course_id`),
  ADD KEY `course_id` (`course_id`);

--
-- Indexes for table `wp_studypress_propositions`
--
ALTER TABLE `wp_studypress_propositions`
  ADD PRIMARY KEY (`id`),
  ADD KEY `question_id` (`question_id`);

--
-- Indexes for table `wp_studypress_questions`
--
ALTER TABLE `wp_studypress_questions`
  ADD PRIMARY KEY (`id`),
  ADD KEY `quiz_id` (`quiz_id`);

--
-- Indexes for table `wp_studypress_quiz_result`
--
ALTER TABLE `wp_studypress_quiz_result`
  ADD PRIMARY KEY (`id`),
  ADD UNIQUE KEY `quiz_id` (`quiz_id`,`user_id`);

--
-- Indexes for table `wp_studypress_rate_domain`
--
ALTER TABLE `wp_studypress_rate_domain`
  ADD PRIMARY KEY (`id`),
  ADD UNIQUE KEY `activity_id` (`activity_id`,`domain_id`,`user_id`),
  ADD KEY `user_id` (`user_id`),
  ADD KEY `domain_id` (`domain_id`);

--
-- Indexes for table `wp_studypress_rate_quality`
--
ALTER TABLE `wp_studypress_rate_quality`
  ADD PRIMARY KEY (`id`),
  ADD KEY `activity_id` (`activity_id`),
  ADD KEY `user_id` (`user_id`);

--
-- Indexes for table `wp_studypress_slide`
--
ALTER TABLE `wp_studypress_slide`
  ADD PRIMARY KEY (`id`),
  ADD KEY `lesson_id` (`lesson_id`);

--
-- Indexes for table `wp_studypress_visite`
--
ALTER TABLE `wp_studypress_visite`
  ADD PRIMARY KEY (`id`),
  ADD KEY `activity_id` (`activity_id`),
  ADD KEY `user_id` (`user_id`);

--
-- Indexes for table `wp_termmeta`
--
ALTER TABLE `wp_termmeta`
  ADD PRIMARY KEY (`meta_id`),
  ADD KEY `term_id` (`term_id`),
  ADD KEY `meta_key` (`meta_key`(191));

--
-- Indexes for table `wp_terms`
--
ALTER TABLE `wp_terms`
  ADD PRIMARY KEY (`term_id`),
  ADD KEY `slug` (`slug`(191)),
  ADD KEY `name` (`name`(191));

--
-- Indexes for table `wp_term_relationships`
--
ALTER TABLE `wp_term_relationships`
  ADD PRIMARY KEY (`object_id`,`term_taxonomy_id`),
  ADD KEY `term_taxonomy_id` (`term_taxonomy_id`);

--
-- Indexes for table `wp_term_taxonomy`
--
ALTER TABLE `wp_term_taxonomy`
  ADD PRIMARY KEY (`term_taxonomy_id`),
  ADD UNIQUE KEY `term_id_taxonomy` (`term_id`,`taxonomy`),
  ADD KEY `taxonomy` (`taxonomy`);

--
-- Indexes for table `wp_usermeta`
--
ALTER TABLE `wp_usermeta`
  ADD PRIMARY KEY (`umeta_id`),
  ADD KEY `user_id` (`user_id`),
  ADD KEY `meta_key` (`meta_key`(191));

--
-- Indexes for table `wp_users`
--
ALTER TABLE `wp_users`
  ADD PRIMARY KEY (`ID`),
  ADD KEY `user_login_key` (`user_login`),
  ADD KEY `user_nicename` (`user_nicename`),
  ADD KEY `user_email` (`user_email`);

--
-- AUTO_INCREMENT for dumped tables
--

--
-- AUTO_INCREMENT for table `wp_commentmeta`
--
ALTER TABLE `wp_commentmeta`
  MODIFY `meta_id` bigint(20) UNSIGNED NOT NULL AUTO_INCREMENT;
--
-- AUTO_INCREMENT for table `wp_comments`
--
ALTER TABLE `wp_comments`
  MODIFY `comment_ID` bigint(20) UNSIGNED NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=2;
--
-- AUTO_INCREMENT for table `wp_learnpress_order_itemmeta`
--
ALTER TABLE `wp_learnpress_order_itemmeta`
  MODIFY `meta_id` bigint(20) UNSIGNED NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=13;
--
-- AUTO_INCREMENT for table `wp_learnpress_order_items`
--
ALTER TABLE `wp_learnpress_order_items`
  MODIFY `order_item_id` bigint(20) UNSIGNED NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=4;
--
-- AUTO_INCREMENT for table `wp_learnpress_question_answers`
--
ALTER TABLE `wp_learnpress_question_answers`
  MODIFY `question_answer_id` bigint(20) UNSIGNED NOT NULL AUTO_INCREMENT;
--
-- AUTO_INCREMENT for table `wp_learnpress_quiz_questions`
--
ALTER TABLE `wp_learnpress_quiz_questions`
  MODIFY `quiz_question_id` bigint(20) UNSIGNED NOT NULL AUTO_INCREMENT;
--
-- AUTO_INCREMENT for table `wp_learnpress_review_logs`
--
ALTER TABLE `wp_learnpress_review_logs`
  MODIFY `review_log_id` bigint(11) UNSIGNED NOT NULL AUTO_INCREMENT;
--
-- AUTO_INCREMENT for table `wp_learnpress_sections`
--
ALTER TABLE `wp_learnpress_sections`
  MODIFY `section_id` bigint(11) UNSIGNED NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=10;
--
-- AUTO_INCREMENT for table `wp_learnpress_section_items`
--
ALTER TABLE `wp_learnpress_section_items`
  MODIFY `section_item_id` bigint(11) UNSIGNED NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=102;
--
-- AUTO_INCREMENT for table `wp_learnpress_user_courses`
--
ALTER TABLE `wp_learnpress_user_courses`
  MODIFY `user_course_id` bigint(11) UNSIGNED NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=4;
--
-- AUTO_INCREMENT for table `wp_learnpress_user_lessons`
--
ALTER TABLE `wp_learnpress_user_lessons`
  MODIFY `user_lesson_id` bigint(11) UNSIGNED NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=65;
--
-- AUTO_INCREMENT for table `wp_learnpress_user_quizmeta`
--
ALTER TABLE `wp_learnpress_user_quizmeta`
  MODIFY `meta_id` bigint(11) UNSIGNED NOT NULL AUTO_INCREMENT;
--
-- AUTO_INCREMENT for table `wp_learnpress_user_quizzes`
--
ALTER TABLE `wp_learnpress_user_quizzes`
  MODIFY `user_quiz_id` bigint(11) UNSIGNED NOT NULL AUTO_INCREMENT;
--
-- AUTO_INCREMENT for table `wp_links`
--
ALTER TABLE `wp_links`
  MODIFY `link_id` bigint(20) UNSIGNED NOT NULL AUTO_INCREMENT;
--
-- AUTO_INCREMENT for table `wp_options`
--
ALTER TABLE `wp_options`
  MODIFY `option_id` bigint(20) UNSIGNED NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=571;
--
-- AUTO_INCREMENT for table `wp_postmeta`
--
ALTER TABLE `wp_postmeta`
  MODIFY `meta_id` bigint(20) UNSIGNED NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=785;
--
-- AUTO_INCREMENT for table `wp_posts`
--
ALTER TABLE `wp_posts`
  MODIFY `ID` bigint(20) UNSIGNED NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=257;
--
-- AUTO_INCREMENT for table `wp_quoterotator`
--
ALTER TABLE `wp_quoterotator`
  MODIFY `id` mediumint(9) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=3;
--
-- AUTO_INCREMENT for table `wp_studypress_activity`
--
ALTER TABLE `wp_studypress_activity`
  MODIFY `id` bigint(20) UNSIGNED NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=2;
--
-- AUTO_INCREMENT for table `wp_studypress_configuration`
--
ALTER TABLE `wp_studypress_configuration`
  MODIFY `id` bigint(20) UNSIGNED NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=10;
--
-- AUTO_INCREMENT for table `wp_studypress_course`
--
ALTER TABLE `wp_studypress_course`
  MODIFY `course_id` bigint(20) UNSIGNED NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=2;
--
-- AUTO_INCREMENT for table `wp_studypress_domain`
--
ALTER TABLE `wp_studypress_domain`
  MODIFY `id` bigint(20) UNSIGNED NOT NULL AUTO_INCREMENT;
--
-- AUTO_INCREMENT for table `wp_studypress_gcourse`
--
ALTER TABLE `wp_studypress_gcourse`
  MODIFY `id` bigint(20) UNSIGNED NOT NULL AUTO_INCREMENT;
--
-- AUTO_INCREMENT for table `wp_studypress_propositions`
--
ALTER TABLE `wp_studypress_propositions`
  MODIFY `id` bigint(20) UNSIGNED NOT NULL AUTO_INCREMENT;
--
-- AUTO_INCREMENT for table `wp_studypress_questions`
--
ALTER TABLE `wp_studypress_questions`
  MODIFY `id` bigint(20) UNSIGNED NOT NULL AUTO_INCREMENT;
--
-- AUTO_INCREMENT for table `wp_studypress_quiz_result`
--
ALTER TABLE `wp_studypress_quiz_result`
  MODIFY `id` bigint(20) UNSIGNED NOT NULL AUTO_INCREMENT;
--
-- AUTO_INCREMENT for table `wp_studypress_rate_domain`
--
ALTER TABLE `wp_studypress_rate_domain`
  MODIFY `id` bigint(20) UNSIGNED NOT NULL AUTO_INCREMENT;
--
-- AUTO_INCREMENT for table `wp_studypress_rate_quality`
--
ALTER TABLE `wp_studypress_rate_quality`
  MODIFY `id` bigint(20) UNSIGNED NOT NULL AUTO_INCREMENT;
--
-- AUTO_INCREMENT for table `wp_studypress_slide`
--
ALTER TABLE `wp_studypress_slide`
  MODIFY `id` bigint(20) UNSIGNED NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=2;
--
-- AUTO_INCREMENT for table `wp_studypress_visite`
--
ALTER TABLE `wp_studypress_visite`
  MODIFY `id` bigint(20) UNSIGNED NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=3;
--
-- AUTO_INCREMENT for table `wp_termmeta`
--
ALTER TABLE `wp_termmeta`
  MODIFY `meta_id` bigint(20) UNSIGNED NOT NULL AUTO_INCREMENT;
--
-- AUTO_INCREMENT for table `wp_terms`
--
ALTER TABLE `wp_terms`
  MODIFY `term_id` bigint(20) UNSIGNED NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=7;
--
-- AUTO_INCREMENT for table `wp_term_taxonomy`
--
ALTER TABLE `wp_term_taxonomy`
  MODIFY `term_taxonomy_id` bigint(20) UNSIGNED NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=7;
--
-- AUTO_INCREMENT for table `wp_usermeta`
--
ALTER TABLE `wp_usermeta`
  MODIFY `umeta_id` bigint(20) UNSIGNED NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=115;
--
-- AUTO_INCREMENT for table `wp_users`
--
ALTER TABLE `wp_users`
  MODIFY `ID` bigint(20) UNSIGNED NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=7;
--
-- Constraints for dumped tables
--

--
-- Constraints for table `wp_studypress_activity`
--
ALTER TABLE `wp_studypress_activity`
  ADD CONSTRAINT `wp_studypress_activity_ibfk_1` FOREIGN KEY (`course_id`) REFERENCES `wp_studypress_course` (`course_id`);

--
-- Constraints for table `wp_studypress_course_category`
--
ALTER TABLE `wp_studypress_course_category`
  ADD CONSTRAINT `wp_studypress_course_category_ibfk_1` FOREIGN KEY (`term_id`) REFERENCES `wp_terms` (`term_id`),
  ADD CONSTRAINT `wp_studypress_course_category_ibfk_2` FOREIGN KEY (`course_id`) REFERENCES `wp_studypress_course` (`course_id`);

--
-- Constraints for table `wp_studypress_course_users`
--
ALTER TABLE `wp_studypress_course_users`
  ADD CONSTRAINT `wp_studypress_course_users_ibfk_1` FOREIGN KEY (`user_id`) REFERENCES `wp_users` (`ID`),
  ADD CONSTRAINT `wp_studypress_course_users_ibfk_2` FOREIGN KEY (`course_id`) REFERENCES `wp_studypress_course` (`course_id`);

--
-- Constraints for table `wp_studypress_gcourse`
--
ALTER TABLE `wp_studypress_gcourse`
  ADD CONSTRAINT `wp_studypress_gcourse_ibfk_1` FOREIGN KEY (`course_id`) REFERENCES `wp_studypress_course` (`course_id`);

--
-- Constraints for table `wp_studypress_propositions`
--
ALTER TABLE `wp_studypress_propositions`
  ADD CONSTRAINT `wp_studypress_propositions_ibfk_1` FOREIGN KEY (`question_id`) REFERENCES `wp_studypress_questions` (`id`);

--
-- Constraints for table `wp_studypress_questions`
--
ALTER TABLE `wp_studypress_questions`
  ADD CONSTRAINT `wp_studypress_questions_ibfk_1` FOREIGN KEY (`quiz_id`) REFERENCES `wp_studypress_activity` (`id`);

--
-- Constraints for table `wp_studypress_quiz_result`
--
ALTER TABLE `wp_studypress_quiz_result`
  ADD CONSTRAINT `wp_studypress_quiz_result_ibfk_1` FOREIGN KEY (`quiz_id`) REFERENCES `wp_studypress_activity` (`id`);

--
-- Constraints for table `wp_studypress_rate_domain`
--
ALTER TABLE `wp_studypress_rate_domain`
  ADD CONSTRAINT `wp_studypress_rate_domain_ibfk_1` FOREIGN KEY (`activity_id`) REFERENCES `wp_studypress_activity` (`id`),
  ADD CONSTRAINT `wp_studypress_rate_domain_ibfk_2` FOREIGN KEY (`user_id`) REFERENCES `wp_users` (`ID`),
  ADD CONSTRAINT `wp_studypress_rate_domain_ibfk_3` FOREIGN KEY (`domain_id`) REFERENCES `wp_studypress_domain` (`id`);

--
-- Constraints for table `wp_studypress_rate_quality`
--
ALTER TABLE `wp_studypress_rate_quality`
  ADD CONSTRAINT `wp_studypress_rate_quality_ibfk_1` FOREIGN KEY (`activity_id`) REFERENCES `wp_studypress_activity` (`id`),
  ADD CONSTRAINT `wp_studypress_rate_quality_ibfk_2` FOREIGN KEY (`user_id`) REFERENCES `wp_users` (`ID`);

--
-- Constraints for table `wp_studypress_slide`
--
ALTER TABLE `wp_studypress_slide`
  ADD CONSTRAINT `wp_studypress_slide_ibfk_1` FOREIGN KEY (`lesson_id`) REFERENCES `wp_studypress_activity` (`id`);

--
-- Constraints for table `wp_studypress_visite`
--
ALTER TABLE `wp_studypress_visite`
  ADD CONSTRAINT `wp_studypress_visite_ibfk_1` FOREIGN KEY (`activity_id`) REFERENCES `wp_studypress_activity` (`id`),
  ADD CONSTRAINT `wp_studypress_visite_ibfk_2` FOREIGN KEY (`user_id`) REFERENCES `wp_users` (`ID`);

/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
